<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二叉树</title>
    <link href="/2024/02/28/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2024/02/28/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="1-树的定义"><a href="#1-树的定义" class="headerlink" title="1.树的定义"></a>1.树的定义</h2><p>一棵树是由n（n&gt;0）个元素组成的有限集合，其中：</p><p>（1）每个元素称为结点（node）</p><p>（2）有一个特定的结点，称为根结点或树根（root）</p><p>（3）除根节点外，其余节点能分成m（m&gt;&#x3D;0）个互不相交的有限集合 T(0)-T(m-1)。其中的每一个子集都是一个树，这些集合被称为这棵树的子树。</p><p><img src="/image-3.png" alt="Alt text"></p><h2 id="2-树的基本概念"><a href="#2-树的基本概念" class="headerlink" title="2.树的基本概念"></a>2.树的基本概念</h2><p>(1) 树是由递归定义的</p><p>(2) 一棵树中至少有1个结点。这个节点就是根节点，他没有前驱，其余每个节点都有且只有一个前驱节点。每个节点可以有任意个后继结点。因此，树是非线性结构，但也是有序结构。</p><p>(3) 一个节点的子树个数称为这个结点的度，例如上图根节点的度为2。度为0的结点被称为叶结点；度不为0的结点被称为分支结点，根以外的分支节点称为内部结点，树中各节点的度的最大值称为这棵树的度。</p><p>(4) 在用图形表示的树形结构中，对两个用线段（我们称为树枝）连接的相关联的结点，称上端结点为下端节点的父节点，反之为子节点。</p><p>(5) 定义一棵树的根的层次为1，其他结点的层次等于他的父节点的层次加一。一棵树中所有节点的层次的最大值称为这棵树的深度。</p><p>(6) 对于树中任意两个不同的结点，从一个结点出发一定能到达另一个结点。</p><p>(7) m（m&gt;&#x3D;0）棵树的结合称为森林。</p><h2 id="3-树的遍历"><a href="#3-树的遍历" class="headerlink" title="3.树的遍历"></a>3.树的遍历</h2><h3 id="1-先序遍历"><a href="#1-先序遍历" class="headerlink" title="(1) 先序遍历"></a>(1) 先序遍历</h3><p>先访问根节点，然后根据左右先后顺序遍历各子树</p><p><img src="/image-4.png" alt="Alt text"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xl">void MyTree&lt;T&gt;::PreOrder(TreeNode&lt;T&gt; *<span class="hljs-keyword">tree</span>)<br>&#123;<br><span class="hljs-comment">//先序遍历 先访问根节点，然后按照左右先后顺序遍历各子树（根左右）</span><br>    <span class="hljs-comment">//使用递归实现</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">tree</span> != NULL)<br>&#123;<br>display(<span class="hljs-keyword">tree</span>);<br>P<span class="hljs-function"><span class="hljs-title">reOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_left);<br>P<span class="hljs-function"><span class="hljs-title">reOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="(2) 中序遍历"></a>(2) 中序遍历</h3><p>先访问左子树，然后访问根，最后访问右子树（左根右）</p><p><img src="/image-5.png"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">void MyTree&lt;T&gt;::InOrder(TreeNode&lt;T&gt;* <span class="hljs-keyword">tree</span>)<br>&#123;<br><span class="hljs-comment">//中序遍历 先访问左子树，然后访问根，最后访问右子树（左根右）</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">tree</span> != NULL)<br>&#123;<br>I<span class="hljs-function"><span class="hljs-title">nOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_left);<br>display(<span class="hljs-keyword">tree</span>);<br>I<span class="hljs-function"><span class="hljs-title">nOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-后序遍历"><a href="#3-后序遍历" class="headerlink" title="(3) 后序遍历"></a>(3) 后序遍历</h3><p>先访问左子树，然后访问右子树，最后访问根</p><p><img src="/image-6.png" alt="Alt text"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">void MyTree&lt;T&gt;::BackOrder(TreeNode&lt;T&gt; *<span class="hljs-keyword">tree</span>)<br>&#123;<br><span class="hljs-comment">//后序遍历 先访问左子树，再访问右子树，最后访问根</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">tree</span> != NULL)<br>&#123;<br>B<span class="hljs-function"><span class="hljs-title">ackOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_left);<br>B<span class="hljs-function"><span class="hljs-title">ackOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_right);<br>display(<span class="hljs-keyword">tree</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于二叉树的遍历可以去看<a href="http://t.csdnimg.cn/O3uhb%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E8%AE%B2%E7%9A%84%E5%BE%88%E8%AF%A6%E7%BB%86%E3%80%82">http://t.csdnimg.cn/O3uhb这篇文章，讲的很详细。</a></p><h2 id="4-二叉树的插入"><a href="#4-二叉树的插入" class="headerlink" title="4.二叉树的插入"></a>4.二叉树的插入</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br>TreeNode&lt;T&gt;* z = new TreeNode&lt;T&gt;(key, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr);<br><span class="hljs-keyword">if</span> (z == <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>insert(_tree, z);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;*&amp; <span class="hljs-symbol">tree, <span class="hljs-symbol">TreeNode</span></span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">z</span>)<br>&#123;<br>TreeNode&lt;T&gt;* y = NULL;<br>TreeNode&lt;T&gt;* x =tree;<br><span class="hljs-keyword">while</span> (x != <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-comment">//当x为空时停止循环，此时x无子节点，为叶子结点</span><br>y = x;<br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; x-&gt;_key)<br>&#123;<br>x = x-&gt;_left;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>x = x-&gt;_right;<br>&#125;<br>&#125;<br>z-&gt;_parent = y;<span class="hljs-comment">//将z结点的父节点设置为y,及就是x结点</span><br><span class="hljs-keyword">if</span> (y == NULL)<br>&#123;<br>tree = z;<br>&#125;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; y-&gt;_key)<br>&#123;<br>y-&gt;_left = z;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>y-&gt;_right = z;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-二叉树结点的删除"><a href="#5-二叉树结点的删除" class="headerlink" title="5.二叉树结点的删除"></a>5.二叉树结点的删除</h2><p>在删除二叉树节点时，可能会出现三种情况：</p><p>(1) 所删除的结点无子节点<br>当删除的结点无子结点时，我们只需将他的父节点指向它的指针置空即可。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">//pa为cur的父节点</span><br><span class="hljs-function"><span class="hljs-title">if</span> (cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span> == NULL &amp;&amp; cur-&gt;</span>_right == NULL)<span class="hljs-comment">//无子结点</span><br>&#123;<br>        <span class="hljs-comment">//判断cur是父节点的左右哪一个子节点</span><br><span class="hljs-function"><span class="hljs-title">if</span> (pa-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> &gt; cur-&gt;</span>_key)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_left = NULL;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_right = NULL;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> (2) 所删除的结点只有一个子节点<br>当删除的结点有一个子节点时，我们只需将G节点的父节点设置为C,将C结点的左子节点设置为G</p><p><img src="/image-7.png" alt="Alt text"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span> != NULL &amp;&amp; cur-&gt;</span>_right == NULL)<span class="hljs-comment">//只有一个子节点</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">le</span> = cur-&gt;</span>_left;<br><span class="hljs-function"><span class="hljs-title">le</span>-&gt;</span>_parent = pa;<br><span class="hljs-function"><span class="hljs-title">if</span> (pa-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> &gt; cur-&gt;</span>_key)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_right = le;<br>&#125;<br>&#125;<br>   <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span>==NULL&amp;&amp;cur-&gt;</span>_right!=NULL)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">le</span> = cur-&gt;</span>_right;<br><span class="hljs-function"><span class="hljs-title">le</span>-&gt;</span>_parent = pa;<br><span class="hljs-function"><span class="hljs-title">if</span> (pa-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> &gt; cur-&gt;</span>_key)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_right = le;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> (3) 所删除的结点有两个子节点<br> 当删除的结点有两个子节点时，我们可以使用其左子树的最大结点或者右子树的最小结点进行替换。</p> <figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span> != NULL &amp;&amp; cur-&gt;</span>_right != NULL)<span class="hljs-comment">//两个子节点都存在</span><br>&#123;<br><span class="hljs-comment">//有两种方法:去左子树的最大元素代替，或者去右子树的最小元素代替,这里使用第二种</span><br><span class="hljs-function"><span class="hljs-title">le</span> = Min(cur-&gt;</span>_right);<br><span class="hljs-function"><span class="hljs-title">cur</span>-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> = le-&gt;</span>_key;<br><span class="hljs-function"><span class="hljs-title">cur</span>-&gt;</span>_<span class="hljs-function"><span class="hljs-title">right</span> = remove(le,le-&gt;</span>_key);<span class="hljs-comment">//递归删除右子树，直到无子结点，或者只有一个子结点</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-完整代码"><a href="#6-完整代码" class="headerlink" title="6.完整代码"></a>6.完整代码</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">#pragma once<br>#include&lt;iostream&gt;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">TreeNode</span> &#123;<br><span class="hljs-keyword">public</span>:<br>T _key;<br>TreeNode* _left;<span class="hljs-comment">//左子节点</span><br>TreeNode* _right;<span class="hljs-comment">//右子节点</span><br>TreeNode* _parent;<span class="hljs-comment">//父节点</span><br>TreeNode(T k = <span class="hljs-number">0</span>, TreeNode* l = <span class="hljs-literal">null</span>ptr, TreeNode* r = <span class="hljs-literal">null</span>ptr, TreeNode* p = <span class="hljs-literal">null</span>ptr) :_key(k), _left(l), _right(r), _parent(p)<br>&#123;<br>;<br>&#125;<br>&#125;;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">MyTree</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>MyTree();<br>~MyTree();<br><br><span class="hljs-built_in">void</span> insert(T key);<span class="hljs-comment">//将key插入二叉树中</span><br><span class="hljs-built_in">void</span> PreOrder();<span class="hljs-comment">//前序遍历</span><br><span class="hljs-built_in">void</span> InOrder();<span class="hljs-comment">//中序遍历</span><br><span class="hljs-built_in">void</span> BackOrder();<span class="hljs-comment">//后序遍历</span><br><span class="hljs-built_in">bool</span> IsEmpty();<span class="hljs-comment">//判断二叉树是否为空</span><br>TreeNode&lt;T&gt;* Find(T key);<span class="hljs-comment">//查找指定结点</span><br><span class="hljs-built_in">void</span> remove(T key);<span class="hljs-comment">//删除结点,通过该函数生成一个结点</span><br><span class="hljs-built_in">void</span> destory();<span class="hljs-comment">//销毁二叉树</span><br><span class="hljs-keyword">private</span>:<br><br>TreeNode&lt;T&gt;* _tree;<span class="hljs-comment">//根节点</span><br><br><span class="hljs-built_in">void</span> insert(TreeNode&lt;T&gt;*&amp; tree, TreeNode&lt;T&gt;* z);<span class="hljs-comment">//将key插入二叉树中</span><br><span class="hljs-built_in">void</span> PreOrder(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//前序遍历</span><br><span class="hljs-built_in">void</span> InOrder(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//中序遍历</span><br><span class="hljs-built_in">void</span> BackOrder(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//后序遍历</span><br><span class="hljs-built_in">bool</span> IsEmpty(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//判断二叉树是否为空</span><br>TreeNode&lt;T&gt;* Min(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//查找以tree为根节点的二叉树的最小结点</span><br>TreeNode&lt;T&gt;* Max(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//查找以tree为根节点的二叉树的最大结点</span><br>TreeNode&lt;T&gt;* Find(TreeNode&lt;T&gt;* tree, T key);<span class="hljs-comment">//查找指定结点</span><br>TreeNode&lt;T&gt;* remove(TreeNode&lt;T&gt;* tree, T z);<span class="hljs-comment">//删除结点</span><br><span class="hljs-built_in">void</span> destory(TreeNode&lt;T&gt;*&amp; tree);<span class="hljs-comment">//销毁二叉树</span><br><span class="hljs-built_in">void</span> display(TreeNode&lt;T&gt; *z);<br>&#125;;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">MyTree</span>() :<span class="hljs-symbol">_tree</span>(<span class="hljs-symbol">nullptr</span>) &#123;&#125;;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::~<span class="hljs-symbol">MyTree</span>()<br>&#123;<br><span class="hljs-comment">//destory();</span><br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">bool</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">IsEmpty</span>()<br>&#123;<br><span class="hljs-keyword">return</span> _tree == <span class="hljs-literal">null</span>ptr;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br>TreeNode&lt;T&gt;* z = new TreeNode&lt;T&gt;(key, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr);<br><span class="hljs-keyword">if</span> (z == <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>insert(_tree, z);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;*&amp; <span class="hljs-symbol">tree, <span class="hljs-symbol">TreeNode</span></span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">z</span>)<br>&#123;<br>TreeNode&lt;T&gt;* y = NULL;<br>TreeNode&lt;T&gt;* x =tree;<br><span class="hljs-keyword">while</span> (x != <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-comment">//当x为空时停止循环，此时x无子节点，为叶子结点</span><br>y = x;<br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; x-&gt;_key)<br>&#123;<br>x = x-&gt;_left;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>x = x-&gt;_right;<br>&#125;<br>&#125;<br>z-&gt;_parent = y;<span class="hljs-comment">//将z结点的父节点设置为y,及就是x结点</span><br><span class="hljs-keyword">if</span> (y == NULL)<br>&#123;<br>tree = z;<br>&#125;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; y-&gt;_key)<br>&#123;<br>y-&gt;_left = z;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>y-&gt;_right = z;<br>&#125;<br><br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">PreOrder</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;先序遍历：&quot;</span>;<br>PreOrder(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">PreOrder</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt; *<span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//先序遍历 先访问根节点，然后按照左右先后顺序遍历各子树（根左右）</span><br><span class="hljs-keyword">if</span> (tree != NULL)<br>&#123;<br>display(tree);<br>PreOrder(tree-&gt;_left);<br>PreOrder(tree-&gt;_right);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">InOrder</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (_tree == NULL)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;tree is empty&quot;</span> &lt;&lt; std::endl;<br>exit(<span class="hljs-number">1</span>);<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;中序遍历：&quot;</span>;<br>InOrder(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">InOrder</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//中序遍历 先访问左子树，然后访问根，最后访问右子树（左根右）</span><br><span class="hljs-keyword">if</span> (tree != NULL)<br>&#123;<br>InOrder(tree-&gt;_left);<br>display(tree);<br>InOrder(tree-&gt;_right);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">BackOrder</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;后序遍历：&quot;</span>;<br>BackOrder(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">BackOrder</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt; *<span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//后序遍历 先访问左子树，再访问右子树，最后访问根</span><br><span class="hljs-keyword">if</span> (tree != NULL)<br>&#123;<br>BackOrder(tree-&gt;_left);<br>BackOrder(tree-&gt;_right);<br>display(tree);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">display</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">z</span>)<br>&#123;<br>std::cout &lt;&lt; z-&gt;_key &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Max</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-keyword">while</span> (tree-&gt;_right != NULL)<br>&#123;<br>tree = tree-&gt;_right;<br>&#125;<br><span class="hljs-keyword">return</span> tree;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Min</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-keyword">while</span> (tree-&gt;_left != NULL)<br>&#123;<br>tree = tree-&gt;_left;<br>&#125;<br><span class="hljs-keyword">return</span> tree;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Find</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br><span class="hljs-keyword">return</span> Find(_tree, key);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Find</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree, <span class="hljs-symbol">T</span></span> <span class="hljs-symbol">key</span>)//查找指定结点<br>&#123;<br><span class="hljs-keyword">if</span> (tree == NULL || tree-&gt;_key == key)<br>&#123;<br><span class="hljs-keyword">return</span> tree;<br>&#125;<br><span class="hljs-keyword">if</span> (tree-&gt;_key &gt; key)<br>&#123;<br><span class="hljs-keyword">return</span> Find(tree-&gt;_left, key);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> Find(tree-&gt;_right, key);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">remove</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br>remove(_tree, key);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt; ::<span class="hljs-symbol">remove</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree, <span class="hljs-symbol">T</span></span> <span class="hljs-symbol">z</span>)//删除结点<br>&#123;<br>TreeNode&lt;T&gt;* cur = Find(tree, z);<br><span class="hljs-keyword">if</span> (cur == _tree)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Tree can&#x27;t be delete&quot;</span> &lt;&lt; std::endl;<br>exit(<span class="hljs-number">1</span>);<br>&#125;<br><br>TreeNode&lt;T&gt;* pa = cur-&gt;_parent;<span class="hljs-comment">//找到父节点</span><br>TreeNode&lt;T&gt;* le = NULL;<br><br><span class="hljs-keyword">if</span> (cur-&gt;_left == NULL &amp;&amp; cur-&gt;_right == NULL)<span class="hljs-comment">//无子结点</span><br>&#123;<br><span class="hljs-keyword">if</span> (pa-&gt;_key &gt; cur-&gt;_key)<br>&#123;<br>pa-&gt;_left = NULL;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pa-&gt;_right = NULL;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;_left != NULL &amp;&amp; cur-&gt;_right == NULL)<span class="hljs-comment">//只有一个子节点</span><br>&#123;<br>le = cur-&gt;_left;<br>le-&gt;_parent = pa;<br><span class="hljs-keyword">if</span> (pa-&gt;_key &gt; cur-&gt;_key)<br>&#123;<br>pa-&gt;_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pa-&gt;_right = le;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur-&gt;_left==NULL&amp;&amp;cur-&gt;_right!=NULL)<br>&#123;<br>le = cur-&gt;_right;<br>le-&gt;_parent = pa;<br><span class="hljs-keyword">if</span> (pa-&gt;_key &gt; cur-&gt;_key)<br>&#123;<br>pa-&gt;_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pa-&gt;_right = le;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;_left != NULL &amp;&amp; cur-&gt;_right != NULL)<span class="hljs-comment">//两个子节点都存在</span><br>&#123;<br><span class="hljs-comment">//有两种方法:去左子树的最大元素代替，或者去右子树的最小元素代替,这里使用第二种</span><br>le = Min(cur-&gt;_right);<br>cur-&gt;_key = le-&gt;_key;<br>cur-&gt;_right = remove(le,le-&gt;_key);<span class="hljs-comment">//递归删除右子树，直到无子结点，或者只有一个子结点</span><br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">destory</span>()<br>&#123;<br>destory(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">destory</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;*&amp; <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//使用递归调用对左子树和右子树都进行销毁</span><br><span class="hljs-keyword">if</span> (tree == NULL)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//在递归调用中不应使用return</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  if (tree-&gt;_left != NULL)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        return destroy(tree-&gt;_left);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    if (tree-&gt;_right != NULL)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        return destroy(tree-&gt;_right);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>destory(tree-&gt;_left);<br>destory(tree-&gt;_right);<br>delete tree;<br>tree = NULL;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2024/01/28/%E6%A0%88/"/>
    <url>/2024/01/28/%E6%A0%88/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/01/21/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/01/21/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>是一种物理存储结构上非连续，非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针连接顺序实现的。</p><ul><li>优点<ul><li>按需申请空间，不用了就释放空间</li><li>头部中间插入数据不需要挪动数据</li><li>不存在空间浪费</li></ul></li><li>缺点： <ul><li>每一个数据，都要存一个指针去链接后面节点，不支持随机访问。</li></ul></li></ul><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。<br><img src="/image-1.png" alt="Alt text"><br>输入：head &#x3D; [1,2,3,4,5]<br>输出：[5,4,3,2,1]</p><ul><li>解题思路：<br>定义三个ListNode*类型，cur为链表，pre为反转后的链表，next用于存储下一节点。<br><br>初始时原链表为：1-&gt;2-&gt;3-&gt;4-&gt;5,反转后的链表和next都为空<br>进入循环后，令next-&gt;2;此时cur-&gt;1结点，令cur-&gt;next&#x3D;nullptr，则原链表变为[1];<br>令pre &#x3D; cur则反转后的链表为[1],再将cur &#x3D; next则原链表为[2,3,4,5]<br>进行第二次循环时，next-&gt;3结点此时令cur-&gt;next&#x3D;pre,则原链表为2-&gt;1<br>pre &#x3D; cur  cur &#x3D; next在执行这俩条语句后，pre为2-&gt;1，实现了初步反转。<br>继续循换可实现整体反转，时间复杂度为O(N)，空间复杂度O(1)。<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    ListNode* reverseList(ListNode* head) &#123;<br>ListNode* pre = nullptr;<br>ListNode* cur = head;<br>ListNode* <span class="hljs-keyword">next</span> = nullptr;<br><span class="hljs-keyword">while</span> (cur)<br>&#123;<br><span class="hljs-keyword">next</span> = cur-&gt;<span class="hljs-keyword">next</span>;<br>cur-&gt;<span class="hljs-keyword">next</span> = pre;<br>pre = cur;<br>        cur = <span class="hljs-keyword">next</span>;<br>&#125;<br><span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a>876. 链表的中间结点</h2><p>给你单链表的头结点 head ，请你找出并返回链表的中间结点。<br>如果有两个中间结点，则返回第二个中间结点。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class Solution &#123;<br>public:<br>    ListNode* middleNode(ListNode* head) &#123;<br>        ListNode <span class="hljs-number">*c</span><span class="hljs-attribute">ur</span>=head;<br>        short <span class="hljs-attribute">hl</span>=0;//链表长度<br>        <span class="hljs-keyword">while</span>(cur)<br>        &#123;<br>            ++hl;<br>            <span class="hljs-attribute">cur</span>=cur-&gt;next;<br>        &#125;<br>        <span class="hljs-attribute">cur</span>=head;<br>        int <span class="hljs-attribute">num</span>=0;<br>        <span class="hljs-keyword">while</span>(num&lt;hl/2)<br>        &#123;<br>            ++num;<br>            <span class="hljs-attribute">cur</span>=cur-&gt;next;<br>        &#125;<br>        return cur;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>顺序表</title>
    <link href="/2024/01/18/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2024/01/18/%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p>顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。<br>缺陷： </p><ul><li>1.空间不够了需要扩容，扩容是有消耗</li><li>2.头部或中间位置的插入删除需要挪动，挪动数据也是有消耗的</li><li>3.为了避免频繁扩容，每次都是以倍数去扩容，存在空间浪费</li></ul><h1 id="顺序表的实现"><a href="#顺序表的实现" class="headerlink" title="顺序表的实现"></a>顺序表的实现</h1><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">SeqList</span> &#123;<br><span class="hljs-keyword">public</span>:<br>T *m_a;<br><span class="hljs-built_in">int</span> m_size;<span class="hljs-comment">//表示数组中数据的个数</span><br><span class="hljs-built_in">int</span> m_capacity;<span class="hljs-comment">//数组容量</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">SeqList</span>()<span class="hljs-comment">//默认构造函数</span><br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_a = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">this</span>-&gt;m_size = <span class="hljs-keyword">this</span>-&gt;m_capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">SeqList</span>(SeqList&amp; sl)<span class="hljs-comment">//拷贝构造函数，深拷贝</span><br>&#123;<br>m_size = sl.m_size;<br>m_capacity = sl.m_size;<br>* m_a = <span class="hljs-keyword">new</span> T[sl.m_size];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>m_a[i] = sl[i];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2.析构函数"></a>2.析构函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">~<span class="hljs-built_in">SeqList</span>() <span class="hljs-comment">//析构函数</span><br>&#123; <br><span class="hljs-keyword">if</span> (m_a)<br>&#123;<br><span class="hljs-keyword">delete</span>[] m_a;<br>&#125;<br>m_a = <span class="hljs-literal">nullptr</span>;<br>m_size = m_capacity = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-初始化和扩容函数"><a href="#3-初始化和扩容函数" class="headerlink" title="3.初始化和扩容函数"></a>3.初始化和扩容函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//初始化和扩容</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CheckCapacity</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_size == m_capacity || m_capacity == <span class="hljs-number">0</span>)<span class="hljs-comment">//如果满了或者没初始化</span><br>&#123;<br><span class="hljs-type">int</span> newcapacity = (<span class="hljs-number">0</span> == m_capacity) ? <span class="hljs-number">5</span> : <span class="hljs-number">2</span> * m_capacity;<br>T* tmp = <span class="hljs-keyword">new</span> T[newcapacity];<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>tmp[j++] = m_a[i];<br>&#125;<br>m_a = tmp;<br>tmp = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">delete</span>[]tmp;<span class="hljs-comment">//释放指针，避免野指针</span><br>m_capacity = newcapacity;<span class="hljs-comment">//更新容量</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-基本函数"><a href="#4-基本函数" class="headerlink" title="4.基本函数"></a>4.基本函数</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getSize</span>()</span> &#123; <span class="hljs-keyword">return</span> m_size; &#125;<span class="hljs-comment">//返回顺序表元素个数</span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getCapacity</span>()</span> &#123; <span class="hljs-keyword">return</span> m_capacity; &#125;<span class="hljs-comment">//返回顺序表最大容量</span><br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">Empty</span>()</span> &#123; <span class="hljs-keyword">if</span> (m_size == m_capacity) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<span class="hljs-comment">//判断顺序表是否为空</span><br></code></pre></td></tr></table></figure><h2 id="5-头插"><a href="#5-头插" class="headerlink" title="5.头插"></a>5.头插</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListPushFront</span><span class="hljs-params">(T n)</span><span class="hljs-comment">//头插</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">CheckCapacity</span>();<span class="hljs-comment">//检查容量</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =m_size<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br>m_a[i + <span class="hljs-number">1</span>] = m_a[i - <span class="hljs-number">1</span>];<br>&#125;<br>m_a[<span class="hljs-number">0</span>] = n;<br>m_size++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-头删"><a href="#6-头删" class="headerlink" title="6.头删"></a>6.头删</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SeqListPopFront</span>()<span class="hljs-comment">//头删</span></span><br>&#123;<br>assert (!Empty());<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>m_a[i] = m_a[i + <span class="hljs-number">1</span>];<br>&#125;<br>m_size--;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-尾插"><a href="#7-尾插" class="headerlink" title="7.尾插"></a>7.尾插</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListPushBack</span><span class="hljs-params">( T n)</span> <span class="hljs-comment">//尾插</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">CheckCapacity</span>();<span class="hljs-comment">//检查容量</span><br>m_a[m_size] = n;<br>m_size++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-尾删"><a href="#8-尾删" class="headerlink" title="8.尾删"></a>8.尾删</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">SeqListPopBack</span>() <span class="hljs-comment">//尾删</span><br>&#123;<br><span class="hljs-built_in">assert</span>(!Empty());<br>m_size--;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-打印函数"><a href="#9-打印函数" class="headerlink" title="9.打印函数"></a>9.打印函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintSeqList</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_size == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;该顺序表为空&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;m_a[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;]=&quot;</span> &lt;&lt; m_a[i] &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>&#125;<br>std::cout &lt;&lt; std::endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)<span class="hljs-comment">//双指针解法</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[i]!=val)<br>            &#123;<br>                nums[n]=nums[i];<br>                n++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//题目链接https://leetcode.cn/problems/remove-element/</span><br></code></pre></td></tr></table></figure><h2 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h2><p>给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。</p><p>考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：<br>更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。<br>返回 k 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,i=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;nums.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[left]!=nums[i])<br>            &#123;<br>                nums[left+<span class="hljs-number">1</span>]=nums[i];<br>                left++;<br>            &#125;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>顺序表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Socket网络编程</title>
    <link href="/2023/11/29/c-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/11/29/c-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Socket套接字函数"><a href="#Socket套接字函数" class="headerlink" title="Socket套接字函数"></a>Socket套接字函数</h1><p>在使用scoket进行网络编程时应首先包含#include&lt;winsock2.h&gt;（Windows环境下）头文件，linux环境可以通过man socket命令在终端查询所在的头文件。</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stan">uersname:~$ man socket<br><br>SOCKET(<span class="hljs-number">2</span>)                  Linux Programmer&#x27;s Manual                 SOCKET(<span class="hljs-number">2</span>)<br><br>NAME<br>       socket - create an endpoint <span class="hljs-keyword">for</span> communication<br><br>SYNOPSIS<br>       <span class="hljs-meta">#include &lt;<span class="hljs-string">sys</span>/<span class="hljs-string">types.h</span>&gt;          /* S<span class="hljs-string">ee</span> NOTES */</span><br>       <span class="hljs-meta">#include &lt;<span class="hljs-string">sys</span>/<span class="hljs-string">socket.h</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="1-socket函数"><a href="#1-socket函数" class="headerlink" title="1.socket函数"></a>1.socket函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//创建一个套接字</span><br><span class="hljs-type">int</span> socket(<span class="hljs-type">int</span> af,<span class="hljs-type">int</span> <span class="hljs-keyword">type</span>,<span class="hljs-type">int</span> protocol)<br></code></pre></td></tr></table></figure><p>socket函数有三个参数：</p><ul><li>af：使用的地址族协议<ul><li>AF_INET：使用ipv4形式的ip地址;</li><li>AF_INET6：使用ipv6形式的ip地址;</li></ul></li><li>type:<ul><li>SOCK_SOTREAM：使用流式的地址传输协议;</li><li>SOCK_DGRAM：用报式的地址传输协议;</li></ul></li><li>portocol: 一般写0，使用默认的协议即可<ul><li>SOCK_SOTREAM：tcp;</li><li>SOCK_DGRAM：udp;</li></ul></li></ul><p>关于socket函数的返回值：socket函数的返回值是一个int类型文件描述符，成功返回文件描述符，失败则返回-1。（这里说明一下，在网络编程中，几乎所有的函数失败的返回值都是-1）</p><h2 id="2-bind函数"><a href="#2-bind函数" class="headerlink" title="2.bind函数"></a>2.bind函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//用于将文件描述符与ip地址和端口进行绑定</span><br><span class="hljs-type">int</span> bind(socket s,<span class="hljs-keyword">const</span> sockaddr* addr,<span class="hljs-type">int</span> <span class="hljs-built_in">len</span>)<br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>addr：将绑定的端口和ip地址记录在这个结构体中;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//这里说明一下sockaddr数据结构</span><br><br><span class="hljs-comment">// 在写数据的时候不好用</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr</span> &#123;<br><span class="hljs-type">sa_family_t</span> sa_family;       <span class="hljs-comment">// 地址族协议, ipv4</span><br><span class="hljs-type">char</span>        sa_data[<span class="hljs-number">14</span>];     <span class="hljs-comment">// 端口(2字节) + IP地址(4字节) + 填充(8字节)</span><br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span><br>&#123;<br>    <span class="hljs-type">sa_family_t</span> sin_family;<span class="hljs-comment">/* 地址族协议: AF_INET */</span><br>    <span class="hljs-type">in_port_t</span> sin_port;         <span class="hljs-comment">/* 端口, 2字节-&gt; 大端  */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">in_addr</span> sin_addr;    <span class="hljs-comment">/* IP地址, 4字节 -&gt; 大端  */</span><br>&#125;;  <br></code></pre></td></tr></table></figure></li><li>len：addr结构体的大小，可以使用sizeof()函数获得;</li><li>返回值：成功返回0，失败则返回-1;</li></ul><h2 id="3-listen函数"><a href="#3-listen函数" class="headerlink" title="3.listen函数"></a>3.listen函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用于给监听的套接字设置监听</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(socket s,<span class="hljs-type">int</span> backlog)</span><br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>backlog：设置最大连接请求数量，最大128;</li><li>返回值：成功返回0，失败则返回-1;</li></ul><h2 id="4-accept函数"><a href="#4-accept函数" class="headerlink" title="4.accept函数"></a>4.accept函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//接受连接</span><br><span class="hljs-type">int</span> accept(socket s,sockaddr* addr,<span class="hljs-type">int</span> <span class="hljs-built_in">len</span>)<br><span class="hljs-comment">//当无连接请求时，处于阻塞状态</span><br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>addr：用于存储建立连接的客户端信息(ip地址和端口等);</li><li>len：addr的大小;</li><li>返回值：成功则返回用于通信的文件描述符，失败返回-1;</li></ul><h2 id="5-connection函数"><a href="#5-connection函数" class="headerlink" title="5.connection函数"></a>5.connection函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//客户端建立连接函数</span><br><span class="hljs-type">int</span> connection(socket s,<span class="hljs-keyword">const</span> sockaddr* addr,<span class="hljs-type">int</span> <span class="hljs-built_in">len</span>)<br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>addr: 用于存储建立连接的客户端信息(ip地址和端口等);</li><li>len: addr的大小;</li><li>返回值：成功则返回0，失败返回-1;</li></ul><h2 id="6-send-write函数"><a href="#6-send-write函数" class="headerlink" title="6.send&#x2F;write函数"></a>6.send&#x2F;write函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//发送数据</span><br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">send</span><span class="hljs-params">(socket s,<span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf,<span class="hljs-type">size_t</span> len,<span class="hljs-type">int</span> flags)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">write</span><span class="hljs-params">(socket s, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> len)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>s：用于通信的文件描述符，为accept()的返回值</li><li>buf：传入参数，用于存储发送的数据</li><li>len：buf的容量</li><li>flags: 特殊的属性, 一般不使用, 指定为 0</li><li>返回值： 发送成功返回实际的字节数与len相等，失败返回0</li></ul><h2 id="7-read-recv函数"><a href="#7-read-recv函数" class="headerlink" title="7.read&#x2F;recv函数"></a>7.read&#x2F;recv函数</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//接收数据</span><br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> size)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">recv</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> size, <span class="hljs-type">int</span> flags)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>s：用于通信的文件描述符，为accept()的返回值</li><li>buf：传出参数，用于存储接受的数据</li><li>len：buf的容量</li><li>flags: 特殊的属性, 一般不使用, 指定为 0</li><li>返回值： 大于零接受成功；等于0对方断开连接；-1失败</li></ul><p>如果连接没有断开，接收端接收不到数据，接收数据的函数会阻塞等待数据到达，数据到达后函数解除阻塞，开始接收数据，当发送端断开连接，接收端无法接收到任何数据，但是这时候就不会阻塞了，函数直接返回0。</p><h1 id="服务器段实现"><a href="#服务器段实现" class="headerlink" title="服务器段实现"></a>服务器段实现</h1><p>以下代码均在windows环境下实现</p><h2 id="1-初始化网络环境"><a href="#1-初始化网络环境" class="headerlink" title="1.初始化网络环境"></a>1.初始化网络环境</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//在windows环境下需要加载socket套接字环境</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-comment">//网络环境初始化</span><br>WSADATA data;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ref = <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;data);<span class="hljs-comment">// 返回值: 成功返回0，失败返回SOCKET_ERROR。</span><br><span class="hljs-comment">//一般都使用MAKEWORD(2, 2)</span><br></code></pre></td></tr></table></figure><h2 id="2-创建socket的套接字"><a href="#2-创建socket的套接字" class="headerlink" title="2.创建socket的套接字"></a>2.创建socket的套接字</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//创建socket套接字，返回一个int的文件描述符</span><br>    <span class="hljs-type">int</span> sock_fd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-comment">//ipv4和流式协议</span><br><span class="hljs-keyword">if</span> (sock_fd==SOCKET_ERROR)<span class="hljs-comment">//判断是否成功</span><br>&#123;<br>std::cerr &lt;&lt; socket &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-对文件描述符绑定ip和端口"><a href="#3-对文件描述符绑定ip和端口" class="headerlink" title="3.对文件描述符绑定ip和端口"></a>3.对文件描述符绑定ip和端口</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">   <span class="hljs-comment">//在vs环境下使用inet_addr()必须添加</span><br>   <span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS 这个宏</span><br>   sockaddr_in addr;<span class="hljs-comment">//创建一个sockaddr_in类型的对象，用于存储ip和端口</span><br>addr.sin_family = AF_INET;<span class="hljs-comment">//设置地址协议为ipv4</span><br>addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">8080</span>);<span class="hljs-comment">//设置端口</span><br>addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;10.0.0.1&quot;</span>);<span class="hljs-comment">//绑定本机的ip，可以在命令窗口查看</span><br>   <span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(addr);<br><span class="hljs-type">int</span> bef = <span class="hljs-built_in">bind</span>(sock_fd, (sockaddr*)&amp;addr, len);<br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;绑定失败&quot;</span>;<br>std::cerr &lt;&lt; bind &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-设置监听"><a href="#4-设置监听" class="headerlink" title="4.设置监听"></a>4.设置监听</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">   <span class="hljs-comment">//用于监听有无客户端发起连接请求</span><br>   <span class="hljs-type">int</span> bef = <span class="hljs-built_in">listen</span>(sock_fd, <span class="hljs-number">128</span>);<span class="hljs-comment">//最大可连接数为128</span><br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;设置监听失败&quot;</span>;<br>std::cerr &lt;&lt;listen &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-接受连接"><a href="#5-接受连接" class="headerlink" title="5.接受连接"></a>5.接受连接</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">   <span class="hljs-comment">//当有客户端建立连接，则通过accept()建立连接，返回一个用于通信的文件描述符</span><br>   sockaddr_in cliaddr;<span class="hljs-comment">//用于存储客户机的信息</span><br><span class="hljs-type">int</span> caddlen = <span class="hljs-built_in">sizeof</span>(cliaddr);<br><span class="hljs-type">int</span> afd = <span class="hljs-built_in">accept</span>(sock_fd, (sockaddr*)&amp;cliaddr, &amp;caddlen);<br><span class="hljs-keyword">if</span> (afd == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;连接失败&quot;</span>;<br>std::cerr &lt;&lt; accept &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-通信"><a href="#6-通信" class="headerlink" title="6.通信"></a>6.通信</h2><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)<br>&#123;<br><span class="hljs-keyword">char</span> buff[<span class="hljs-number">1024</span>];<span class="hljs-comment">//创建一个数组，用于存储客户端发来的信息</span><br>memset(buff, <span class="hljs-number">0</span>, sizeof(buff));<br><span class="hljs-keyword">int</span> rlen=recv(afd, buff, sizeof(buff), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (rlen &gt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client is :&quot;</span> &lt;&lt; buff &lt;&lt; std::endl;<br>send(afd, buff, rlen,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rlen == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;客户端断开连接&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cerr &lt;&lt; recv &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-关闭文件描述符"><a href="#7-关闭文件描述符" class="headerlink" title="7.关闭文件描述符"></a>7.关闭文件描述符</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">   <span class="hljs-built_in">closesocket</span>(sock_fd);<br><span class="hljs-built_in">closesocket</span>(afd);<br><span class="hljs-comment">// 注销Winsock相关库</span><br><span class="hljs-built_in">WSACleanup</span>();<br></code></pre></td></tr></table></figure><h2 id="8-完整代码"><a href="#8-完整代码" class="headerlink" title="8.完整代码"></a>8.完整代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS <span class="hljs-comment">//vs环境下必须定义，否则无法使用inet_addr函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1.网络环境初始化</span><br>WSADATA data;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ref = <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;data);<span class="hljs-comment">// 返回值: 成功返回0，失败返回SOCKET_ERROR。</span><br><span class="hljs-keyword">if</span> (ref == SOCKET_ERROR)<br>&#123;<br>std::cerr &lt;&lt; <span class="hljs-string">&quot;初始化网络失败&quot;</span> &lt;&lt; WSAStartup &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> std::cout &lt;&lt; <span class="hljs-string">&quot;初始化网络环境&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-comment">//2.创建监听字节符</span><br><span class="hljs-comment">//const int sock_fd = socket(AF_INET, SOCK_STREAM, 0);//ipv4</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> sock_fd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-comment">//ipv4</span><br><span class="hljs-keyword">if</span> (sock_fd==SOCKET_ERROR)<br>&#123;<br>std::cerr &lt;&lt; socket &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//3.绑定端口合ip</span><br>sockaddr_in addr;<br>addr.sin_family = AF_INET;<span class="hljs-comment">//设置地址协议为ipv4</span><br>addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">5678</span>);<span class="hljs-comment">//设置端口</span><br>addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;192.168.179.1&quot;</span>);<span class="hljs-comment">//绑定本机的ip</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;server is ip:&quot;</span> &lt;&lt;<span class="hljs-string">&quot;192.168.179.1&quot;</span>  &lt;&lt; <span class="hljs-string">&quot;     server is port : &quot;</span> &lt;&lt; <span class="hljs-built_in">ntohs</span>(addr.sin_port) &lt;&lt; std::endl;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(addr);<br><span class="hljs-type">int</span> bef = ::<span class="hljs-built_in">bind</span>(sock_fd, (sockaddr*)&amp;addr, len);<br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;绑定失败&quot;</span>;<br>std::cerr &lt;&lt; bind &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//4.设置监听</span><br>bef = <span class="hljs-built_in">listen</span>(sock_fd, <span class="hljs-number">128</span>);<br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;设置监听失败&quot;</span>;<br>std::cerr &lt;&lt;listen &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//5.接受连接</span><br>sockaddr_in cliaddr;<span class="hljs-comment">//用于存储客户机的信息</span><br><span class="hljs-type">int</span> caddlen = <span class="hljs-built_in">sizeof</span>(cliaddr);<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> afd = ::<span class="hljs-built_in">accept</span>(sock_fd, (sockaddr*)&amp;cliaddr, &amp;caddlen);<br><span class="hljs-keyword">if</span> (afd == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;连接失败&quot;</span>;<br>std::cerr &lt;&lt; accept &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client is ip&quot;</span> &lt;&lt;cliaddr.sin_addr.S_un.S_addr&lt;&lt;<span class="hljs-string">&quot;client is port &quot;</span>&lt;&lt;cliaddr.sin_port &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-comment">//6.接收发送数据</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-type">char</span> buff[<span class="hljs-number">1024</span>];<br><span class="hljs-built_in">memset</span>(buff, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buff));<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> rlen=<span class="hljs-built_in">recv</span>(afd, buff, <span class="hljs-built_in">sizeof</span>(buff), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (rlen &gt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client is :&quot;</span> &lt;&lt; buff &lt;&lt; std::endl;<br><span class="hljs-built_in">send</span>(afd, buff, rlen,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rlen == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;客户端断开连接&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cerr &lt;&lt; recv &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">closesocket</span>(sock_fd);<br><span class="hljs-built_in">closesocket</span>(afd);<br><span class="hljs-comment">// 注销Winsock相关库</span><br><span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h1><p>在网络编程中，客户端的实现比服务端简单，只有3个步骤</p><ul><li>创建socket套接字：与服务端一致</li><li>建立连接<pre><code class="hljs">  sockaddr_in addr;  addr.sin_family = AF_INET;  addr.sin_port= htons(8080);//与服务器端口一直  addr.sin_addr.S_un.S_addr= inet_addr(&quot;10.0.0.1&quot;);//绑定本机的ip  int conct_fd = connect(sock_fd, (sockaddr*)&amp;addr, sizeof(addr));  if (conct_fd == SOCKET_ERROR)  &#123;      std::cout &lt;&lt; &quot;连接失败&quot;;      return -1;  &#125;  else std::cout &lt;&lt; &quot;连接成功&quot; &lt;&lt; std::endl;</code></pre></li><li>通信：与服务端一致</li></ul><p>注意：在客户端也需要初始化网络环境，以及结束时关闭文件描述符和注销socket相关库</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/28/hello-world/"/>
    <url>/2023/11/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
