<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>QT电子相册（三）——双击打开图片与切换</title>
    <link href="/2024/03/30/QT%E7%94%B5%E5%AD%90%E7%9B%B8%E5%86%8C%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%8F%8C%E5%87%BB%E6%89%93%E5%BC%80%E5%9B%BE%E7%89%87%E4%B8%8E%E5%88%87%E6%8D%A2/"/>
    <url>/2024/03/30/QT%E7%94%B5%E5%AD%90%E7%9B%B8%E5%86%8C%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%8F%8C%E5%87%BB%E6%89%93%E5%BC%80%E5%9B%BE%E7%89%87%E4%B8%8E%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h1><p>在ProTreeWidget的构造函数中添加双击信号的槽函数连接</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">connect(<span class="hljs-name">this</span>, <span class="hljs-symbol">&amp;ProTreeWidget</span>:<span class="hljs-symbol">:itemDoubleClicked</span>, this, <span class="hljs-symbol">&amp;ProTreeWidget</span>:<span class="hljs-symbol">:SlotDoubleClickItem</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>实现SlotDoubleClickItem槽函数</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">void</span> ProTreeWidget::SlotDoubleClickItem(QTreeWidgetItem* <span class="hljs-built_in">double</span>Item, <span class="hljs-built_in">int</span> col)&#123;<br>   <span class="hljs-comment">//qDebug() &lt;&lt; &quot;ProTreeWidget::SlotDoubleClickItem&quot; &lt;&lt; endl;</span><br><br>    <span class="hljs-keyword">if</span>(QGuiApplication::mouseButtons() == Qt::LeftButton)   <span class="hljs-comment">//判断是否为左键</span><br>        &#123;<br>            <span class="hljs-built_in">auto</span> * tree_doubleItem = dynamic_cast&lt;ProTreeItem*&gt;(<span class="hljs-built_in">double</span>Item);<br>            <span class="hljs-keyword">if</span>(!tree_doubleItem)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-built_in">int</span> itemtype = (<span class="hljs-built_in">int</span>)(tree_doubleItem-&gt;type());<br>            <span class="hljs-keyword">if</span>(itemtype == TreeItemPic)&#123;<br>                emit SigUpdateSelected(tree_doubleItem-&gt;GetPath());<br>                _selected_item = <span class="hljs-built_in">double</span>Item;<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之前在MainWindow的构造函数里添加了ProTree，这次我们要在添加一个PicShow类，PicShow类是我们新增的Qt设计师界面类，这里介绍它的ui内容。 </p><p>1 在PicShow里添加一个网格布局，然后将PicShow设置为水平布局。</p><p>2 然后拖动一个QWidget放到PicShow左侧，再拖动一个QWidget放到PicShow的右侧，拖动一个label放到中间。</p><p>3 然后设置两个Widget的宽度都为固定的80像素。将两个widget设置为垂直布局，然后分别添加一个button。 </p><p>4 拖放两个水平的spacer和垂直的spacer分别放在label的上下左右，保证label居中。 效果如下</p><p><img src="/image-17.png" alt="alt text"></p><p>在MianWindow中添加PicShow</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl">_protree = new ProTree();<br><span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">proLayout</span>-&gt;</span>addWidget(_protree,<span class="hljs-number">0</span>);<br><br>_picshow = new PicShow();<br><span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">picLayout</span>-&gt;</span>addWidget(_picshow);<br></code></pre></td></tr></table></figure><h1 id="自定义按钮"><a href="#自定义按钮" class="headerlink" title="自定义按钮"></a>自定义按钮</h1><p>现在需要实现按钮的悬浮，点击效果，所以需要继承QPushButton，实现我们自己定义的按钮类PicButton。 添加C++类PicButton，基类选择QPushButton。 实现一个设置图标的函数，参数分别为正常状态，悬浮状态，以及按下状态的效果</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">void</span> PicButton::<span class="hljs-title function_">SetIcons</span>(<span class="hljs-keyword">const</span> QString &amp;<span class="hljs-built_in">normal</span>, <span class="hljs-keyword">const</span> QString &amp;hover, <span class="hljs-keyword">const</span> QString &amp;pressed)<br>&#123;<br>    _normal = <span class="hljs-built_in">normal</span>;<br>    _hover = hover;<br>    _pressed = pressed;<br><br>    QPixmap tmpPixmap;<br>    tmpPixmap.<span class="hljs-property">load</span>(<span class="hljs-built_in">normal</span>);<br>    <span class="hljs-variable">this</span>-&gt;<span class="hljs-title function_">resize</span>(tmpPixmap.<span class="hljs-property">size</span>());<br>    <span class="hljs-variable">this</span>-&gt;<span class="hljs-title function_">setIcon</span>(tmpPixmap);<br>    <span class="hljs-variable">this</span>-&gt;<span class="hljs-title function_">setIconSize</span>(tmpPixmap.<span class="hljs-property">size</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>重载event函数，实现根据事件类型刷新按钮样式的逻辑</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">bool</span> PicButton::event(QEvent *event)<br>&#123;<br>    <span class="hljs-keyword">switch</span> (event-&gt;type())<br>        &#123;<br>        <span class="hljs-keyword">case</span> QEvent::Enter:<br>            setHoverIcon();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> QEvent::Leave:<br>            setNormalIcon();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> QEvent::MouseButtonPress:<br>            setPressIcon();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> QEvent::MouseButtonRelease:<br>            setHoverIcon();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>         <span class="hljs-keyword">return</span> QPushButton::event(event);<br>&#125;<br></code></pre></td></tr></table></figure><p>设置按钮样式的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">void</span> <span class="hljs-title class_">PicButton</span>::<span class="hljs-title function_">setNormalIcon</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">QPixmap</span> tmpPixmap;<br>    tmpPixmap.<span class="hljs-title function_">load</span>(_normal);<br>    <span class="hljs-variable language_">this</span>-&gt;<span class="hljs-title function_">setIcon</span>(tmpPixmap);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title class_">PicButton</span>::<span class="hljs-title function_">setHoverIcon</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">QPixmap</span> tmpPixmap;<br>    tmpPixmap.<span class="hljs-title function_">load</span>(_hover);<br>    <span class="hljs-variable language_">this</span>-&gt;<span class="hljs-title function_">setIcon</span>(tmpPixmap);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title class_">PicButton</span>::<span class="hljs-title function_">setPressIcon</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">QPixmap</span> tmpPixmap;<br>    tmpPixmap.<span class="hljs-title function_">load</span>(_pressed);<br>    <span class="hljs-variable language_">this</span>-&gt;<span class="hljs-title function_">setIcon</span>(tmpPixmap);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="按钮的渐隐效果"><a href="#按钮的渐隐效果" class="headerlink" title="按钮的渐隐效果"></a>按钮的渐隐效果</h1><p>接下来我们要实现将鼠标滑动到PicShow区域才显示前进和后退按钮，滑出PicShow区域则不显示。 为使按钮实现渐隐渐现的效果，所以我们通过动画实现。在PicShow的构造函数里创建两个渐隐渐现的动画,将效果绑定到两个按钮上。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xl">QGraphicsOpacityEffect *opacity_pre = new QGraphicsOpacityEffect(this);<br><span class="hljs-function"><span class="hljs-title">opacity_pre</span>-&gt;</span>setOpacity(<span class="hljs-number">0</span>); <span class="hljs-comment">//设置透明度0.5,透明范围：[0,1]</span><br><span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">previousBtn</span>-&gt;</span>setGraphicsEffect(opacity_pre);<br><br><br>QGraphicsOpacityEffect *opacity_next = new QGraphicsOpacityEffect(this);<br><span class="hljs-function"><span class="hljs-title">opacity_next</span>-&gt;</span>setOpacity(<span class="hljs-number">0</span>); <span class="hljs-comment">//设置透明度0.5,透明范围：[0,1]</span><br><span class="hljs-comment">//应用到需要透明变化的控件；</span><br><span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">nextBtn</span>-&gt;</span>setGraphicsEffect(opacity_next);<br><br><span class="hljs-comment">//使用属性动画类让控件在透明度范围内变化</span><br>_animation_show_pre = new QPropertyAnimation(opacity_pre, <span class="hljs-string">&quot;opacity&quot;</span>,this);<br>_<span class="hljs-function"><span class="hljs-title">animation_show_pre</span>-&gt;</span>setEasingCurve(QEasingCurve::Linear);<br>_<span class="hljs-function"><span class="hljs-title">animation_show_pre</span>-&gt;</span>setDuration(<span class="hljs-number">500</span>); <span class="hljs-comment">//动效时长3s</span><br><br><br>_animation_show_next = new QPropertyAnimation(opacity_next, <span class="hljs-string">&quot;opacity&quot;</span>,this);<br>_<span class="hljs-function"><span class="hljs-title">animation_show_next</span>-&gt;</span>setEasingCurve(QEasingCurve::Linear);<br>_<span class="hljs-function"><span class="hljs-title">animation_show_next</span>-&gt;</span>setDuration(<span class="hljs-number">500</span>); <span class="hljs-comment">//动效时长3s</span><br></code></pre></td></tr></table></figure><p>除此之外还重写PicShow的event函数，捕获其中的enter和leave事件</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">bool</span> PicShow::event(QEvent *event)<br>&#123;<br>    <span class="hljs-keyword">switch</span> (event-&gt;type())<br>        &#123;<br>        <span class="hljs-keyword">case</span> QEvent::Enter:<br>            ShowPreNextBtns(<span class="hljs-keyword">true</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> QEvent::Leave:<br>            ShowPreNextBtns(<span class="hljs-keyword">false</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> QDialog::event(event);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据enter还是leave设置按钮显示和隐藏。显示隐藏的函数通过bool参数控制,根据是否可见并且是否隐藏综合控制动画</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xl">void PicShow::ShowPreNextBtns(bool b_show)<br>&#123;<br>    <span class="hljs-keyword">if</span>(!b_show&amp;&amp;_b_btnvisible)&#123;<br>        _<span class="hljs-function"><span class="hljs-title">animation_show_pre</span>-&gt;</span>stop();<br>        _<span class="hljs-function"><span class="hljs-title">animation_show_pre</span>-&gt;</span>setStartValue(<span class="hljs-number">1</span>);<br>        _<span class="hljs-function"><span class="hljs-title">animation_show_pre</span>-&gt;</span>setEndValue(<span class="hljs-number">0</span>);<br>        _<span class="hljs-function"><span class="hljs-title">animation_show_pre</span>-&gt;</span>start();<br><br>        _<span class="hljs-function"><span class="hljs-title">animation_show_next</span>-&gt;</span>stop();<br>        _<span class="hljs-function"><span class="hljs-title">animation_show_next</span>-&gt;</span>setStartValue(<span class="hljs-number">1</span>);<br>        _<span class="hljs-function"><span class="hljs-title">animation_show_next</span>-&gt;</span>setEndValue(<span class="hljs-number">0</span>);<br>        _<span class="hljs-function"><span class="hljs-title">animation_show_next</span>-&gt;</span>start();<br>        _b_btnvisible = <span class="hljs-literal">false</span>;<br>        return;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(_selected_path ==<span class="hljs-string">&quot;&quot;</span>)&#123;<br>        return;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(b_show&amp;&amp;!_b_btnvisible)&#123;<br>        _<span class="hljs-function"><span class="hljs-title">animation_show_pre</span>-&gt;</span>stop();<br>       _<span class="hljs-function"><span class="hljs-title">animation_show_pre</span>-&gt;</span>setStartValue(<span class="hljs-number">0</span>);<br>       _<span class="hljs-function"><span class="hljs-title">animation_show_pre</span>-&gt;</span>setEndValue(<span class="hljs-number">1</span>);<br>       _<span class="hljs-function"><span class="hljs-title">animation_show_pre</span>-&gt;</span>start();<br><br>       _<span class="hljs-function"><span class="hljs-title">animation_show_next</span>-&gt;</span>stop();<br>       _<span class="hljs-function"><span class="hljs-title">animation_show_next</span>-&gt;</span>setStartValue(<span class="hljs-number">0</span>);<br>       _<span class="hljs-function"><span class="hljs-title">animation_show_next</span>-&gt;</span>setEndValue(<span class="hljs-number">1</span>);<br>       _<span class="hljs-function"><span class="hljs-title">animation_show_next</span>-&gt;</span>start();<br>       _b_btnvisible = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="双击左侧目录树实现图片切换"><a href="#双击左侧目录树实现图片切换" class="headerlink" title="双击左侧目录树实现图片切换"></a>双击左侧目录树实现图片切换</h1><p>双击逻辑</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">void</span> ProTreeWidget::SlotDoubleClickItem(QTreeWidgetItem* <span class="hljs-built_in">double</span>Item, <span class="hljs-built_in">int</span> col)&#123;<br>    <br>    <span class="hljs-keyword">if</span>(QGuiApplication::mouseButtons() == Qt::LeftButton)   <span class="hljs-comment">//判断是否为左键</span><br>        &#123;<br>            <span class="hljs-built_in">auto</span> * tree_doubleItem = dynamic_cast&lt;ProTreeItem*&gt;(<span class="hljs-built_in">double</span>Item);<br>            <span class="hljs-keyword">if</span>(!tree_doubleItem)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-built_in">int</span> itemtype = (<span class="hljs-built_in">int</span>)(tree_doubleItem-&gt;type());<br>            <span class="hljs-keyword">if</span>(itemtype == TreeItemPic)&#123;<br>                emit SigUpdateSelected(tree_doubleItem-&gt;GetPath());<br>                _selected_item = <span class="hljs-built_in">double</span>Item;<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在PicShow里实现SlotSelectItem显示选中图像</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PicShow::SlotSelectItem</span><span class="hljs-params">(<span class="hljs-type">const</span> QString&amp; path)</span></span><br><span class="hljs-function"></span>&#123;<br>    _selected_path = path;<br><br>    _pix_map.<span class="hljs-built_in">load</span>(path);<br>    <span class="hljs-keyword">auto</span> width = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">width</span>()<span class="hljs-number">-20</span>;<br>    <span class="hljs-keyword">auto</span> height = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">height</span>()<span class="hljs-number">-20</span>;<br>    _pix_map = _pix_map.<span class="hljs-built_in">scaled</span>(width,height,Qt::KeepAspectRatio);<br>    ui-&gt;label-&gt;<span class="hljs-built_in">setPixmap</span>(_pix_map);<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="前进后退按钮切换图片"><a href="#前进后退按钮切换图片" class="headerlink" title="前进后退按钮切换图片"></a>前进后退按钮切换图片</h1><p>在picshow的构造函数中绑定按钮点击信号</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">connect(<span class="hljs-name">ui-&gt;nextBtn</span>,<span class="hljs-symbol">&amp;QPushButton</span>:<span class="hljs-symbol">:clicked</span>,this, <span class="hljs-symbol">&amp;PicShow</span>:<span class="hljs-symbol">:SigNextClicked</span>)<span class="hljs-comment">;</span><br>connect(<span class="hljs-name">ui-&gt;previousBtn</span>,<span class="hljs-symbol">&amp;QPushButton</span>:<span class="hljs-symbol">:clicked</span>,this, <span class="hljs-symbol">&amp;PicShow</span>:<span class="hljs-symbol">:SigPreClicked</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>当按钮点击后左侧目录树的选中条目也进行更新，所以在MainWindow构造函数中</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">connect(<span class="hljs-name">pro_pic_show</span>, <span class="hljs-symbol">&amp;PicShow</span>:<span class="hljs-symbol">:SigPreClicked</span>,pro_tree_widget,<span class="hljs-symbol">&amp;ProTreeWidget</span>:<span class="hljs-symbol">:SlotPreShow</span>)<span class="hljs-comment">;</span><br>connect(<span class="hljs-name">pro_pic_show</span>, <span class="hljs-symbol">&amp;PicShow</span>:<span class="hljs-symbol">:SigNextClicked</span>,pro_tree_widget,<span class="hljs-symbol">&amp;ProTreeWidget</span>:<span class="hljs-symbol">:SlotNextShow</span>)<span class="hljs-comment">;</span><br>connect(<span class="hljs-name">pro_tree_widget</span>,<span class="hljs-symbol">&amp;ProTreeWidget</span>:<span class="hljs-symbol">:SigUpdatePic</span>,pro_pic_show,<span class="hljs-symbol">&amp;PicShow</span>:<span class="hljs-symbol">:SlotUpdatePic</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>ProTreeWidget的更新逻辑, 设置选中item，并且发送更新图片信号。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-literal">void</span> ProTreeWidget::SlotPreShow()&#123;<br>    <span class="hljs-keyword">if</span>(!_selected_item)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    auto * curItem = dynamic_cast&lt;ProTreeItem*&gt;<span class="hljs-function"><span class="hljs-params">(_selected_item)</span>-&gt;</span>GetPreItem();<br>    <span class="hljs-keyword">if</span>(!curItem)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    emit SigUpdatePic(curItem-&gt;GetPath());<br>    _selected_item = curItem;<br>    this-&gt;setCurrentItem(curItem);<br>&#125;<br><span class="hljs-literal">void</span> ProTreeWidget::SlotNextShow()&#123;<br><br>    <span class="hljs-keyword">if</span>(!_selected_item)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    auto * curItem = dynamic_cast&lt;ProTreeItem*&gt;<span class="hljs-function"><span class="hljs-params">(_selected_item)</span>-&gt;</span>GetNextItem();<br>    <span class="hljs-keyword">if</span>(!curItem)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    emit SigUpdatePic(curItem-&gt;GetPath());<br>    _selected_item = curItem;<br>    this-&gt;setCurrentItem(curItem);<br>&#125;<br></code></pre></td></tr></table></figure><p>SigUpdatePic信号会被PicShow的SlotUpdatePic函数绑定,该函数实现了图片的切换展示。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">void PicShow::SlotUpdatePic(const QString &amp;_<span class="hljs-built_in">path</span>)<br>&#123;<br>    _selected_path = _<span class="hljs-built_in">path</span>;<br>    <span class="hljs-keyword">if</span>(_selected_path != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>      <span class="hljs-function"><span class="hljs-title">const</span> auto &amp;width = ui-&gt;</span><span class="hljs-function"><span class="hljs-title">gridLayout</span>-&gt;</span>geometry().width();<br>      <span class="hljs-function"><span class="hljs-title">const</span> auto &amp;height = ui-&gt;</span><span class="hljs-function"><span class="hljs-title">gridLayout</span>-&gt;</span>geometry().height();<br>      _pix_map.load(_selected_path);<br><br>      _pix_map = _pix_map.scaled(width,height,Qt::KeepAspectRatio);<br>      <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">label</span>-&gt;</span>setPixmap(_pix_map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此项目参考<a href="https://gitbookcpp.llfc.club/sections/cpp/section9/qt23.html">https://gitbookcpp.llfc.club/sections/cpp/section9/qt23.html</a></p>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT电子相册（二）打开项目</title>
    <link href="/2024/03/30/QT%E7%94%B5%E5%AD%90%E7%9B%B8%E5%86%8C%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE/"/>
    <url>/2024/03/30/QT%E7%94%B5%E5%AD%90%E7%9B%B8%E5%86%8C%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="连接打开信号"><a href="#连接打开信号" class="headerlink" title="连接打开信号"></a>连接打开信号</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//打开项目动作</span><br>QAction * act_open_<span class="hljs-attr">pro</span> <span class="hljs-operator">=</span> new QAction(QIcon(<span class="hljs-string">&quot;:/icon/openpro.png&quot;</span>), tr(<span class="hljs-string">&quot;打开项目&quot;</span>),this)<span class="hljs-punctuation">;</span><br>act_open_pro-&gt;setShortcut(QKeySequence(Qt::CTRL + Qt::Key_O))<span class="hljs-punctuation">;</span><br>menu_file-&gt;addAction(act_open_pro)<span class="hljs-punctuation">;</span><br><span class="hljs-comment">//连接打开项目的槽函数</span><br>connect(act_open_pro, <span class="hljs-variable">&amp;</span>QAction::triggered, this, <span class="hljs-variable">&amp;</span>MainWindow::SlotOpenPro)<span class="hljs-punctuation">;</span><br>connect(this, <span class="hljs-variable">&amp;</span>MainWindow::SigOpenPro, pro_tree_widget, <span class="hljs-variable">&amp;</span>ProTreeWidget::SlotOpenPro)<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><p>当我们点击打开项目时触发SlotOpenPro函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">void</span> <span class="hljs-title class_">MainWindow</span>::<span class="hljs-title function_ invoke__">SlotOpenPro</span>(<span class="hljs-keyword">bool</span>)<br>&#123;<br>    QFileDialog file_dialog;<br>    file_dialog.<span class="hljs-title function_ invoke__">setFileMode</span>(<span class="hljs-title class_">QFileDialog</span>::<span class="hljs-variable constant_">Directory</span>);<br>    file_dialog.<span class="hljs-title function_ invoke__">setWindowTitle</span>(<span class="hljs-string">&quot;选择导入的文件夹&quot;</span>);<br><br>    file_dialog.<span class="hljs-title function_ invoke__">setDirectory</span>(<span class="hljs-title class_">QDir</span>::<span class="hljs-title function_ invoke__">currentPath</span>());<br>    file_dialog.<span class="hljs-title function_ invoke__">setViewMode</span>(<span class="hljs-title class_">QFileDialog</span>::<span class="hljs-variable constant_">Detail</span>);<br><br>    QStringList fileNames;<br>    <span class="hljs-keyword">if</span> (file_dialog.<span class="hljs-title function_ invoke__">exec</span>())&#123;<br>         fileNames = file_dialog.<span class="hljs-title function_ invoke__">selectedFiles</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(fileNames.<span class="hljs-title function_ invoke__">length</span>() &lt;= <span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>      QString import_path = fileNames.<span class="hljs-title function_ invoke__">at</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-title function_ invoke__">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;import_path is &quot;</span> &lt;&lt; import_path &lt;&lt; endl;<br>      emit <span class="hljs-title function_ invoke__">SigOpenPro</span>(import_path);<br>&#125;<br></code></pre></td></tr></table></figure><p>该函数打开一个文件对话框，根据选择的文件夹返回我们要打开的路径，然后将这个路径用SigOpenPro信号发送出去。 会触发ProTreeWidget的SlotOpenPro函数</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs zephir">void ProTreeWidget::SlotOpenPro(<span class="hljs-keyword">const</span> QString&amp; path)<br>&#123;<br>    <span class="hljs-keyword">if</span>(_set_path.find(path) != _set_path.end())&#123;<br>        qDebug() &lt;&lt; <span class="hljs-string">&quot;file has loaded&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    _set_path.insert(path);<br>    <span class="hljs-keyword">int</span> file_count = <span class="hljs-number">0</span>;<br>    QDir pro_dir(path);<br>    <span class="hljs-keyword">const</span> QString&amp; proname = pro_dir.dirName();<br><br>    _thread_open_pro = std::make_shared&lt;OpenTreeThread&gt;(path, file_count, this,nullptr);<br>    _thread_open_pro-&gt;start();<br><br>    _open_progressdlg = <span class="hljs-keyword">new</span> QProgressDialog(this);<br><br>    <span class="hljs-comment">//连接更新进度框操作</span><br>    connect(_thread_open_pro.get(), &amp;OpenTreeThread::SigUpdateProgress,<br>            this, &amp;ProTreeWidget::SlotUpOpenProgress);<br><br>    connect(_thread_open_pro.get(), &amp;OpenTreeThread::SigFinishProgress, this,<br>            &amp;ProTreeWidget::SlotFinishOpenProgress);<br><br>    _open_progressdlg-&gt;setWindowTitle(<span class="hljs-string">&quot;Please wait...&quot;</span>);<br>    _open_progressdlg-&gt;setFixedWidth(PROGRESS_WIDTH);<br>    _open_progressdlg-&gt;setRange(<span class="hljs-number">0</span>, PROGRESS_MAX);<br>    _open_progressdlg-&gt;exec();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述逻辑中，我们使用了一个线程来管理导入项目操作。</p><h1 id="设计打开逻辑线程类"><a href="#设计打开逻辑线程类" class="headerlink" title="设计打开逻辑线程类"></a>设计打开逻辑线程类</h1><p>构造函数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">OpenTreeThread::<span class="hljs-built_in">OpenTreeThread</span>(const QString &amp;src_path, int &amp;file_count,<br>                               QTreeWidget *self, QObject *parent):<br>    QThread (parent),<span class="hljs-built_in">_bstop</span>(false),<span class="hljs-built_in">_src_path</span>(src_path),<span class="hljs-built_in">_file_count</span>(file_count)<br>    ,<span class="hljs-built_in">_self</span>(self),<span class="hljs-built_in">_root</span>(nullptr)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>程序启动后执行run函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">OpenTreeThread::run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">OpenProTree</span>(_src_path,_file_count,_self);<br>    <span class="hljs-keyword">if</span>(_bstop&amp;&amp;_root)&#123;<br>        <span class="hljs-keyword">auto</span> path = <span class="hljs-built_in">dynamic_cast</span>&lt;ProTreeItem*&gt;(_root)-&gt;<span class="hljs-built_in">GetPath</span>();<br>        <span class="hljs-keyword">auto</span> index = _self-&gt;<span class="hljs-built_in">indexOfTopLevelItem</span>(_root);<br>        <span class="hljs-keyword">delete</span> _self-&gt;<span class="hljs-built_in">takeTopLevelItem</span>(index);<br>        <span class="hljs-function">QDir <span class="hljs-title">dir</span><span class="hljs-params">(path)</span></span>;<br>        dir.<span class="hljs-built_in">removeRecursively</span>();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-function">emit <span class="hljs-title">SigFinishProgress</span><span class="hljs-params">(_file_count)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>run函数内调用OpenProTree导入逻辑生成目录树，然后判断_bstop是否为真并且root有效，说明取消了导入操作，所以删除目录树。 当执行完导入操作后发送完成信号SigFinishProgress。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><br>void OpenTreeThread::OpenProTree(<span class="hljs-keyword">const</span> QString &amp;src_path,<br>                                <span class="hljs-keyword">int</span> &amp;file_count, QTreeWidget *<span class="hljs-keyword">self</span>)<br>&#123;<br>    <span class="hljs-comment">//创建根节点</span><br>    QDir src_dir(src_path);<br>    auto name = src_dir.dirName();<br>    auto * item = <span class="hljs-keyword">new</span> ProTreeItem(<span class="hljs-keyword">self</span>, name, src_path,  TreeItemPro);<br>    item-&gt;setData(<span class="hljs-number">0</span>,Qt::DisplayRole, name);<br>    item-&gt;setData(<span class="hljs-number">0</span>,Qt::DecorationRole, QIcon(<span class="hljs-string">&quot;:/icon/dir.png&quot;</span>));<br>    item-&gt;setData(<span class="hljs-number">0</span>,Qt::ToolTipRole, src_path);<br>    _root = item;<br><br>    <span class="hljs-comment">//读取根节点下目录和文件</span><br>    RecursiveProTree(src_path,file_count,<span class="hljs-keyword">self</span>,_root,item, nullptr);<br>&#125;<br></code></pre></td></tr></table></figure><p>OpenProTree创建了根节点，然后调用了递归函数RecursiveProTree递归创建子节点。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><br>void OpenTreeThread::RecursiveProTree( <span class="hljs-keyword">const</span> QString &amp;src_path, <span class="hljs-keyword">int</span> &amp;file_count, QTreeWidget *<span class="hljs-keyword">self</span>,<br>                                       QTreeWidgetItem *root, QTreeWidgetItem *parent,QTreeWidgetItem* preitem)<br>&#123;<br>    QDir src_dir(src_path);<br>    <span class="hljs-comment">//设置文件过滤器</span><br>    QStringList nameFilters;<br>    src_dir.setFilter(QDir::Dirs|QDir::Files|QDir::NoDotAndDotDot);<span class="hljs-comment">//除了目录或文件，其他的过滤掉</span><br>    src_dir.setSorting(QDir::Name);<span class="hljs-comment">//优先显示名字</span><br>    QFileInfoList list = src_dir.entryInfoList();<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++)&#123;<br>        <span class="hljs-keyword">if</span>(_bstop)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        QFileInfo fileInfo = list.at(i);<br>        <span class="hljs-keyword">bool</span> bIsDir = fileInfo.isDir();<br>        <span class="hljs-keyword">if</span> (bIsDir)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(_bstop)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            file_count++;<br>            emit SigUpdateProgress(file_count);<br><br>            auto * item = <span class="hljs-keyword">new</span> ProTreeItem(_root, fileInfo.fileName(),<br>                                          fileInfo.absoluteFilePath(), _root,TreeItemDir);<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::DisplayRole, fileInfo.fileName());<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::DecorationRole, QIcon(<span class="hljs-string">&quot;:/icon/dir.png&quot;</span>));<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::ToolTipRole, fileInfo.absoluteFilePath());<br><br>            RecursiveProTree(fileInfo.absoluteFilePath(), file_count,<br>                             <span class="hljs-keyword">self</span>,root,item, preitem);<br><br><br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(_bstop)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">const</span> QString &amp; suffix = fileInfo.completeSuffix();<br>            <span class="hljs-keyword">if</span>(suffix != <span class="hljs-string">&quot;png&quot;</span> &amp;&amp; suffix != <span class="hljs-string">&quot;jpeg&quot;</span> &amp;&amp; suffix != <span class="hljs-string">&quot;jpg&quot;</span>)&#123;<br><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            file_count++;<br>             emit SigUpdateProgress(file_count);<br><br>            auto * item = <span class="hljs-keyword">new</span> ProTreeItem(parent, fileInfo.fileName(),<br>                                          fileInfo.absoluteFilePath(), root,TreeItemPic);<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::DisplayRole, fileInfo.fileName());<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::DecorationRole, QIcon(<span class="hljs-string">&quot;:/icon/pic.png&quot;</span>));<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::ToolTipRole, fileInfo.absoluteFilePath());<br><br>            <span class="hljs-keyword">if</span>(preitem)&#123;<br>                auto* pre_proitem = dynamic_cast&lt;ProTreeItem*&gt;(preitem);<br>                pre_proitem-&gt;SetNextItem(item);<br>            &#125;<br><br>            item-&gt;SetPreItem(preitem);<br>            preitem = item;<br>        &#125;<br>    &#125;<br><br>    emit SigFinishProgress(file_count);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的代码逻辑与在导入文件时的线程逻辑基本相同，就不进行具体叙述了。</p>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT电子相册项目（一）——目录树和向导</title>
    <link href="/2024/03/30/QT%E7%94%B5%E5%AD%90%E7%9B%B8%E5%86%8C%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%9B%AE%E5%BD%95%E6%A0%91%E5%92%8C%E5%90%91%E5%AF%BC/"/>
    <url>/2024/03/30/QT%E7%94%B5%E5%AD%90%E7%9B%B8%E5%86%8C%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%9B%AE%E5%BD%95%E6%A0%91%E5%92%8C%E5%90%91%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>基于前面介绍的QT知识，做一个电子相册，总结前文介绍的各类知识，将用QListWidget，<br>QTreeWidget，信号槽，绘图事件，鼠标事件,qss等知识，算是对之前知识的一个总结。</p><h1 id="MianWindow设计"><a href="#MianWindow设计" class="headerlink" title="MianWindow设计"></a>MianWindow设计</h1><ol><li>在MainWindow.ui界面中的centralWidget中添加水平布局horizontalLayout，在该布<br>局添加两个垂直布局picLayout和proLayout,设置比例为1:4。</li></ol><ul><li><p>picLayout: 用于之后显示图片；</p></li><li><p>proLayout: 用于显示目录树。</p></li></ul><p>效果如下图所示：</p><p><img src="/image-11.png" alt="alt text"></p><ol start="2"><li>在MainWindow的构造函数中添加菜单项，并为菜单项设置信号连接</li></ol><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs zephir"> ui-&gt;setupUi(this);<br> this-&gt;setMinimumSize(<span class="hljs-number">1629</span>,<span class="hljs-number">869</span>);<br><span class="hljs-comment">//创建菜单栏</span><br> QMenu * menu_file = menuBar()-&gt;addMenu(tr(<span class="hljs-string">&quot;文件(&amp;F)&quot;</span>));<br> <span class="hljs-comment">//创建项目动作</span><br> QAction * act_create_pro = <span class="hljs-keyword">new</span> QAction(QIcon(<span class="hljs-string">&quot;:/icon/createpro.png&quot;</span>), tr(<span class="hljs-string">&quot;创建项目&quot;</span>),this);<br> act_create_pro-&gt;setShortcut(QKeySequence(Qt::CTRL + Qt::Key_N));<br> menu_file-&gt;addAction(act_create_pro);<br><br> <span class="hljs-comment">//打开项目动作</span><br> QAction * act_open_pro = <span class="hljs-keyword">new</span> QAction(QIcon(<span class="hljs-string">&quot;:/icon/openpro.png&quot;</span>), tr(<span class="hljs-string">&quot;打开项目&quot;</span>),this);<br> act_open_pro-&gt;setShortcut(QKeySequence(Qt::CTRL + Qt::Key_O));<br> menu_file-&gt;addAction(act_open_pro);<br><br> <span class="hljs-comment">//创建设置菜单</span><br> QMenu * menu_set = menuBar()-&gt;addMenu(tr(<span class="hljs-string">&quot;设置(&amp;S)&quot;</span>));<br> <span class="hljs-comment">//设置背景音乐动作</span><br> QAction * act_music = <span class="hljs-keyword">new</span> QAction(QIcon(<span class="hljs-string">&quot;:/icon/music.png&quot;</span>), tr(<span class="hljs-string">&quot;背景音乐&quot;</span>),this);<br> act_music-&gt;setShortcut(QKeySequence(Qt::CTRL + Qt::Key_M));<br> menu_set-&gt;addAction(act_music);<br><br> _protree = <span class="hljs-keyword">new</span> ProTree();<br> ui-&gt;proLayout-&gt;addWidget(_protree,<span class="hljs-number">0</span>);<br><br> _picshow = <span class="hljs-keyword">new</span> PicShow();<br> ui-&gt;picLayout-&gt;addWidget(_picshow);<br><br> <span class="hljs-comment">//连接创建项目槽函数</span><br> connect(act_create_pro, &amp;QAction::triggered, this, &amp;MainWindow::SlotCreatePro);<br> <br> <span class="hljs-comment">//连接打开项目的槽函数</span><br>  connect(act_open_pro, &amp;QAction::triggered, this, &amp;MainWindow::SlotOpenPro);<br></code></pre></td></tr></table></figure><ol start="3"><li>在mian函数中设置MainWindow最大显示</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">w.setWindowTitle(<span class="hljs-string">&quot;Album&quot;</span>)<span class="hljs-comment">;</span><br>w.showMaximized()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>为MainWindow菜单栏设置qss</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*mainwindow 样式*/</span><br>MainWindow &#123;<br>    <span class="hljs-comment">/* 背景色 */</span><br>    <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">46</span>,<span class="hljs-number">47</span>,<span class="hljs-number">48</span>);<br>&#125;<br><br><span class="hljs-comment">/*菜单栏基本样式*/</span><br>QMenuBar&#123;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">231</span>,<span class="hljs-number">231</span>,<span class="hljs-number">231</span>);<br>    <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">46</span>,<span class="hljs-number">47</span>,<span class="hljs-number">48</span>);<br>&#125;<br><br><span class="hljs-comment">/*菜单基本样式*/</span><br>QMenu&#123;<br>    <span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">231</span>,<span class="hljs-number">231</span>,<span class="hljs-number">231</span>);<br>    <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">55</span>,<span class="hljs-number">55</span>,<span class="hljs-number">55</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 菜单栏选中条目时 */</span><br><br>QMenuBar::item:selected &#123;<br>        <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">80</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>);<br>&#125;<br><br><span class="hljs-comment">/*菜单选中条目*/</span><br>QMenu::item:selected &#123;<br>    <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">39</span>,<span class="hljs-number">96</span>,<span class="hljs-number">154</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="向导类Wizard"><a href="#向导类Wizard" class="headerlink" title="向导类Wizard"></a>向导类Wizard</h1><ol><li><p>添加Qt设计师界面类Wizard，用于响应点击创建项目后弹出向导框。</p></li><li><p>添加两个向导页面类ConfirmPage和ProSetPage类，基类选择QWizardPage类，并在<br>Wizard.ui里添加两个wizardpage，将这两个wizardpage升级为ProSetPage和<br>ConfirmPage。ProSetPage类用来设置创建项目的属性，我们先点击其ui文件为其添加网格布局gridLayout,然后将ProSetPage设置为网格布局，设置gridLayout的margin为5，在gridLayout中添加控件，形成如下布局：</p></li></ol><p><img src="/image-12.png" alt="alt text"></p><ol start="3"><li>将两个lineEdit注册为wizard的field，保证两个lineEdit是空的时候无法点击下一步，将QLineEdit的textEdited信号和ProSetPage的completeChanged信号连接起来，这样在lineEdit编辑的时候就会发送textEdited信号，进而触发ProSetPage发送<br>completeChanged信号。<br>setClearButtonEnabled设置为true可以在lineEdit输入数据后显示清除按钮，直接清除已录入的字符。 completeChanged信号是从proSetPage的基类QWizardPage类继承而来的。completeChanged信号发出后会触发QWizardPage类的isComplete函数。</li></ol><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xl">ProSetPage::ProSetPage(QWidget *parent) :<br>    QWizardPage(parent),<br>    ui(new Ui::ProSetPage)<br>&#123;<br>    <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span>setupUi(this);<br>    <span class="hljs-function"><span class="hljs-title">registerField</span>(&quot;proPath&quot;, ui-&gt;</span>lineEdit_2);<br>    <span class="hljs-function"><span class="hljs-title">registerField</span>(&quot;proName*&quot;, ui-&gt;</span>lineEdit);<br><br>    <span class="hljs-function"><span class="hljs-title">connect</span>(ui-&gt;</span>lineEdit, &amp;QLineEdit::textEdited, this, &amp;ProSetPage::completeChanged);<br>    <span class="hljs-function"><span class="hljs-title">connect</span>(ui-&gt;</span>lineEdit_2, &amp;QLineEdit::textEdited, this, &amp;ProSetPage::completeChanged);<br>    <br>    <span class="hljs-comment">//获取当前路径</span><br>    QString curPath = QDir::currentPath();<br>    <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit_2</span>-&gt;</span>setText(curPath);<br>    <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit_2</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">setCursorPosition</span>( ui-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit_2</span>-&gt;</span><span class="hljs-keyword">text</span>().size());<br>    <span class="hljs-comment">//设置一件清除文本框按钮</span><br>    <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit</span>-&gt;</span>setClearButtonEnabled(<span class="hljs-literal">true</span>);<br>    <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit_2</span>-&gt;</span>setClearButtonEnabled(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>为了实现判断当前文件夹是否合理以及是否以经右项目路径了，这里我们重写isComplet函数</li></ol><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xl">bool ProSetPage::isComplete() const<br>&#123;<br>    <span class="hljs-comment">//当文件名和路径有一个为空时则返回false</span><br>    <span class="hljs-function"><span class="hljs-title">if</span>(ui-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">text</span>() == &quot;&quot; || ui-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit_2</span>-&gt;</span><span class="hljs-keyword">text</span>() == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//判断是否文件夹是否合理</span><br>    QD<span class="hljs-function"><span class="hljs-title">ir</span> dir(ui-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit_2</span>-&gt;</span><span class="hljs-keyword">text</span>());<br>    <span class="hljs-keyword">if</span>(!dir.exists())<br>    &#123;<br>       <span class="hljs-comment">//qDebug()&lt;&lt;&quot;file path is not exists&quot; &lt;&lt; endl;</span><br>       <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">tips</span>-&gt;</span>setText(<span class="hljs-string">&quot;project path is not exists&quot;</span>);<br>       return <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//判断路径是否存在</span><br>    QS<span class="hljs-function"><span class="hljs-title">tring</span> absFilePath = dir.absoluteFilePath(ui-&gt;</span><span class="hljs-function"><span class="hljs-title">lineEdit</span>-&gt;</span><span class="hljs-keyword">text</span>());<br>    <span class="hljs-comment">//qDebug() &lt;&lt; &quot;absFilePath is &quot; &lt;&lt; absFilePath;</span><br><br>    QDir dist_dir(absFilePath);<br>    <span class="hljs-keyword">if</span>(dist_dir.exists())&#123;<br>        <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">tips</span>-&gt;</span>setText(<span class="hljs-string">&quot;project has exists, change path or name!&quot;</span>);<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">tips</span>-&gt;</span>setText(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//使用父类作用域运算符显示调用该函数，从而保留了基类的原始行为。</span><br>    return QWizardPage::isComplete();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>为浏览按钮添加点击后选择文件夹操作，在prosetpage.ui文件里右键点击browse按钮，选择转到槽，QT会为我们生成槽函数</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//添加浏览按钮点击后选择文件夹的操作</span><br>void ProSetPage::<span class="hljs-title function_ invoke__">on_pushButton_clicked</span>()<br>&#123;<br>    <span class="hljs-comment">//创建一个文件对话框</span><br>    QFileDialog file_dialog;<br>    <span class="hljs-comment">//以目录模式打开</span><br>    file_dialog.<span class="hljs-title function_ invoke__">setFileMode</span>(QFileDialog::Directory);<br>    <span class="hljs-comment">//设置标题</span><br>    file_dialog.<span class="hljs-title function_ invoke__">setWindowTitle</span>(<span class="hljs-string">&quot;选择导入的文件夹&quot;</span>);<br>    auto path = QDir::<span class="hljs-title function_ invoke__">currentPath</span>();<br>    file_dialog.<span class="hljs-title function_ invoke__">setDirectory</span>(path);<br>    file_dialog.<span class="hljs-title function_ invoke__">setViewMode</span>(QFileDialog::Detail);<br><br>    QStringList fileNames;<br>    <span class="hljs-keyword">if</span> (file_dialog.<span class="hljs-title function_ invoke__">exec</span>())&#123;<br>        fileNames = file_dialog.<span class="hljs-title function_ invoke__">selectedFiles</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(fileNames.<span class="hljs-title function_ invoke__">length</span>() &lt;= <span class="hljs-number">0</span>)&#123;<br>         <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    QString import_path = fileNames.<span class="hljs-title function_ invoke__">at</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;import_path is &quot;</span> &lt;&lt; import_path &lt;&lt; endl;<br>    <span class="hljs-comment">//将选择的路径显示在对话框中</span><br>    ui<span class="hljs-punctuation">-&gt;</span>lineEdit_2<span class="hljs-punctuation">-&gt;</span><span class="hljs-title function_ invoke__">setText</span>(import_path);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="项目目录树ProPree类"><a href="#项目目录树ProPree类" class="headerlink" title="项目目录树ProPree类"></a>项目目录树ProPree类</h1><ol><li>创建QT设计师界面类，命名为ProPree,ProTree中添加一个垂直布局，布局内添加一个QLabel和一个QTreeWidget，最后将ProTree设置为垂直布局。</li></ol><ul><li>QTreeWidget: 用于显示目录树</li></ul><p><img src="/image-13.png" alt="alt text"></p><ol start="2"><li><p>考虑到QTreeWidget功能有限，我们需要继承QTreeWidget重新实现一个新的类ProTreeWidget，所以在项目中新增C++类ProTreeWidget继承自QTreeWidget。同时将ProTree布局中的QTreeWidget提升为ProTreeWidget。</p></li><li><p>同样的道理为了便于操作定义ProTreeItem继承QTreeWidgetItem，相关的成员变量和函数省略，这里简单介绍下构造函数</p></li></ol><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><br>ProTreeItem::ProTreeItem(QTreeWidget *view, const QString &amp;<span class="hljs-built_in">name</span>,<br>                         const QString &amp;path, int <span class="hljs-built_in">type</span>):QTreeWidgetItem (view, <span class="hljs-built_in">type</span>),<br>    <span class="hljs-variable">_path</span>(path),<span class="hljs-variable">_name</span>(<span class="hljs-built_in">name</span>),<span class="hljs-variable">_root</span>(this),<span class="hljs-variable">_pre_item</span>(nullptr),<span class="hljs-variable">_next_item</span>(nullptr)<br>&#123;<br><br>&#125;<br><br>ProTreeItem::ProTreeItem(QTreeWidgetItem *parent, const QString &amp;<span class="hljs-built_in">name</span>,<br>                         const QString &amp;path, QTreeWidgetItem* root,int <span class="hljs-built_in">type</span>):QTreeWidgetItem(parent,<span class="hljs-built_in">type</span>),<br>    <span class="hljs-variable">_path</span>(path),<span class="hljs-variable">_name</span>(<span class="hljs-built_in">name</span>),<span class="hljs-variable">_root</span>(root),<span class="hljs-variable">_pre_item</span>(nullptr),<span class="hljs-variable">_next_item</span>(nullptr)<br><br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>在ProTreeWidgett添加槽函数AddProToTree,在AddProToTree函数里判断路径和名字是否准确，然后创建一个item插入到treewidget里。</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">void</span> ProTreeWidget::AddProToTree(const QString &amp;<span class="hljs-type">name</span>, const QString &amp;<span class="hljs-type">path</span>)<br>&#123;<br>    //qDebug() &lt;&lt; &quot;ProTreeWidget::AddProToTree name is &quot; &lt;&lt; <span class="hljs-type">name</span> &lt;&lt; &quot; path is &quot; &lt;&lt; <span class="hljs-type">path</span> &lt;&lt; endl;<br>    //创建一个文件夹<br>    QDir dir(<span class="hljs-type">path</span>);<br>    QString file_path = dir.absoluteFilePath(<span class="hljs-type">name</span>);<br>    //检测重名，判断路径和名字都一样则拒绝加入<br>    <span class="hljs-keyword">if</span>(_set_path.find(file_path) != _set_path.<span class="hljs-keyword">end</span>())&#123;<br>        qDebug() &lt;&lt; &quot;file has loaded&quot; &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    //构造项目用的文件夹<br>    QDir pro_dir(file_path);<br>    //如果文件夹不存在则创建<br>    <span class="hljs-keyword">if</span>(!pro_dir.<span class="hljs-keyword">exists</span>())&#123;<br>        <span class="hljs-type">bool</span> <span class="hljs-keyword">enable</span> = pro_dir.mkpath(file_path);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">enable</span>)&#123;<br>            qDebug() &lt;&lt; &quot;pro_dir make path failed&quot; &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    _set_path.<span class="hljs-keyword">insert</span>(file_path);<br>    //创建一个项目条目<br>    auto * item = <span class="hljs-built_in">new</span> ProTreeItem(this, <span class="hljs-type">name</span>, file_path, TreeItemPro);<br>    //设置项目的名字，图片，路径<br>    item-&gt;setData(<span class="hljs-number">0</span>,Qt::DisplayRole, <span class="hljs-type">name</span>);<br>    item-&gt;setData(<span class="hljs-number">0</span>,Qt::DecorationRole, QIcon(&quot;:/icon/dir.png&quot;));<br>    item-&gt;setData(<span class="hljs-number">0</span>,Qt::ToolTipRole, file_path);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>在MainWindow中实现创建项目的槽函数</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts">void MainWindow::SlotCreatePro(bool)<span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//qDebug() &lt;&lt; &quot;slot create pro triggered&quot; &lt;&lt; endl;</span><br>    <span class="hljs-comment">//创建向导类</span><br>    Wizard wizard(this)<span class="hljs-punctuation">;</span><br>    wizard.setWindowTitle(tr(<span class="hljs-string">&quot;创建项目&quot;</span>))<span class="hljs-punctuation">;</span><br>    auto *<span class="hljs-attr">page</span> <span class="hljs-operator">=</span> wizard.page(<span class="hljs-number">0</span>)<span class="hljs-punctuation">;</span><br>    page-&gt;setTitle(tr(<span class="hljs-string">&quot;设置项目配置&quot;</span>))<span class="hljs-punctuation">;</span><br>    <span class="hljs-comment">//连接信号和槽</span><br>    connect(<span class="hljs-variable">&amp;wizard</span>, <span class="hljs-variable">&amp;</span>Wizard::SigProSettings, dynamic_cast<span class="hljs-params">&lt;ProTree*&gt;</span>(_protree),<span class="hljs-variable">&amp;</span>ProTree::AddProToTree)<span class="hljs-punctuation">;</span><br><br>    <span class="hljs-comment">//显示</span><br>    wizard.show()<span class="hljs-punctuation">;</span><br>    wizard.exec()<span class="hljs-punctuation">;</span><br>    disconnect(<span class="hljs-variable">&amp;wizard</span>)<span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="6"><li>在ProTree实现AddProToTree槽函数</li></ol><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl">void ProTree::AddProToTree(const QString &amp;<span class="hljs-keyword">name</span>, const QString &amp;<span class="hljs-built_in">path</span>)<br>&#123;<br>    <span class="hljs-comment">//通过ui调用ProTreeWiget中的AddProToTree函数，实现项目的在目录树中的增加</span><br>    <span class="hljs-function"><span class="hljs-title">ui</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">treeWidget</span>-&gt;</span>AddProToTree(<span class="hljs-keyword">name</span>, <span class="hljs-built_in">path</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>在qss中设置ProTree样式</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">ProTree &#123;<br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#9F9F9F</span>;<br>    <span class="hljs-attribute">border-style</span>: solid;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br>QLabel<span class="hljs-selector-id">#label_pro</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">231</span>,<span class="hljs-number">231</span>,<span class="hljs-number">231</span>);<br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#9F9F9F</span>;<br>    <span class="hljs-attribute">border-style</span>: dotted;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样在wizard点击完成时触发done函数，进而发送信号触发ProTree的AddProToTree函数了，从而生成一个项目目录的item。 效果如下</p><p><img src="/image-14.png" alt="alt text"></p><h1 id="文件夹导入功能"><a href="#文件夹导入功能" class="headerlink" title="文件夹导入功能"></a>文件夹导入功能</h1><p>在生成的ProTreeWidget的项目root item中点击右键，弹出菜单，然后选择导入文件夹，将文件夹中的目录和文件递归的导入我们创建的项目目录，并且在root下生成item节点。</p><ol><li>ProTreeWidget构造函数添加信号和槽函数连接,并且创建导入文件的动作，并为该动作连接槽函数。</li></ol><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">connect(<span class="hljs-name">this</span>, <span class="hljs-symbol">&amp;ProTreeWidget</span>:<span class="hljs-symbol">:itemPressed</span>, this, <span class="hljs-symbol">&amp;ProTreeWidget</span>:<span class="hljs-symbol">:SlotItemPressed</span>)<span class="hljs-comment">;</span><br>_action_import = new QAction(<span class="hljs-name">QIcon</span>(<span class="hljs-string">&quot;:/icon/import.png&quot;</span>),tr(<span class="hljs-string">&quot;导入文件&quot;</span>), this)<span class="hljs-comment">;</span><br>connect(<span class="hljs-name">_action_import</span>, <span class="hljs-symbol">&amp;QAction</span>:<span class="hljs-symbol">:triggered</span>, this, <span class="hljs-symbol">&amp;ProTreeWidget</span>:<span class="hljs-symbol">:SlotImport</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在ProTreeWidget中实现SlotItemPressed槽函数</li></ol><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mel">void ProTreeWidget::SlotItemPressed(QTreeWidgetItem *pressedItem, <span class="hljs-keyword">int</span> column)<br>&#123;<br>    <span class="hljs-comment">//qDebug() &lt;&lt; &quot;ProTreeWidget::SlotItemPressed&quot; &lt;&lt; endl;</span><br>    <span class="hljs-keyword">if</span>(QGuiApplication::mouseButtons() == Qt::RightButton)   <span class="hljs-comment">//判断是否为右键</span><br>        &#123;<br>            <span class="hljs-comment">//创建一个目录</span><br>            QMenu <span class="hljs-keyword">menu</span>(this);<br>            qDebug() &lt;&lt; <span class="hljs-string">&quot;menu addr is &quot;</span> &lt;&lt; &amp;<span class="hljs-keyword">menu</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">int</span> itemtype = (<span class="hljs-keyword">int</span>)(pressedItem-&gt;type());<br>            <span class="hljs-keyword">if</span> (itemtype == TreeItemPro)<br>            &#123;<br>                _right_btn_item = pressedItem;<br>                <span class="hljs-comment">//将导入文件动作加入目录中</span><br>                <span class="hljs-keyword">menu</span>.addAction(_action_import);<br><br>                <span class="hljs-keyword">menu</span>.<span class="hljs-keyword">exec</span>(QCursor::pos());   <span class="hljs-comment">//菜单弹出位置为鼠标点击位置</span><br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>当点击导入文件按钮，QAction会发送triggered信号，在ProTreeWidget中定义槽函数SlotImport，用于接收发送的信号。 因为导入操作是一个耗时的操作，所以要放到单独的线程中执行，主线程启动一个进度对话框显示导入进度，同时可以控制导入的中止操作等。 在导入时弹出一个文件选择对话框，设置默认路径</li></ol><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-literal">void</span> ProTreeWidget<span class="hljs-type">::SlotImport</span>()<br>&#123;<br>    QFileDialog file_dialog;<br>    file_dialog.setFileMode(QFileDialog<span class="hljs-type">::Directory</span>);<br>    file_dialog.setWindowTitle(<span class="hljs-string">&quot;选择导入的文件夹&quot;</span>);<br>    QString path = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(!_right_btn_item)&#123;<br>        <span class="hljs-comment">//qDebug() &lt;&lt; &quot;_right_btn_item is empty&quot; &lt;&lt; endl;</span><br>        path = QDir<span class="hljs-type">::currentPath</span>();<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <br>    <span class="hljs-comment">//获取当前路径</span><br>    path = dynamic_cast&lt;ProTreeItem*&gt;(_right_btn_item)-&gt;GetPath();<br>    <br>    file_dialog.setDirectory(path);<br>    file_dialog.setViewMode(QFileDialog<span class="hljs-type">::Detail</span>);<br><br>    QStringList fileNames;<br>      <span class="hljs-keyword">if</span> (file_dialog.exec())&#123;<br>            fileNames = file_dialog.selectedFiles();<br>      &#125;<br><br>      <span class="hljs-keyword">if</span>(fileNames.length() &lt;= <span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      QString import_path = fileNames.at(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>创建一个ProTreeThread类，继承QThread,用于实现导入文件操作，构造函数为<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><br>OpenTreeThread::<span class="hljs-built_in">OpenTreeThread</span>(const QString &amp;src_path, int &amp;file_count,<br>                               QTreeWidget *self, QObject *parent):<br>    QThread (parent),<span class="hljs-built_in">_bstop</span>(false),<span class="hljs-built_in">_src_path</span>(src_path),<span class="hljs-built_in">_file_count</span>(file_count)<br>    ,<span class="hljs-built_in">_self</span>(self),<span class="hljs-built_in">_root</span>(nullptr)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li><p>parent传递给父类构造函数;</p></li><li><p>_src_path表示打开的文件夹路径;</p></li><li><p>_dist_path表示我们创建的项目路径;</p></li><li><p>_file_count表示文件数，用来和进度框交互;</p></li><li><p>_parent_item新创建节点的父节;</p></li><li><p>_self表示QProTreeWidget对象;</p></li><li><p>_root表示新创建节点隶属于哪个根节点，便于后期做交互;</p></li><li><p>_bstop表示是否停止，如果为true则线程终止。;</p></li></ul><ol start="5"><li>实现copy文件功能和目录树创建</li></ol><p>(1)  根据文件类型(文件夹还是文件)执行不同的逻辑，如果是文件则创建item添加到父节点下。如果是文件夹类型，则递归进入创建逻辑，直到所有的文件和文件夹被遍历完成</p><p>(2) 如果_bstop被设置为true，则退出创建逻辑。</p><p>(3) 统计文件数，发信号SigUpdateProgress通知进度框更新进度</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><br>void ProTreeThread::CreateProTree(<span class="hljs-keyword">const</span> QString &amp;src_path, <span class="hljs-keyword">const</span> QString &amp;dist_path,<br>                                  QTreeWidgetItem *parent_item, <span class="hljs-keyword">int</span> &amp;file_count,<br>                                  QTreeWidget *<span class="hljs-keyword">self</span>, QTreeWidgetItem *root, QTreeWidgetItem* preItem)<br>&#123;<br>    <span class="hljs-keyword">if</span>(_bstop)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">bool</span> needcopy = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-comment">//如果源路径等于目的路径</span><br>    <span class="hljs-keyword">if</span>(src_path == dist_path)&#123;<br>        needcopy = <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//创建导入的文件夹</span><br>    QDir import_dir(src_path);<br>    <span class="hljs-comment">//qDebug() &lt;&lt; &quot;src_path is &quot; &lt;&lt; src_path &lt;&lt; &quot;dis_path is &quot; &lt;&lt; dist_path &lt;&lt; endl;</span><br>    <span class="hljs-comment">//设置文件过滤器</span><br>    QStringList nameFilters;<br>    import_dir.setFilter(QDir::Dirs|QDir::Files|QDir::NoDotAndDotDot);<span class="hljs-comment">//除了目录或文件，其他的过滤掉</span><br>    import_dir.setSorting(QDir::Name);<span class="hljs-comment">//优先显示名字</span><br>    QFileInfoList list = import_dir.entryInfoList();<br>    <span class="hljs-comment">//qDebug() &lt;&lt; &quot;list.size &quot; &lt;&lt; list.size() &lt;&lt; endl;</span><br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++)&#123;<br>        <span class="hljs-keyword">if</span>(_bstop)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        QFileInfo fileInfo = list.at(i);<br>        <span class="hljs-keyword">bool</span> bIsDir = fileInfo.isDir();<br>        <span class="hljs-keyword">if</span> (bIsDir)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(_bstop)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            file_count++;<br>            emit SigUpdateProgress(file_count);<br><span class="hljs-comment">//            qDebug()&lt;&lt; &quot;fileInfo.fileName()&quot; &lt;&lt; fileInfo.fileName();</span><br><span class="hljs-comment">//            qDebug()&lt;&lt; &quot;fileInfo.absoluteFilePath() &quot; &lt;&lt; fileInfo.absoluteFilePath();</span><br><span class="hljs-comment">//            qDebug()&lt;&lt; &quot;fileInfo.absolutePath() &quot; &lt;&lt; fileInfo.absolutePath();</span><br><br>            QDir dist_dir(dist_path);<br>            <span class="hljs-comment">//构造子目的路径</span><br>            QString sub_dist_path = dist_dir.absoluteFilePath(fileInfo.fileName());<br>            qDebug()&lt;&lt; <span class="hljs-string">&quot;sub_dist_path &quot;</span> &lt;&lt; sub_dist_path;<br>            <span class="hljs-comment">//子目的目录</span><br>            QDir sub_dist_dir(sub_dist_path);<br>            <span class="hljs-comment">//不能存在则创建</span><br>            <span class="hljs-keyword">if</span>(!sub_dist_dir.exists())&#123;<br>                <span class="hljs-comment">//可以创建多级目录</span><br>                <span class="hljs-keyword">bool</span> ok = sub_dist_dir.mkpath(sub_dist_path);<br>                <span class="hljs-keyword">if</span>(!ok)&#123;<br>                    qDebug()&lt;&lt; <span class="hljs-string">&quot;sub_dist_dir mkpath failed&quot;</span>&lt;&lt; endl;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br><br>            auto * item = <span class="hljs-keyword">new</span> ProTreeItem(parent_item, fileInfo.fileName(),<br>                                          sub_dist_path, root,TreeItemDir);<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::DisplayRole, fileInfo.fileName());<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::DecorationRole, QIcon(<span class="hljs-string">&quot;:/icon/dir.png&quot;</span>));<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::ToolTipRole, sub_dist_path);<br>             ;<br>            CreateProTree(fileInfo.absoluteFilePath(), sub_dist_path, item, file_count, <span class="hljs-keyword">self</span>,root,preItem);<br><br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(_bstop)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">const</span> QString &amp; suffix = fileInfo.completeSuffix();<br>            <span class="hljs-keyword">if</span>(suffix != <span class="hljs-string">&quot;png&quot;</span> &amp;&amp; suffix != <span class="hljs-string">&quot;jpeg&quot;</span> &amp;&amp; suffix != <span class="hljs-string">&quot;jpg&quot;</span>)&#123;<br>                qDebug() &lt;&lt; <span class="hljs-string">&quot;suffix is not pic &quot;</span> &lt;&lt; suffix &lt;&lt; endl;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            file_count++;<br>            emit SigUpdateProgress(file_count);<br>            <span class="hljs-keyword">if</span>(!needcopy)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            QDir dist_dir(dist_path);<br>            QString dist_file_path = dist_dir.absoluteFilePath(fileInfo.fileName());<br>            <span class="hljs-keyword">if</span>(!QFile::copy(fileInfo.absoluteFilePath(), dist_file_path))&#123;<br>                qDebug() &lt;&lt; <span class="hljs-string">&quot;file src to dist  copy failed&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            auto * item = <span class="hljs-keyword">new</span> ProTreeItem(parent_item, fileInfo.fileName(),<br>                                          dist_file_path, root,TreeItemPic);<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::DisplayRole, fileInfo.fileName());<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::DecorationRole, QIcon(<span class="hljs-string">&quot;:/icon/pic.png&quot;</span>));<br>            item-&gt;setData(<span class="hljs-number">0</span>,Qt::ToolTipRole, dist_file_path);<br><br>            <span class="hljs-keyword">if</span>(preItem)&#123;<br>                auto* pre_proitem = dynamic_cast&lt;ProTreeItem*&gt;(preItem);<br>                pre_proitem-&gt;SetNextItem(item);<br>            &#125;<br><br>            item-&gt;SetPreItem(preItem);<br>            preItem = item;<br>         &#125;<br>    &#125;<br><br>   <span class="hljs-comment">//  dynamic_cast&lt;ProTreeWidget*&gt;(self)-&gt;SlotFinishProgress();</span><br>    parent_item-&gt;setExpanded(<span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>重写线程run函数 run函数就是线程启动后执行的函数，如果CreateProTree运行结束，判断_bstop是否为true，如果为true说明取消了创建操作，那么就要把根节点移除，并删除文件夹内的文件。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ProTreeThread::run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">CreateProTree</span>(_src_path,_dist_path,_parent_item,_file_count,_self,_root);<br>    <span class="hljs-keyword">if</span>(_bstop)&#123;<br>        <span class="hljs-keyword">auto</span> path = <span class="hljs-built_in">dynamic_cast</span>&lt;ProTreeItem*&gt;(_root)-&gt;<span class="hljs-built_in">GetPath</span>();<br>        <span class="hljs-keyword">auto</span> index = _self-&gt;<span class="hljs-built_in">indexOfTopLevelItem</span>(_root);<br>        <span class="hljs-keyword">delete</span> _self-&gt;<span class="hljs-built_in">takeTopLevelItem</span>(index);<br>        <span class="hljs-function">QDir <span class="hljs-title">dir</span><span class="hljs-params">(path)</span></span>;<br>        <span class="hljs-comment">//删除文件夹</span><br>        dir.<span class="hljs-built_in">removeRecursively</span>();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-function">emit <span class="hljs-title">SigFinishProgress</span><span class="hljs-params">(_file_count)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>完善SlotImport函数</li></ol><p>在ProTreeWidget中创建使用智能指针管理的ProTreeThread数据成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//copy文件线程</span><br>std::shared_ptr&lt;ProTreeThread&gt;  _thread_create_pro;<br></code></pre></td></tr></table></figure><p>完善SlotImport函数</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-punctuation">&#123;</span><br>     int file_<span class="hljs-attr">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">;</span><br><br>     <span class="hljs-comment">//创建模态对话框</span><br>     _dialog_<span class="hljs-attr">progress</span> <span class="hljs-operator">=</span> new QProgressDialog(this)<span class="hljs-punctuation">;</span><br><br>    <span class="hljs-comment">//耗时操作放在线程中操作,使用std::ref将右值转换为左值</span><br><br>     _thread_create_<span class="hljs-attr">pro</span> <span class="hljs-operator">=</span> std::make_shared<span class="hljs-params">&lt;ProTreeThread&gt;</span>(std::ref(import_path), std::ref(path),<br>                                                         _right_btn_item,<br><span class="hljs-symbol">                                                         std:</span>:ref(file_count), this,_right_btn_item,<br>     connect(_thread_create_pro.get(), <span class="hljs-variable">&amp;</span>ProTreeThread::SigUpdateProgress,<br>             this, <span class="hljs-variable">&amp;</span>ProTreeWidget::SlotUpdateProgress)<span class="hljs-punctuation">;</span><br><br>     connect(_thread_create_pro.get(), <span class="hljs-variable">&amp;</span>ProTreeThread::SigFinishProgress, this,<span class="hljs-variable">&amp;</span>ProTreeWidget::SlotFinishProgress)<span class="hljs-punctuation">;</span><br>     nullptr)<span class="hljs-punctuation">;</span><br><br>     connect(_dialog_progress, <span class="hljs-variable">&amp;</span>QProgressDialog::canceled, this, <span class="hljs-variable">&amp;</span>ProTreeWidget::SlotCancelProgress)<span class="hljs-punctuation">;</span><br><br>     connect(this, <span class="hljs-variable">&amp;</span>ProTreeWidget::SigCancelProgress, _thread_create_pro.get(),<span class="hljs-variable">&amp;</span>ProTreeThread::SlotCancelProgress)<span class="hljs-punctuation">;</span><br>     _thread_create_pro-&gt;start()<span class="hljs-punctuation">;</span><br><br>      <br>    _dialog_progress-&gt;setWindowTitle(<span class="hljs-string">&quot;Please wait...&quot;</span>)<span class="hljs-punctuation">;</span><br>    _dialog_progress-&gt;setFixedWidth(PROGRESS_WIDTH)<span class="hljs-punctuation">;</span><br>    _dialog_progress-&gt;setRange(<span class="hljs-number">0</span>, PROGRESS_MAX)<span class="hljs-punctuation">;</span><br>    _dialog_progress-&gt;exec()<span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>相关槽函数的实现：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sqf">void ProTreeWidget::SlotUpdateProgress(int <span class="hljs-built_in">count</span>)<br>&#123;<br>    <span class="hljs-comment">//qDebug() &lt;&lt; &quot;count is &quot; &lt;&lt; count;</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">_dialog_progress</span>)&#123;<br>        qDebug() &lt;&lt; <span class="hljs-string">&quot;dialog_progress is empty!!!&quot;</span> &lt;&lt; <span class="hljs-literal">endl</span>;<br>        return;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">count</span> &gt;= PROGRESS_MAX)&#123;<br>         <span class="hljs-variable">_dialog_progress</span>-&gt;setValue(<span class="hljs-built_in">count</span>%PROGRESS_MAX);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-variable">_dialog_progress</span>-&gt;setValue(<span class="hljs-built_in">count</span>%PROGRESS_MAX);<br>    &#125;<br><br>&#125;<br><br>void ProTreeWidget::SlotCancelProgress()<br>&#123;<br>  <span class="hljs-comment">//  _thread_create_pro-&gt;terminate();</span><br>    emit SigCancelProgress();<br>    delete <span class="hljs-variable">_dialog_progress</span>;<br>    <span class="hljs-variable">_dialog_progress</span> =nullptr;<br>&#125;<br><br>void ProTreeWidget::SlotFinishProgress()<br>&#123;<br>    <span class="hljs-variable">_dialog_progress</span>-&gt;setValue(PROGRESS_MAX);<br>    <span class="hljs-variable">_dialog_progress</span>-&gt;deleteLater();<br>&#125;<br></code></pre></td></tr></table></figure><p>最终结果如下图所示</p><p><img src="/image-15.png" alt="alt text"></p><h1 id="设置活动项目"><a href="#设置活动项目" class="headerlink" title="设置活动项目"></a>设置活动项目</h1><p>在ProTreeWidget的构造函数中添加连接设置活动项目的槽函数</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">connect(<span class="hljs-name">_action_setstart</span>, <span class="hljs-symbol">&amp;QAction</span>:<span class="hljs-symbol">:triggered</span>, this, <span class="hljs-symbol">&amp;ProTreeWidget</span>:<span class="hljs-symbol">:SlotSetActive</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>SlotSetActive函数的实现：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">void</span> ProTreeWidget::SlotSetActive()<br>&#123;<br>    <span class="hljs-keyword">if</span>(!_right_btn_item)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//定义一个字体类</span><br>    QFont <span class="hljs-literal">null</span>Font;<br>    <span class="hljs-literal">null</span>Font.setBold(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">if</span>(_active_item)&#123;<br>        _active_item-&gt;setFont(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>Font);<br>    &#125;<br>    <br>    <span class="hljs-comment">//设置右键点击的条目为激活项目，并设置字体加粗</span><br>    _active_item = _right_btn_item;<br>    <span class="hljs-literal">null</span>Font.setBold(<span class="hljs-literal">true</span>);<br>    _active_item-&gt;setFont(<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>Font);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下图所示：</p><p><img src="/image-16.png" alt="alt text"></p>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lambda表达式</title>
    <link href="/2024/03/18/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2024/03/18/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda表达式是 C++ 11 最重要也是最常用的特性之一，是现代编程语言的一个特点，简洁，提高了代码的效率并且可以使程序更加灵活。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">capture</span>](<span class="hljs-link">params</span>) opt -&gt; ret &#123;body;&#125;;<br><span class="hljs-bullet">    -</span> capture: 捕获列表<br><span class="hljs-bullet">    -</span> params: 参数列表<br><span class="hljs-bullet">    -</span> opt: 函数选项<br><span class="hljs-bullet">    -</span> ret: 返回值类型<br><span class="hljs-bullet">    -</span> body: 函数体<br></code></pre></td></tr></table></figure><p>关于Lambda表达式的细节介绍:</p><p>捕获列表: 捕获一定范围内的变量</p><ul><li><p>[] - 不捕捉任何变量</p></li><li><p>[&amp;] - 捕获外部作用域中所有变量, 并作为引用在函数体内使用 (按引用捕获)</p></li><li><p>[&#x3D;] - 捕获外部作用域中所有变量, 并作为副本在函数体内使用 (按值捕获)拷贝的副本在匿名函数体内部是只读的</p></li><li><p>[&#x3D;, &amp;foo] - 按值捕获外部作用域中所有变量, 并按照引用捕获外部变量 foo</p></li><li><p>[bar] - 按值捕获 bar 变量, 同时不捕获其他变量</p></li><li><p>[&amp;bar] - 按引用捕获 bar 变量, 同时不捕获其他变量</p></li><li><p>[this] - 捕获当前类中的this指针,让lambda表达式拥有和当前类成员函数同样的访问权限</p></li><li><p>如果已经使用了 &amp; 或者 &#x3D;, 默认添加此选项<br>参数列表: 和普通函数的参数列表一样</p></li></ul><p>opt 选项 –&gt; 可以省略</p><ul><li>mutable: 可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）</li><li>exception: 指定函数抛出的异常，如抛出整数类型的异常，可以使用throw();</li></ul><p>返回值类型:</p><ul><li>标识函数返回值的类型，当返回值为void，或者函数体中只有一处return的地方（此时编- 译器可以自动推断出返回值类型）时，这部分可以省略</li></ul><p>函数体:</p><ul><li>函数的实现，这部分不能省略，但函数体可以为空。</li></ul>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>Lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT中的基础数据类型</title>
    <link href="/2024/03/17/QT%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/03/17/QT%E4%B8%AD%E7%9A%84%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="QPoint"><a href="#QPoint" class="headerlink" title="QPoint"></a>QPoint</h2><p>QPoint类封装了我们常用用到的坐标点 (x, y), 常用的 API如下:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-comment">// 构造一个坐标原点, 即(0, 0)</span><br>QPoint::<span class="hljs-built_in">QPoint</span>();<br><span class="hljs-comment">// 参数为 x轴坐标, y轴坐标</span><br>QPoint::<span class="hljs-built_in">QPoint</span>(<span class="hljs-type">int</span> xpos, <span class="hljs-type">int</span> ypos);<br><br><span class="hljs-comment">// 设置x轴坐标</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QPoint::setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-comment">// 设置y轴坐标</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QPoint::setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span></span>;<br><br><span class="hljs-comment">// 得到x轴坐标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QPoint::x</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 得到x轴坐标的引用</span><br><span class="hljs-function"><span class="hljs-type">int</span> &amp;<span class="hljs-title">QPoint::rx</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 得到y轴坐标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QPoint::y</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 得到y轴坐标的引用</span><br><span class="hljs-function"><span class="hljs-type">int</span> &amp;<span class="hljs-title">QPoint::ry</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 直接通过坐标对象进行算术运算: 加减乘除</span><br>QPoint &amp;QPoint::<span class="hljs-keyword">operator</span>*=(<span class="hljs-type">float</span> factor);<br>QPoint &amp;QPoint::<span class="hljs-keyword">operator</span>*=(<span class="hljs-type">double</span> factor);<br>QPoint &amp;QPoint::<span class="hljs-keyword">operator</span>*=(<span class="hljs-type">int</span> factor);<br>QPoint &amp;QPoint::<span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> QPoint &amp;point);<br>QPoint &amp;QPoint::<span class="hljs-keyword">operator</span>-=(<span class="hljs-type">const</span> QPoint &amp;point);<br>QPoint &amp;QPoint::<span class="hljs-keyword">operator</span>/=(qreal divisor);<br><br><br></code></pre></td></tr></table></figure><h2 id="QLine"><a href="#QLine" class="headerlink" title="QLine"></a>QLine</h2><p>QLine是一个直线类, 封装了两个坐标点 (两点确定一条直线)</p><p>常用API如下:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-comment">// 构造一个空对象</span><br>QLine::<span class="hljs-built_in">QLine</span>();<br><span class="hljs-comment">// 构造一条直线, 通过两个坐标点</span><br>QLine::<span class="hljs-built_in">QLine</span>(<span class="hljs-type">const</span> QPoint &amp;p1, <span class="hljs-type">const</span> QPoint &amp;p2);<br><span class="hljs-comment">// 从点 (x1, y1) 到 (x2, y2)</span><br>QLine::<span class="hljs-built_in">QLine</span>(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2);<br><br><span class="hljs-comment">// 给直线对象设置坐标点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QLine::setPoints</span><span class="hljs-params">(<span class="hljs-type">const</span> QPoint &amp;p1, <span class="hljs-type">const</span> QPoint &amp;p2)</span></span>;<br><span class="hljs-comment">// 起始点(x1, y1), 终点(x2, y2)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QLine::setLine</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2)</span></span>;<br><span class="hljs-comment">// 设置直线的起点坐标</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QLine::setP1</span><span class="hljs-params">(<span class="hljs-type">const</span> QPoint &amp;p1)</span></span>;<br><span class="hljs-comment">// 设置直线的终点坐标</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QLine::setP2</span><span class="hljs-params">(<span class="hljs-type">const</span> QPoint &amp;p2)</span></span>;<br><br><span class="hljs-comment">// 返回直线的起始点坐标</span><br><span class="hljs-function">QPoint <span class="hljs-title">QLine::p1</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回直线的终点坐标</span><br><span class="hljs-function">QPoint <span class="hljs-title">QLine::p2</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回值直线的中心点坐标, (p1() + p2()) / 2</span><br><span class="hljs-function">QPoint <span class="hljs-title">QLine::center</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-comment">// 返回值直线起点的 x 坐标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QLine::x1</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回值直线终点的 x 坐标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QLine::x2</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回值直线起点的 y 坐标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QLine::y1</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回值直线终点的 y 坐标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QLine::y2</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-comment">// 用给定的坐标点平移这条直线</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QLine::translate</span><span class="hljs-params">(<span class="hljs-type">const</span> QPoint &amp;offset)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QLine::translate</span><span class="hljs-params">(<span class="hljs-type">int</span> dx, <span class="hljs-type">int</span> dy)</span></span>;<br><span class="hljs-comment">// 用给定的坐标点平移这条直线, 返回平移之后的坐标点</span><br><span class="hljs-function">QLine <span class="hljs-title">QLine::translated</span><span class="hljs-params">(<span class="hljs-type">const</span> QPoint &amp;offset)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function">QLine <span class="hljs-title">QLine::translated</span><span class="hljs-params">(<span class="hljs-type">int</span> dx, <span class="hljs-type">int</span> dy)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-comment">// 直线对象进行比较</span><br><span class="hljs-type">bool</span> QLine::<span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> QLine &amp;line) <span class="hljs-type">const</span>;<br><span class="hljs-type">bool</span> QLine::<span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> QLine &amp;line) <span class="hljs-type">const</span>;<br><br></code></pre></td></tr></table></figure><h2 id="QSize"><a href="#QSize" class="headerlink" title="QSize"></a>QSize</h2><p>在QT中QSize类用来形容长度和宽度, 常用的API如下:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-comment">// 构造空对象, 对象中的宽和高都是无效的</span><br>QSize::<span class="hljs-built_in">QSize</span>();<br><span class="hljs-comment">// 使用宽和高构造一个有效对象</span><br>QSize::<span class="hljs-built_in">QSize</span>(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height);<br><br><span class="hljs-comment">// 设置宽度</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QSize::setWidth</span><span class="hljs-params">(<span class="hljs-type">int</span> width)</span></span><br><span class="hljs-function"><span class="hljs-comment">// 设置高度</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QSize::setHeight</span><span class="hljs-params">(<span class="hljs-type">int</span> height)</span></span>;<br><br><span class="hljs-comment">// 得到宽度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QSize::width</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 得到宽度的引用</span><br><span class="hljs-function"><span class="hljs-type">int</span> &amp;<span class="hljs-title">QSize::rwidth</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 得到高度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QSize::height</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 得到高度的引用</span><br><span class="hljs-function"><span class="hljs-type">int</span> &amp;<span class="hljs-title">QSize::rheight</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 交换高度和宽度的值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QSize::transpose</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 交换高度和宽度的值, 返回交换之后的尺寸信息</span><br><span class="hljs-function">QSize <span class="hljs-title">QSize::transposed</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-comment">// 进行算法运算: 加减乘除</span><br>QSize &amp;QSize::<span class="hljs-keyword">operator</span>*=(qreal factor);<br>QSize &amp;QSize::<span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> QSize &amp;size);<br>QSize &amp;QSize::<span class="hljs-keyword">operator</span>-=(<span class="hljs-type">const</span> QSize &amp;size);<br>QSize &amp;QSize::<span class="hljs-keyword">operator</span>/=(qreal divisor);<br><br></code></pre></td></tr></table></figure><h2 id="QRect"><a href="#QRect" class="headerlink" title="QRect"></a>QRect</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-comment">// 构造函数</span><br><span class="hljs-comment">// 构造一个空对象</span><br>QRect::<span class="hljs-built_in">QRect</span>();<br><span class="hljs-comment">// 基于左上角坐标, 和右下角坐标构造一个矩形对象</span><br>QRect::<span class="hljs-built_in">QRect</span>(<span class="hljs-type">const</span> QPoint &amp;topLeft, <span class="hljs-type">const</span> QPoint &amp;bottomRight);<br><span class="hljs-comment">// 基于左上角坐标, 和 宽度, 高度构造一个矩形对象</span><br>QRect::<span class="hljs-built_in">QRect</span>(<span class="hljs-type">const</span> QPoint &amp;topLeft, <span class="hljs-type">const</span> QSize &amp;size);<br><span class="hljs-comment">// 通过 左上角坐标(x, y), 和 矩形尺寸(width, height) 构造一个矩形对象</span><br>QRect::<span class="hljs-built_in">QRect</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height);<br><br><span class="hljs-comment">// 设置矩形的尺寸信息, 左上角坐标不变</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QRect::setSize</span><span class="hljs-params">(<span class="hljs-type">const</span> QSize &amp;size)</span></span>;<br><span class="hljs-comment">// 设置矩形左上角坐标为(x,y), 大小为(width, height)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QRect::setRect</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span>;<br><span class="hljs-comment">// 设置矩形宽度</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QRect::setWidth</span><span class="hljs-params">(<span class="hljs-type">int</span> width)</span></span>;<br><span class="hljs-comment">// 设置矩形高度</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QRect::setHeight</span><span class="hljs-params">(<span class="hljs-type">int</span> height)</span></span>;<br><br><span class="hljs-comment">// 返回值矩形左上角坐标</span><br><span class="hljs-function">QPoint <span class="hljs-title">QRect::topLeft</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回矩形右上角坐标</span><br><span class="hljs-comment">// 该坐标点值为: QPoint(left() + width() -1, top())</span><br><span class="hljs-function">QPoint <span class="hljs-title">QRect::topRight</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回矩形左下角坐标</span><br><span class="hljs-comment">// 该坐标点值为: QPoint(left(), top() + height() - 1)</span><br><span class="hljs-function">QPoint <span class="hljs-title">QRect::bottomLeft</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回矩形右下角坐标</span><br><span class="hljs-comment">// 该坐标点值为: QPoint(left() + width() -1, top() + height() - 1)</span><br><span class="hljs-function">QPoint <span class="hljs-title">QRect::bottomRight</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回矩形中心点坐标</span><br><span class="hljs-function">QPoint <span class="hljs-title">QRect::center</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-comment">// 返回矩形上边缘y轴坐标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QRect::top</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QRect::y</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回值矩形下边缘y轴坐标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QRect::bottom</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回矩形左边缘 x轴坐标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QRect::x</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QRect::left</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回矩形右边缘x轴坐标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QRect::right</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-comment">// 返回矩形的高度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QRect::width</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回矩形的宽度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QRect::height</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 返回矩形的尺寸信息</span><br><span class="hljs-function">QSize <span class="hljs-title">QRect::size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br></code></pre></td></tr></table></figure><h2 id="QDate"><a href="#QDate" class="headerlink" title="QDate"></a>QDate</h2><p>QDate类可以封装日期信息也可以通过这个类得到日期相关的信息, 包括:年, 月, 日。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-comment">// 构造函数</span><br><span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">QDate</span>();<br><span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">QDate</span>(<span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> d);<br><br><span class="hljs-comment">// 公共成员函数</span><br><span class="hljs-comment">// 重新设置日期对象中的日期</span><br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">setDate</span>(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day);<br><span class="hljs-comment">// 给日期对象添加 ndays 天</span><br>QDate <span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">addDays</span>(qint64 ndays) <span class="hljs-keyword">const</span>;<br><span class="hljs-comment">// 给日期对象添加 nmonths 月</span><br>QDate <span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">addMonths</span>(<span class="hljs-keyword">int</span> nmonths) <span class="hljs-keyword">const</span>;<br><span class="hljs-comment">// 给日期对象添加 nyears 月</span><br>QDate <span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">addYears</span>(<span class="hljs-keyword">int</span> nyears) <span class="hljs-keyword">const</span>;<br><br><span class="hljs-comment">// 得到日期对象中的年/月/日</span><br><span class="hljs-keyword">int</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">year</span>() <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">int</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">month</span>() <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">int</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">day</span>() <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">getDate</span>(<span class="hljs-keyword">int</span> *year, <span class="hljs-keyword">int</span> *month, <span class="hljs-keyword">int</span> *day) <span class="hljs-keyword">const</span>;<br><br><span class="hljs-comment">// 日期对象格式化</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    d    - The day as a number without a leading zero (1 to 31)</span><br><span class="hljs-comment">    dd   - The day as a number with a leading zero (01 to 31)</span><br><span class="hljs-comment">    ddd - The abbreviated localized day name (e.g. &#x27;Mon&#x27; to &#x27;Sun&#x27;). Uses the system locale to localize the name, i.e. QLocale::system().</span><br><span class="hljs-comment">    dddd - The long localized day name (e.g. &#x27;Monday&#x27; to &#x27;Sunday&#x27;). Uses the system locale to localize the name, i.e. QLocale::system().</span><br><span class="hljs-comment">    M    - The month as a number without a leading zero (1 to 12)</span><br><span class="hljs-comment">    MM   - The month as a number with a leading zero (01 to 12)</span><br><span class="hljs-comment">    MMM - The abbreviated localized month name (e.g. &#x27;Jan&#x27; to &#x27;Dec&#x27;). Uses the system locale to localize the name, i.e. QLocale::system().</span><br><span class="hljs-comment">    MMMM - The long localized month name (e.g. &#x27;January&#x27; to &#x27;December&#x27;). Uses the system locale to localize the name, i.e. QLocale::system().</span><br><span class="hljs-comment">    yy   - The year as a two digit number (00 to 99)</span><br><span class="hljs-comment">    yyyy - The year as a four digit number. If the year is negative, a minus sign is prepended, making five characters.</span><br><span class="hljs-comment">*/</span><br>QString <span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">toString</span>(<span class="hljs-keyword">const</span> QString &amp;format) <span class="hljs-keyword">const</span>;<br><br><span class="hljs-comment">// 操作符重载 ==&gt; 日期比较</span><br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-variable constant_">operator</span>!=(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDate</span> &amp;d) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-variable constant_">operator</span>&lt;(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDate</span> &amp;d) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-variable constant_">operator</span>&lt;=(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDate</span> &amp;d) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-variable constant_">operator</span>==(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDate</span> &amp;d) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-variable constant_">operator</span>&gt;(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDate</span> &amp;d) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDate</span>::<span class="hljs-variable constant_">operator</span>&gt;=(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDate</span> &amp;d) <span class="hljs-keyword">const</span>;<br><br><span class="hljs-comment">// 静态函数 -&gt; 得到本地的当前日期</span><br>[<span class="hljs-built_in">static</span>] QDate <span class="hljs-title class_">QDate</span>::<span class="hljs-title function_ invoke__">currentDate</span>();<br><br></code></pre></td></tr></table></figure><h2 id="QTime"><a href="#QTime" class="headerlink" title="QTime"></a>QTime</h2><p>QTime类可以封装时间信息也可以通过这个类得到时间相关的信息, 包括:时, 分, 秒, 毫秒。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-comment">// 构造函数</span><br>QTime::<span class="hljs-built_in">QTime</span>();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    h ==&gt; 取值范围： 0 ~ 23</span><br><span class="hljs-comment">    m and s ==&gt; 取值范围： 0 ~ 59</span><br><span class="hljs-comment">    ms ==&gt; 取值范围： 0 ~ 999</span><br><span class="hljs-comment">*/</span> <br>QTime::<span class="hljs-built_in">QTime</span>(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> ms = <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 公共成员函数</span><br><span class="hljs-comment">// Returns true if the set time is valid; otherwise returns false.</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QTime::setHMS</span><span class="hljs-params">(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> ms = <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function">QTime <span class="hljs-title">QTime::addSecs</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function">QTime <span class="hljs-title">QTime::addMSecs</span><span class="hljs-params">(<span class="hljs-type">int</span> ms)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-comment">// 示例代码</span><br>  <span class="hljs-function">QTime <span class="hljs-title">n</span><span class="hljs-params">(<span class="hljs-number">14</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;                <span class="hljs-comment">// n == 14:00:00</span><br>  QTime t;<br>  t = n.<span class="hljs-built_in">addSecs</span>(<span class="hljs-number">70</span>);                <span class="hljs-comment">// t == 14:01:10</span><br>  t = n.<span class="hljs-built_in">addSecs</span>(<span class="hljs-number">-70</span>);               <span class="hljs-comment">// t == 13:58:50</span><br>  t = n.<span class="hljs-built_in">addSecs</span>(<span class="hljs-number">10</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> + <span class="hljs-number">5</span>);  <span class="hljs-comment">// t == 00:00:05</span><br>  t = n.<span class="hljs-built_in">addSecs</span>(<span class="hljs-number">-15</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>);     <span class="hljs-comment">// t == 23:00:00</span><br><br><span class="hljs-comment">// 从时间对象中取出 时/分/秒/毫秒</span><br><span class="hljs-comment">// Returns the hour part (0 to 23) of the time. Returns -1 if the time is invalid.</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QTime::hour</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// Returns the minute part (0 to 59) of the time. Returns -1 if the time is invalid.</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QTime::minute</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// Returns the second part (0 to 59) of the time. Returns -1 if the time is invalid.</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QTime::second</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// Returns the millisecond part (0 to 999) of the time. Returns -1 if the time is invalid.</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QTime::msec</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br><br><span class="hljs-comment">// 时间格式化</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    -- 时 --</span><br><span class="hljs-comment">    h==&gt;The hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</span><br><span class="hljs-comment">    hh==&gt;The hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</span><br><span class="hljs-comment">    H==&gt;The hour without a leading zero (0 to 23, even with AM/PM display)</span><br><span class="hljs-comment">    HH==&gt;The hour with a leading zero (00 to 23, even with AM/PM display)</span><br><span class="hljs-comment">    -- 分 --</span><br><span class="hljs-comment">    m==&gt;The minute without a leading zero (0 to 59)</span><br><span class="hljs-comment">    mm==&gt;The minute with a leading zero (00 to 59)</span><br><span class="hljs-comment">    -- 秒 --</span><br><span class="hljs-comment">    s==&gt;The whole second, without any leading zero (0 to 59)</span><br><span class="hljs-comment">    ss==&gt;The whole second, with a leading zero where applicable (00 to 59)</span><br><span class="hljs-comment">    -- 毫秒 --</span><br><span class="hljs-comment">    zzz==&gt;The fractional part of the second, to millisecond precision, </span><br><span class="hljs-comment">including trailing zeroes where applicable (000 to 999).</span><br><span class="hljs-comment">    -- 上午或者下午</span><br><span class="hljs-comment">    AP or A==&gt;使用AM/PM(大写) 描述上下午, 中文系统显示汉字</span><br><span class="hljs-comment">    ap or a==&gt;使用am/pm(小写) 描述上下午, 中文系统显示汉字</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">QString <span class="hljs-title">QTime::toString</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;format)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-comment">// 阶段性计时</span><br><span class="hljs-comment">// 过时的API函数</span><br><span class="hljs-comment">// 开始计时</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QTime::start</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 计时结束</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QTime::elapsed</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// 重新计时</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QTime::restart</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 推荐使用的API函数</span><br><span class="hljs-comment">// QElapsedTimer 类</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QElapsedTimer::start</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">qint64 <span class="hljs-title">QElapsedTimer::restart</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">qint64 <span class="hljs-title">QElapsedTimer::elapsed</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br><br><span class="hljs-comment">// 操作符重载 ==&gt; 时间比较</span><br><span class="hljs-type">bool</span> QTime::<span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> QTime &amp;t) <span class="hljs-type">const</span>;<br><span class="hljs-type">bool</span> QTime::<span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> QTime &amp;t) <span class="hljs-type">const</span>;<br><span class="hljs-type">bool</span> QTime::<span class="hljs-built_in">operator</span>&lt;=(<span class="hljs-type">const</span> QTime &amp;t) <span class="hljs-type">const</span>;<br><span class="hljs-type">bool</span> QTime::<span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> QTime &amp;t) <span class="hljs-type">const</span>;<br><span class="hljs-type">bool</span> QTime::<span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> QTime &amp;t) <span class="hljs-type">const</span>;<br><span class="hljs-type">bool</span> QTime::<span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-type">const</span> QTime &amp;t) <span class="hljs-type">const</span>;<br><br><span class="hljs-comment">// 静态函数 -&gt; 得到当前时间</span><br>[<span class="hljs-type">static</span>] <span class="hljs-function">QTime <span class="hljs-title">QTime::currentTime</span><span class="hljs-params">()</span></span>;<br><br></code></pre></td></tr></table></figure><h2 id="QDateTime"><a href="#QDateTime" class="headerlink" title="QDateTime"></a>QDateTime</h2><p>QDateTime类可以封装日期和时间信息也可以通过这个类得到日期和时间相关的信息, 包括:年, 月, 日, 时, 分, 秒, 毫秒。其实这个类就是QDate 和 QTime 这两个类的结合体。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-comment">// 构造函数</span><br><span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">QDateTime</span>();<br><span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">QDateTime</span>(<span class="hljs-keyword">const</span> QDate &amp;date, <span class="hljs-keyword">const</span> QTime &amp;time, <span class="hljs-title class_">Qt</span>::<span class="hljs-variable constant_">TimeSpec</span> spec = <span class="hljs-title class_">Qt</span>::<span class="hljs-variable constant_">LocalTime</span>);<br><br><span class="hljs-comment">// 公共成员函数</span><br><span class="hljs-comment">// 设置日期</span><br><span class="hljs-keyword">void</span> <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">setDate</span>(<span class="hljs-keyword">const</span> QDate &amp;date);<br><span class="hljs-comment">// 设置时间</span><br><span class="hljs-keyword">void</span> <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">setTime</span>(<span class="hljs-keyword">const</span> QTime &amp;time);<br><span class="hljs-comment">// 给当前日期对象追加 年/月/日/秒/毫秒, 参数可以是负数</span><br>QDateTime <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">addYears</span>(<span class="hljs-keyword">int</span> nyears) <span class="hljs-keyword">const</span>;<br>QDateTime <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">addMonths</span>(<span class="hljs-keyword">int</span> nmonths) <span class="hljs-keyword">const</span>;<br>QDateTime <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">addDays</span>(qint64 ndays) <span class="hljs-keyword">const</span>;<br>QDateTime <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">addSecs</span>(qint64 s) <span class="hljs-keyword">const</span>;<br>QDateTime <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">addMSecs</span>(qint64 msecs) <span class="hljs-keyword">const</span>;<br><br><span class="hljs-comment">// 得到对象中的日期</span><br>QDate <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">date</span>() <span class="hljs-keyword">const</span>;<br><span class="hljs-comment">// 得到对象中的时间</span><br>QTime <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">time</span>() <span class="hljs-keyword">const</span>;<br><br><span class="hljs-comment">// 日期和时间格式, 格式字符参考QDate 和 QTime 类的 toString() 函数</span><br>QString <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">toString</span>(<span class="hljs-keyword">const</span> QString &amp;format) <span class="hljs-keyword">const</span>;<br><br><br><span class="hljs-comment">// 操作符重载 ==&gt; 日期时间对象的比较</span><br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDateTime</span>::<span class="hljs-variable constant_">operator</span>!=(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDateTime</span> &amp;other) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDateTime</span>::<span class="hljs-variable constant_">operator</span>&lt;(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDateTime</span> &amp;other) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDateTime</span>::<span class="hljs-variable constant_">operator</span>&lt;=(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDateTime</span> &amp;other) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDateTime</span>::<span class="hljs-variable constant_">operator</span>==(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDateTime</span> &amp;other) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDateTime</span>::<span class="hljs-variable constant_">operator</span>&gt;(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDateTime</span> &amp;other) <span class="hljs-keyword">const</span>;<br><span class="hljs-keyword">bool</span> <span class="hljs-title class_">QDateTime</span>::<span class="hljs-variable constant_">operator</span>&gt;=(<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">QDateTime</span> &amp;other) <span class="hljs-keyword">const</span>;<br><br><span class="hljs-comment">// 静态函数</span><br><span class="hljs-comment">// 得到当前时区的日期和时间(本地设置的时区对应的日期和时间)</span><br>[<span class="hljs-built_in">static</span>] QDateTime <span class="hljs-title class_">QDateTime</span>::<span class="hljs-title function_ invoke__">currentDateTime</span>();<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
      <tag>数据类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT中的内存回收机制</title>
    <link href="/2024/03/16/QT%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <url>/2024/03/16/QT%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="QT中的内存回收机制"><a href="#QT中的内存回收机制" class="headerlink" title="QT中的内存回收机制"></a>QT中的内存回收机制</h2><p>在Qt中创建对象的时候会提供一个 Parent对象指针（可以查看类的构造函数），下面来解释这个parent到底是干什么的。</p><p>QObject是以对象树的形式组织起来的。当你创建一个QObject对象时，会看到QObject的构造函数接收一个QObject指针作为参数，这个参数就是 parent，也就是父对象指针。这相当于，在创建QObject对象时，可以提供一个其父对象，我们创建的这个QObject对象会自动添加到其父对象的children()列表。当父对象析构的时候，这个列表中的所有对象也会被析构。（注意，这里的父对象并不是继承意义上的父类！）</p><p>QWidget是能够在屏幕上显示的一切组件的父类。QWidget继承自QObject，因此也继承了这种对象树关系。一个孩子自动地成为父组件的一个子组件。因此，它会显示在父组件的坐标系统中，被父组件的边界剪裁。例如，当用户关闭一个对话框的时候，应用程序将其删除，那么，我们希望属于这个对话框的按钮、图标等应该一起被删除。事实就是如此，因为这些都是对话框的子组件。</p><p>Qt 引入对象树的概念，在一定程度上解决了内存问题。</p><ul><li><p>当一个QObject对象在堆上创建的时候，Qt 会同时为其创建一个对象树。不过，对象树中对象的顺序是没有定义的。这意味着，销毁这些对象的顺序也是未定义的。</p></li><li><p>任何对象树中的 QObject对象 delete 的时候，如果这个对象有 parent，则自动将其从 parent 的children()列表中删除；如果有孩子，则自动 delete 每一个孩子。Qt 保证没有QObject会被 delete 两次，这是由析构顺序决定的。</p></li></ul><p>综上所述，Qt中有内存回收机制, 但是不是所有被new出的对象被自动回收, 满足条件才可以回收, 如果想要在Qt中实现内存的自动回收, 需要满足以下两个条件:</p><ul><li><p>创建的对象必须是QObject类的子类(间接子类也可以)。</p></li><li><p>创建出的类对象, 必须要指定其父对象是谁。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT基本窗口类</title>
    <link href="/2024/03/16/QT%E5%9F%BA%E6%9C%AC%E7%AA%97%E5%8F%A3%E7%B1%BB/"/>
    <url>/2024/03/16/QT%E5%9F%BA%E6%9C%AC%E7%AA%97%E5%8F%A3%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="QWidget类"><a href="#QWidget类" class="headerlink" title="QWidget类"></a>QWidget类</h2><p>特点：</p><ul><li><p>QWiget是所有窗口类的基类。</p></li><li><p>可以内嵌到其他窗口的内部-无边框（需要给该窗口指定父窗口）</p></li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//如果创建窗口时，给其指定了父对象，这个窗口不是一个独立窗口</span><br>TestWidget* w=<span class="hljs-keyword">new</span> <span class="hljs-type">TestWidget</span>(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><ul><li>可以作为独立的窗口显示-有边框（不能给该窗口指定父窗口）</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//一般在Qt的构造函数进行初始化操作（窗口，数据。。）</span><br><span class="hljs-comment">//显示当前窗口的时候，显示另一个窗口 TestWidget</span><br><span class="hljs-comment">//创建窗口对象</span><br><span class="hljs-comment">//没有给w指定父对象，这个窗口是一个独立窗口</span><br>TestWidget* w=<span class="hljs-keyword">new</span> TestWidget;<br>w-&gt;<span class="hljs-keyword">show</span>();<br></code></pre></td></tr></table></figure><ul><li>QT中所有控件的基类</li></ul><p>基本API使用</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QRect&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPoint&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDebug&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QMenu&gt;</span></span><br><br>MainWindow::<span class="hljs-built_in">MainWindow</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>    , <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-comment">//设置窗口的最大尺寸</span><br>    <span class="hljs-built_in">setMaximumSize</span>(<span class="hljs-number">600</span>,<span class="hljs-number">600</span>);<br>    <span class="hljs-comment">//设置窗口的最小尺寸</span><br>    <span class="hljs-built_in">setMinimumSize</span>(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>);<br>    <span class="hljs-comment">//设置窗口标题</span><br>    <span class="hljs-built_in">setWindowTitle</span>(<span class="hljs-string">&quot;我好想睡觉&quot;</span>);<br>    <span class="hljs-comment">//设置窗口图标</span><br>    <span class="hljs-built_in">setWindowIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;c:\\Users\\御龙\\Desktop\\hhh.jpg&quot;</span>));<br><br>    <span class="hljs-built_in">connect</span>(<span class="hljs-keyword">this</span>,&amp;MainWindow::windowTitleChanged,<span class="hljs-keyword">this</span>,[=]()<br>    &#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;标题修改&quot;</span>;<br>    &#125;);<br><br>    <span class="hljs-comment">//添加菜单</span><br>    <span class="hljs-built_in">setContextMenuPolicy</span>(Qt::CustomContextMenu);<br>    <span class="hljs-built_in">connect</span>(<span class="hljs-keyword">this</span>,&amp;MainWindow::customContextMenuRequested,<span class="hljs-keyword">this</span>,[=](<span class="hljs-type">const</span> QPoint &amp;pos)<br>    &#123;<br>        QMenu menu;<br>        menu.<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;工具&quot;</span>);<br>        menu.<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;文件&quot;</span>);<br>        menu.<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;调试&quot;</span>);<br>        <span class="hljs-comment">//全局坐标</span><br>        menu.<span class="hljs-built_in">exec</span>(QCursor::<span class="hljs-built_in">pos</span>());<br>    &#125;);<br>&#125;<br><br>MainWindow::~<span class="hljs-built_in">MainWindow</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::on_moveBtu_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//获取窗口信息</span><br>    QRect rect=<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">frameGeometry</span>();<br>    <span class="hljs-comment">//将窗口向右平移10，向下平移20</span><br>    <span class="hljs-built_in">move</span>(rect.<span class="hljs-built_in">topLeft</span>()+<span class="hljs-built_in">QPoint</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::on_pionatinBtu_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QRect rect=<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">frameGeometry</span>();<br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;左上角：&quot;</span>&lt;&lt;rect.<span class="hljs-built_in">topLeft</span>()<br>            &lt;&lt;<span class="hljs-string">&quot;右下角：&quot;</span>&lt;&lt;rect.<span class="hljs-built_in">topRight</span>()<br>            &lt;&lt;<span class="hljs-string">&quot;宽度：&quot;</span>&lt;&lt;rect.<span class="hljs-built_in">width</span>()<br>            &lt;&lt;<span class="hljs-string">&quot;高度：&quot;</span>&lt;&lt;rect.<span class="hljs-built_in">height</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::on_modifyBut_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">setWindowTitle</span>(<span class="hljs-string">&quot;hello,QT&quot;</span>);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="QDialog"><a href="#QDialog" class="headerlink" title="QDialog"></a>QDialog</h2><p>特点：</p><ul><li><p>对话窗口类</p></li><li><p>模态和非模态两种显示方式</p><ul><li><p>模态窗口是一种阻塞用户交互的窗口，意味着在模态窗口打开期间，用户无法与应用程序的其他部分进行交互。用户必须在模态窗口上执行某种操作（例如点击按钮或输入信息）后，才能返回到应用程序的其他部分。</p></li><li><p>非模态窗口与模态窗口相反，它不会阻塞用户与应用程序的其他部分的交互。用户可以在非模态窗口打开的同时继续与应用程序的其他部分进行交互。</p></li></ul></li><li><p>不能内嵌</p></li></ul><h2 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h2><p>特点:</p><ul><li><p>不能内嵌</p></li><li><p>可以包含菜单栏，工具栏，状态栏</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2024/03/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/03/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><p>总体来说设计模式分为三大类：</p><p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>设计模式是基于面向对象的语言使用。</p><h2 id="UML图（unified-modeling-language）"><a href="#UML图（unified-modeling-language）" class="headerlink" title="UML图（unified modeling language）"></a>UML图（unified modeling language）</h2><p>面向对象设计主要使用的就是UML类图，类图用于描述系统中所包含的类，以及他们之间的相互关系，帮助人们简化对系统的理解，他是系统分析和设计阶段的产物，也是系统编码和测试的重要模型依据。</p><p><img src="/image-9.png" alt="alt text"></p><p>UML图分为上中下三部分：上层是类名，中间层是属性（类的成员变量），下层是方法（类的成员函数）</p><ul><li>可见性：+ 表述 public 、 # 表述 protected 、- 表示 private 、__下划线表述static</li><li>属性的表示方法：【可见性】 【属性名称】：【类型】 &#x3D; （缺省值）</li><li>方法的表示方法：【可见性】 【方法名称】（【参数名：参数类型….】）：（返回值类型）</li></ul><p>如果我们定义一个类是抽象类（勒种有纯虚函数），在画UML图的时候，类名需要使用泄题显示。虚函数的表示方法跟随类名也是使用斜体表示，纯虚函数则需在最后加上&#x3D;0.</p><p>类与类之间的关系：</p><ul><li>继承关系：带空心三角形的实线，有空心三角的一端指向父类。</li><li>关联关系：通常将一个类的对象，作为另一个类的成员变量。有三种关联关系单向关联、双向关联、自关联（链表）（用带箭头的或不带箭头的实线）。</li><li>聚合关系：表示整体与部分的关系。在聚合关系中，成员对象是整体的一部分，但是成员对象可以脱离整体对象存在。聚合关系用空心带菱形的实线表示。</li><li>组合关系：表示整体与部分的关系，整体对象与成员对象具有相同的生命周期。用带实心的菱形实线表示。</li><li>依赖关系：<ol><li>将一个类的对象作为另一个类中方法的参数</li><li>在一个类的方法中将另一个类的对象作为其的局部变量</li><li>在一个类的方法中调用另一个类的静态方法</li></ol></li></ul><p>关联关系、聚合关系、组合关系之间的区别：</p><ul><li>关联和聚合的区别主要在语义上：关联的两个对象一般是平等的，而聚合一般是不平等的。</li><li>聚合和组合的区别则在语义和现实都有差别：<ol><li>组合的两个对象之间的生命周期有很大关联，聚合则不是。</li><li>一般来说组合对象不能脱离组合对象独立存在,而且也只能属于一个组合。被聚合的对象可以属于多个聚合对象。</li></ol></li></ul><h2 id="设计模式的三原则"><a href="#设计模式的三原则" class="headerlink" title="设计模式的三原则"></a>设计模式的三原则</h2><ol><li>单一职责原则：在设计一个类时尽量使其功能单一，及让他担任的职责单一。</li><li>开放封闭原则：对于扩展是开放的，对于修改时封闭的。及就是对于已经存在的类尽量不修改。</li><li>依赖倒转原则：高层模块不应该依赖底层模块，两个都应依赖抽象。抽象不应该依赖细节，细节应该依赖抽象。</li></ol><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h3><p>在一个项目中，全局范围内，某个类的实例对象有且只有一个，通过这个唯一实例向其他模块提供数据的全局访问，这种模式叫做单例模式，典型应用为任务队列。</p><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">//定义一个单例模式的任务队列</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskQueue</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//禁用它的拷贝构造函数</span><br><span class="hljs-comment">//TaskQueue() = delete;</span><br><span class="hljs-built_in">TaskQueue</span>(<span class="hljs-type">const</span> TaskQueue&amp; t) = <span class="hljs-keyword">delete</span>;<br>TaskQueue&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> TaskQueue&amp; t) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> TaskQueue* <span class="hljs-title">getTaskQ</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_taskQ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;111&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//两种都可</span><br><span class="hljs-built_in">TaskQueue</span>() = <span class="hljs-keyword">default</span>;<br><span class="hljs-comment">//TaskQueue(const TaskQueue&amp; t) = default;</span><br><span class="hljs-comment">//TaskQueue&amp; operator=(const TaskQueue&amp; t) = default;</span><br><span class="hljs-comment">//当前无法通过构造函数去实例化对象，只能是通过类名访问静态属性或方法</span><br><span class="hljs-type">static</span> TaskQueue* m_taskQ;<br>&#125;;<br><br>TaskQueue* TaskQueue::m_taskQ = <span class="hljs-keyword">new</span> TaskQueue;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>TaskQueue* TaskQ = TaskQueue::<span class="hljs-built_in">getTaskQ</span>();<br>TaskQ-&gt;<span class="hljs-built_in">print</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么可以的访问静态成员变量和函数呢？</p><p> static成员变量属于类（被存放在数据段中），不属于某个具体的对象（具体对象的内存是分配在堆中的），即使创建多个对象，也只为该变量分配一次内存，所有对象使用的都是这份内存中的数据。</p><ol><li>通过作用域运算符::直接访问静态成员 类名::静态成员 </li><li>通过对象.静态成员</li><li>通过指针-&gt;静态成员</li></ol><h4 id="懒汉模式和饿汉模式"><a href="#懒汉模式和饿汉模式" class="headerlink" title="懒汉模式和饿汉模式"></a>懒汉模式和饿汉模式</h4><ol><li>饿汉模式：定义类的时候创建单例对象。及上述TaskQueue类</li><li>懒汉模式：什么时候使用，在实例化对象<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//懒汉模式相较于饿汉模式更节省空间，但有线程安全问题，需在实例化时加锁</span><br><span class="hljs-function"><span class="hljs-type">static</span> TaskQueue* <span class="hljs-title">getTaskQ</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <br>        <span class="hljs-comment">//加锁</span><br>        m_mutex.<span class="hljs-built_in">lock</span>();<br>        <span class="hljs-keyword">if</span>(m_taskQ!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            m_taskQ=<span class="hljs-keyword">new</span> TaskQueue;<br>        &#125;<br>        m_mutex.<span class="hljs-built_in">unlock</span>();<br><span class="hljs-keyword">return</span> m_taskQ;<br>&#125;<br><br>    TaskQueue* TaskQueue::m_taskQ = <span class="hljs-literal">nullptr</span>;<br></code></pre></td></tr></table></figure>上述加锁操作可以实现线程安全问题，但同时也会导致访问效率低，在加锁后，依次只能有一个进程占用锁，其他的进程需要等待，因此可以使用双重检查锁定。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">static</span> <span class="hljs-title class_">TaskQueue</span>* <span class="hljs-title function_">getTaskQ</span>(<span class="hljs-params"></span>)<br>&#123;<br><span class="hljs-keyword">if</span> (!m_taskQ)<span class="hljs-comment">//增加一次检查，当m_taskQ创建后不进入</span><br>&#123;<br>m_mutex.<span class="hljs-title function_">lock</span>();<br><span class="hljs-keyword">if</span> (!m_taskQ)<br>m_taskQ = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskQueue</span>;<br>m_mutex.<span class="hljs-title function_">unlock</span>();<br>&#125;<br><span class="hljs-keyword">return</span> m_taskQ;<br>&#125;  <br><br></code></pre></td></tr></table></figure><p>使用原子变量解决线程安全问题</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">static</span> std::atomic&lt;TaskQueue*&gt; m_taskQ;<span class="hljs-comment">//创建</span><br>std::mutex TaskQueue::m_mutex;<span class="hljs-comment">//类外实例</span><br>&#123;<br>        TaskQueue* <span class="hljs-keyword">task</span> = m_taskQ.load();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">task</span>)<br>&#123;<br>m_mutex.lock();<br><span class="hljs-keyword">task</span> = m_taskQ.load();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">task</span>)<br>&#123;<br><span class="hljs-keyword">task</span> = <span class="hljs-keyword">new</span> TaskQueue;<br>m_taskQ.store(<span class="hljs-keyword">task</span>);<br>&#125;<br>m_mutex.unlock();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">task</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用静态的局部对象解决线程安全问题</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">static</span> TaskQueue* getTaskQ()<br>&#123;<br>     <span class="hljs-keyword">static</span> TaskQueue <span class="hljs-keyword">task</span>;<span class="hljs-comment">//在程序结束后释放内存</span><br>     <span class="hljs-keyword">return</span> &amp;<span class="hljs-keyword">task</span>;<br>&#125;<br><span class="hljs-comment">//私有成员变量不需要</span><br><span class="hljs-comment">//static std::mutex m_mutex;</span><br><span class="hljs-comment">//static std::atomic&lt;TaskQueue*&gt; m_taskQ;</span><br></code></pre></td></tr></table></figure><h3 id="2-简单工厂模式"><a href="#2-简单工厂模式" class="headerlink" title="2.简单工厂模式"></a>2.简单工厂模式</h3><p>工厂模式是一种创建型设计模式，用于创建对象而不暴露对象创建的逻辑。它通过提供一个公共的接口来创建对象，而不是通过直接调用构造函数来实例化对象。这样做的好处包括：</p><p>封装对象创建逻辑：工厂模式将对象的创建过程封装在一个单独的类或函数中，使客户端代码无需关心对象的具体创建细节。</p><p>灵活性：通过工厂方法或抽象工厂接口，可以轻松地切换和替换具体的对象创建实现，而不需要修改客户端代码。</p><p>解耦：客户端代码与具体的对象类之间的耦合度降低，因为客户端只依赖于抽象的工厂接口而不是具体的对象实现。</p><p>代码复用：通过工厂模式，可以在不同的地方重用相同的对象创建逻辑，从而避免重复的代码。</p><ul><li><p>简单工厂模式：由一个工厂类根据传入的参数决定创建哪种类型的对象。客户端代码只需知道所需对象的类型，而不需要了解创建细节。</p></li><li><p>工厂模式：将对象的创建延迟到子类中。定义一个创建对象的接口，但由子类来决定实际要实例化的类。每个子类都可以根据需要创建并返回不同类型的对象。</p></li><li><p>抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要指定它们具体的类。这种模式通常涉及一个工厂接口和多个具体工厂类，每个具体工厂类负责创建一组相关的对象。</p></li></ul><p>简单工厂模式相关类的创建和使用步骤：</p><ol><li><p>创建一个新的类，可以将这个类称之为工厂类。对于简单工厂模式来说，只需要一个工厂类。</p></li><li><p>在这个工厂类中添加一个公共的成员函数，通过这个函数来创建我们需要的对象，这个函数一般被称为工厂函数。</p></li><li><p>在使用使&#x3D;时，首先创建一个工厂类对象，通过这个对象调用工厂函数，这样就可以生产出一个指定类型的实例对象。</p></li></ol><p>简单工厂模式代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><br><span class="hljs-comment">//产品的父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractSmile</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">transform</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">ability</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">AbstractSmile</span>() &#123; &#125;;<span class="hljs-comment">//虚析构函数，在实现多态时使用</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepSmile</span> :<span class="hljs-keyword">public</span> AbstractSmile <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transform</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span><span class="hljs-comment">//检查子类中重写函数是否拼写正确</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Sheep&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ability</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;1111&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LionSmile</span> :<span class="hljs-keyword">public</span> AbstractSmile<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transform</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span><span class="hljs-comment">//检查子类中重写函数是否拼写正确</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Lion&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ability</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;2222&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BatSmile</span> :<span class="hljs-keyword">public</span> AbstractSmile<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transform</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span><span class="hljs-comment">//检查子类中重写函数是否拼写正确</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Bat&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ability</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;3333&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">Type</span>:<span class="hljs-type">char</span>&#123; Sheep,Lion,Bat &#125;;<span class="hljs-comment">//强类型枚举</span><br><span class="hljs-comment">//工厂类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">simpleFactory</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">AbstractSmile* <span class="hljs-title">creatSmile</span><span class="hljs-params">(Type type)</span></span><br><span class="hljs-function"></span>&#123;<br>AbstractSmile* ptr = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">switch</span> (type)<br>&#123;<br><span class="hljs-keyword">case</span> Type::Sheep:<br>ptr = <span class="hljs-keyword">new</span> SheepSmile;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Type::Bat:<br>ptr = <span class="hljs-keyword">new</span> BatSmile;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Type::Lion:<br>ptr = <span class="hljs-keyword">new</span> LionSmile;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ptr;<br>&#125;<br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>simpleFactory* fctory = <span class="hljs-keyword">new</span> simpleFactory;<br>AbstractSmile* obj = fctory-&gt;<span class="hljs-built_in">creatSmile</span>(Type::Lion);<br>obj-&gt;<span class="hljs-built_in">ability</span>();<br>obj-&gt;<span class="hljs-built_in">transform</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-工厂模式"><a href="#3-工厂模式" class="headerlink" title="3.工厂模式"></a>3.工厂模式</h3><p>工厂类与子类为一对一。</p><p><img src="/image-10.png" alt="alt text"></p><p>工厂模式代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs #include<iostream>"><br><br>//产品的父类<br>class AbstractSmile<br>&#123;<br>public:<br>virtual void transform() = 0;<br>virtual void ability() = 0;<br>virtual ~AbstractSmile() &#123; &#125;;//虚析构函数，在实现多态时使用<br>&#125;;<br><br>class SheepSmile :public AbstractSmile<br>&#123;<br>public:<br>void transform()override//检查子类中重写函数是否拼写正确<br>&#123;<br>std::cout &lt;&lt; &quot;Sheep&quot; &lt;&lt; std::endl;<br>&#125;<br>void ability()override<br>&#123;<br>std::cout &lt;&lt; &quot;1111&quot; &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br>class LionSmile :public AbstractSmile<br>&#123;<br>public:<br>void transform()override//检查子类中重写函数是否拼写正确<br>&#123;<br>std::cout &lt;&lt; &quot;Lion&quot; &lt;&lt; std::endl;<br>&#125;<br>void ability()override<br>&#123;<br>std::cout &lt;&lt; &quot;2222&quot; &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br>class BatSmile :public AbstractSmile<br>&#123;<br>public:<br>void transform()override//检查子类中重写函数是否拼写正确<br>&#123;<br>std::cout &lt;&lt; &quot;Bat&quot; &lt;&lt; std::endl;<br>&#125;<br>void ability()override<br>&#123;<br>std::cout &lt;&lt; &quot;3333&quot; &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><br>//工厂类基类<br>class AbstractFactory<br>&#123;<br>public:<br>virtual AbstractSmile* creatSmile() = 0;<br>~AbstractFactory() &#123; &#125;;<br>&#125;;<br><br>class SheepFactory:public AbstractFactory<br>&#123;<br>public:<br>AbstractSmile* creatSmile()override<br>&#123;<br>return  new SheepSmile;<br>&#125;<br>~SheepFactory() &#123;&#125;;<br>&#125;;<br><br>class LionFactory :public AbstractFactory<br>&#123;<br>public:<br>AbstractSmile* creatSmile()override<br>&#123;<br><br>return  new LionSmile;<br>&#125;<br>~LionFactory() &#123;&#125;;<br>&#125;;<br><br>class BatFactory :public AbstractFactory<br>&#123;<br>public:<br>AbstractSmile* creatSmile()override<br>&#123;<br>return new BatSmile;<br>&#125;<br>~BatFactory() &#123;&#125;;<br>&#125;;<br><br>int main()<br>&#123;<br>AbstractFactory* factory = new BatFactory;<br>AbstractSmile* obj=factory-&gt;creatSmile();<br>obj-&gt;transform();<br>obj-&gt;ability();<br>delete factory;<br>delete obj;<br>factory = nullptr;<br>obj = nullptr;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-抽象工厂模式"><a href="#4-抽象工厂模式" class="headerlink" title="4.抽象工厂模式"></a>4.抽象工厂模式</h3><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要指定它们具体的类。这种模式通常涉及一个工厂接口和多个具体工厂类，每个具体工厂类负责创建一组相关的对象。</p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">//船体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShipBody</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> std::string <span class="hljs-title">getBody</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">ShipBody</span>() &#123; &#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WoodBody</span>:<span class="hljs-keyword">public</span> ShipBody<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">std::string <span class="hljs-title">getBody</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;WOOD&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IronBody</span> :<span class="hljs-keyword">public</span> ShipBody<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">std::string <span class="hljs-title">getBody</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;Iron&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MetalBody</span> :<span class="hljs-keyword">public</span> ShipBody<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">std::string <span class="hljs-title">getBody</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;Metal&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//武器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> std::string <span class="hljs-title">getWeapon</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Weapon</span>() &#123; &#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Gun</span>:<span class="hljs-keyword">public</span> Weapon<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getWeapon</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Gun&quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Laser</span> :<span class="hljs-keyword">public</span> Weapon<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getWeapon</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Gun&quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cannon</span> :<span class="hljs-keyword">public</span> Weapon<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getWeapon</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Gun&quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//动力</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> std::string <span class="hljs-title">getEngine</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Engine</span>() &#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span> :<span class="hljs-keyword">public</span> Engine<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getEngine</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;human&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Diesel</span> :<span class="hljs-keyword">public</span> Engine<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getEngine</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;Diesel&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Nuclear</span> :<span class="hljs-keyword">public</span> Engine<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getEngine</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;Nuclear&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//船</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Ship</span>(ShipBody* body, Engine* Engine, Weapon* weapon) :<span class="hljs-built_in">m_engine</span>(Engine), <span class="hljs-built_in">m_body</span>(body), <span class="hljs-built_in">m_weapon</span>(weapon) &#123;&#125;;<br>~<span class="hljs-built_in">Ship</span>()<br>&#123;<br><span class="hljs-keyword">delete</span> m_body;<br><span class="hljs-keyword">delete</span> m_engine;<br><span class="hljs-keyword">delete</span> m_weapon;<br>&#125;<br><span class="hljs-function">std::string <span class="hljs-title">getProperty</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = m_body-&gt;<span class="hljs-built_in">getBody</span>() + m_engine-&gt;<span class="hljs-built_in">getEngine</span>() + m_weapon-&gt;<span class="hljs-built_in">getWeapon</span>();<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>ShipBody* m_body;<br>Engine* m_engine;<br>Weapon* m_weapon;<br>&#125;;<br><br><span class="hljs-comment">//工厂类抽象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFactory</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> Ship* <span class="hljs-title">creatShip</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">AbstractFactory</span>() &#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicFactory</span>:<span class="hljs-keyword">public</span> AbstractFactory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Ship* <span class="hljs-title">creatShip</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>Ship* ship = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Ship</span>(<span class="hljs-keyword">new</span> WoodBody,<span class="hljs-keyword">new</span> Human, <span class="hljs-keyword">new</span> Gun);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;basicship&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> ship;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StrandFactory</span> :<span class="hljs-keyword">public</span> AbstractFactory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Ship* <span class="hljs-title">creatShip</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>Ship* ship = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Ship</span>(<span class="hljs-keyword">new</span> IronBody, <span class="hljs-keyword">new</span> Diesel, <span class="hljs-keyword">new</span> Cannon);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Strandship&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> ship;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UltimataFactory</span> :<span class="hljs-keyword">public</span> AbstractFactory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Ship* <span class="hljs-title">creatShip</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>Ship* ship = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Ship</span>(<span class="hljs-keyword">new</span> MetalBody, <span class="hljs-keyword">new</span> Nuclear, <span class="hljs-keyword">new</span> Laser);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Ultimataship&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> ship;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>AbstractFactory* factory = <span class="hljs-keyword">new</span> UltimataFactory;<br>Ship* ship = factory-&gt;<span class="hljs-built_in">creatShip</span>();<br>std::cout&lt;&lt;ship-&gt;<span class="hljs-built_in">getProperty</span>();<br><span class="hljs-keyword">delete</span> factory;<br><span class="hljs-keyword">delete</span> ship;<br>factory = <span class="hljs-literal">NULL</span>;<br>ship = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>定义：装饰模式又叫包装模式，通过一种对客户端透明的方式来扩展对象功能，是继承关系的一种替代。</p><p>装饰模式包含以下角色：</p><ul><li><p>Component（组件）：定义了一个对象接口，可以动态地添加功能。这通常是一个接口或抽象类，它定义了基本对象和装饰器共同实现的方法。</p></li><li><p>ConcreteComponent（具体组件）：实现了组件接口，是需要动态添加功能的原始对象。</p></li><li><p>Decorator（装饰器）：继承自组件接口，并持有一个指向具体组件的引用。装饰器类具有与组件接口相同的方法，以便可以透明地包装具体组件。通常，装饰器类中会包含一个或多个组件的实例，并通过这些实例添加额外的功能。</p></li><li><p>ConcreteDecorator（具体装饰器）：扩展自装饰器类，实现了具体的功能扩展。每个具体装饰器类都可以添加一种或多种功能，从而实现不同的组合。</p></li></ul><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//一般情况下用继承实现类的功能扩展</span><br><span class="hljs-comment">//装饰模式，可以动态给一个类增加功能</span><br><br><span class="hljs-comment">//抽象英雄类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractHero</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">showStatus</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">AbstractHero</span>()&#123;&#125;<br><br><span class="hljs-type">int</span> m_HP;<br><span class="hljs-type">int</span> m_DF;<br><span class="hljs-type">int</span> m_AT;<br><span class="hljs-type">int</span> m_MP;<br>&#125;;<br><br><span class="hljs-comment">//具体英雄</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span>:<span class="hljs-keyword">public</span> AbstractHero<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Hero</span>()<br>&#123;<br> m_HP=<span class="hljs-number">0</span>;<br> m_DF=<span class="hljs-number">0</span>;<br> m_AT=<span class="hljs-number">0</span>;<br> m_MP=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showStatus</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;血量：&quot;</span> &lt;&lt; m_HP &lt;&lt; <span class="hljs-string">&quot;法力：&quot;</span> &lt;&lt; m_MP &lt;&lt; <span class="hljs-string">&quot;攻击力:&quot;</span> &lt;&lt; m_AT &lt;&lt; <span class="hljs-string">&quot;防御：&quot;</span> &lt;&lt; m_DF &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//抽象装饰类,英雄穿上装饰物</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractEquipment</span> :<span class="hljs-keyword">public</span> AbstractHero<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">AbstractEquipment</span>(AbstractHero* hero) :<span class="hljs-built_in">m_hero</span>(hero) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">showStatus</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br><br>AbstractHero* m_hero;<br>&#125;;<br><br><span class="hljs-comment">//具体装饰类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KuangTu</span> :<span class="hljs-keyword">public</span> AbstractEquipment<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">KuangTu</span>(AbstractHero* hero) :<span class="hljs-built_in">AbstractEquipment</span>(hero) &#123;&#125;<br><span class="hljs-comment">//增加额外功能</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddDF</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_AT = <span class="hljs-keyword">this</span>-&gt;m_hero-&gt;m_AT;<br><span class="hljs-keyword">this</span>-&gt;m_HP = <span class="hljs-keyword">this</span>-&gt;m_hero-&gt;m_HP;<br><span class="hljs-keyword">this</span>-&gt;m_DF = <span class="hljs-keyword">this</span>-&gt;m_hero-&gt;m_DF+<span class="hljs-number">30</span>;<br><span class="hljs-keyword">this</span>-&gt;m_MP = <span class="hljs-keyword">this</span>-&gt;m_hero-&gt;m_MP;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>-&gt;m_hero;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showStatus</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">AddDF</span>();<br>std::cout &lt;&lt; <span class="hljs-string">&quot;血量：&quot;</span> &lt;&lt; m_HP &lt;&lt; <span class="hljs-string">&quot;法力：&quot;</span> &lt;&lt; m_MP &lt;&lt; <span class="hljs-string">&quot;攻击力:&quot;</span> &lt;&lt; m_AT &lt;&lt; <span class="hljs-string">&quot;防御：&quot;</span> &lt;&lt; m_DF &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>AbstractHero* hero = <span class="hljs-keyword">new</span> Hero;<br>hero = <span class="hljs-keyword">new</span> <span class="hljs-built_in">KuangTu</span>(hero);<br>hero-&gt;<span class="hljs-built_in">showStatus</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式是一种行为型设计模式，用于定义对象间的一对多依赖关系，使得当一个对象的状态发生变化时，所有依赖于它的对象都会得到通知并自动更新。在观察者模式中，存在两种角色：观察者和被观察者。</p><ul><li><p>观察者（Observer）：观察者是依赖于被观察者状态的对象。它定义了一个更新接口，当被观察者的状态发生变化时，观察者会收到通知并执行相应的更新操作。</p></li><li><p>被观察者（Subject）：被观察者维护一系列观察者，并提供注册、删除和通知观察者的方法。当被观察者的状态发生变化时，它会遍历所有注册的观察者，并调用它们的更新方法。</p></li></ul><p>观察者模式的功能包括：</p><ul><li><p>松耦合：观察者模式通过定义了一种松耦合的关系，使得被观察者和观察者之间的依赖关系变得更加灵活。被观察者不需要知道观察者的具体实现，而只需要维护一个观察者列表即可。</p></li><li><p>动态注册与删除：观察者模式允许动态地向被观察者注册和删除观察者，从而使得系统更具有灵活性和可扩展性。</p></li><li><p>通知机制：当被观察者的状态发生变化时，它会自动通知所有注册的观察者，使得观察者能够及时地获取到最新的状态信息并进行相应的更新操作。</p></li></ul><p>观察者模式适用于需要实现对象之间的一对多依赖关系，并且希望在对象状态发生变化时能够自动通知其他对象进行相应处理的场景。</p><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-comment">//抽象英雄</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractHero</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">updata</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">AbstractHero</span>()&#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroA</span>:<span class="hljs-keyword">public</span> AbstractHero<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">HeroA</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;heroA&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updata</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;heroA stop&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroB</span> :<span class="hljs-keyword">public</span> AbstractHero<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">HeroB</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;HeroB&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updata</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;HeroB stop&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroC</span> :<span class="hljs-keyword">public</span> AbstractHero<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">HeroC</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;HeroC&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updata</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;HeroC stop&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br><br><br><span class="hljs-comment">//抽象观察对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractBoss</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">addHreo</span><span class="hljs-params">(AbstractHero* hero)</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">deleteHero</span><span class="hljs-params">(AbstractHero* hero)</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BoosA</span>:<span class="hljs-keyword">public</span> AbstractBoss<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addHreo</span><span class="hljs-params">(AbstractHero* hero)</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>heroList.<span class="hljs-built_in">push_back</span>(hero);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteHero</span><span class="hljs-params">(AbstractHero* hero)</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>heroList.<span class="hljs-built_in">remove</span>(hero);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (std::list&lt;AbstractHero*&gt;::iterator it=heroList.<span class="hljs-built_in">begin</span>(); it != heroList.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>(*it)-&gt;<span class="hljs-built_in">updata</span>();<br>&#125;<br> &#125;<br><br><br><span class="hljs-keyword">private</span>:<br>std::list&lt;AbstractHero*&gt; heroList;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">text</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>AbstractHero* heroA = <span class="hljs-keyword">new</span> HeroA;<br>AbstractHero* heroB = <span class="hljs-keyword">new</span> HeroB;<br>AbstractHero* heroC = <span class="hljs-keyword">new</span> HeroC;<br><br>AbstractBoss* boss = <span class="hljs-keyword">new</span> BoosA;<br>boss-&gt;<span class="hljs-built_in">addHreo</span>(heroA);<br>boss-&gt;<span class="hljs-built_in">addHreo</span>(heroB);<br>boss-&gt;<span class="hljs-built_in">addHreo</span>(heroC);<br><br>boss-&gt;<span class="hljs-built_in">notify</span>();<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">text</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式是一种行为型设计模式，它允许在运行时根据情况选择算法的行为。它将一组算法封装成独立的对象，并使它们可相互替换。这种模式使得算法可独立于使用它的客户而变化，从而使得系统更加灵活。</p><p>在策略模式中，存在三种核心角色：</p><ul><li><p>上下文（Context）：上下文是使用策略的对象，它维持一个对策略对象的引用，并在需要时将任务委托给策略对象来执行。上下文通常会提供一个接口或方法，允许客户端设置或更改当前使用的策略。</p></li><li><p>策略（Strategy）：策略是定义算法族的抽象，它通常是一个接口或抽象类，其中声明了一个执行算法的方法。具体的策略类实现了这个接口，每个具体策略类实现了一个特定的算法。</p></li><li><p>具体策略（Concrete Strategy）：具体策略是策略的具体实现，它实现了策略接口定义的算法。当上下文需要执行某个算法时，它会将任务委托给具体的策略对象</p></li></ul><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>状态模式是一种行为型设计模式，它允许对象在内部状态改变时改变它的行为。这种模式将对象的状态封装成独立的类，并将对状态的处理委托给表示该状态的对象。这样做的结果是，当对象的状态发生改变时，对象的行为也会随之改变，而不需要在对象内部包含大量的条件语句来判断不同的状态。</p><p>在状态模式中，存在以下几个核心角色：</p><ul><li><p>环境（Context）：环境是包含状态的对象，它维持一个对当前状态对象的引用，并将请求委托给当前状态对象处理。环境可以通过设置当前状态对象来改变它的状态。</p></li><li><p>状态（State）：状态是表示对象的状态的接口或抽象类，它定义了对象在特定状态下的行为。具体的状态类实现了这个接口，每个具体状态类对应一个特定的状态，并实现了该状态下的行为。</p></li><li><p>具体状态（Concrete State）：具体状态是状态的具体实现，它实现了状态接口定义的行为。当环境处于特定状态时，它会将请求委托给当前具体状态对象处理。</p></li></ul><p>状态模式的功能包括：</p><ul><li><p>封装变化：状态模式将对象的状态封装成独立的类，使得状态的变化对客户端透明，从而降低了对象之间的耦合度。</p></li><li><p>简化条件语句：状态模式通过将对象的行为委托给表示状态的对象来处理，避免了使用大量的条件语句来判断对象的状态，使得代码更加简洁和易于理解。</p></li><li><p>提高可维护性：由于状态的变化被封装在独立的状态类中，因此可以轻松地添加新的状态或修改现有的状态，而不会影响到其他部分的代码，从而提高了系统的可维护性。</p></li><li><p>促进扩展性：状态模式使得状态的变化和行为的变化可以独立地扩展，从而使得系统更加灵活和可扩展。</p></li></ul><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//状态模式</span><br><span class="hljs-comment">//假设有一个电梯控制系统，电梯可以处于三种状态：</span><br><span class="hljs-comment">//停止状态、运行状态和故障状态。我们可以使用状态模式来管理这些状态。</span><br><br><span class="hljs-comment">//状态基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">State</span>()&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//停止状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StopState</span>:<span class="hljs-keyword">public</span> State<br>&#123;<br><span class="hljs-keyword">public</span>:<br>     <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br> std::cout &lt;&lt; <span class="hljs-string">&quot;Elevator is stopped&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//运行</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RunState</span> :<span class="hljs-keyword">public</span> State<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Elevator is running&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//故障</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakdownState</span> :<span class="hljs-keyword">public</span> State<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Elevator is breakdown&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//电梯类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Elevator</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Elevator</span>(State* state):<span class="hljs-built_in">m_state</span>(state)&#123;&#125;<br><span class="hljs-function">State* <span class="hljs-title">setState</span><span class="hljs-params">(State* state)</span> </span>&#123; <span class="hljs-keyword">return</span> m_state = state; &#125;<br><span class="hljs-function">State* <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_state; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">requst</span><span class="hljs-params">()</span> </span>&#123; m_state-&gt;<span class="hljs-built_in">handle</span>(); &#125;<br><br><br><span class="hljs-keyword">private</span>:<br>State* m_state;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;  <br>State* state = <span class="hljs-keyword">new</span> StopState;<br>Elevator* etr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Elevator</span>(state);<br>etr-&gt;<span class="hljs-built_in">requst</span>();<br><br>etr-&gt;<span class="hljs-built_in">setState</span>(<span class="hljs-keyword">new</span> RunState);<br>etr-&gt;<span class="hljs-built_in">requst</span>();<br><br>etr-&gt;<span class="hljs-built_in">setState</span>(<span class="hljs-keyword">new</span> BreakdownState);<br>etr-&gt;<span class="hljs-built_in">requst</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>访问者模式是一种行为设计模式，其主要目的是在不改变被访问元素的类的前提下，定义作用于这些元素的新操作。它将操作和数据结构分离，使得添加新操作变得简单，同时也支持对已有操作的修改。这种模式通过在元素类中引入一个接受访问者的方法，从而使得元素可以接受不同类型的访问者对象访问。</p><p>主要组成部分：</p><ul><li><p>访问者（Visitor）：定义了对元素对象的新操作，可以通过多态性来实现不同的具体访问者。</p></li><li><p>元素（Element）：定义了一个接受访问者对象的接口，通常是一个接受访问者对象作为参数的方法。</p></li><li><p>具体访问者（Concrete Visitor）：实现了访问者定义的操作，针对不同类型的元素可以有不同的具体访问者。</p></li><li><p>具体元素（Concrete Element）：实现了元素接口，通常是元素类的子类，负责实现接受访问者的方法。</p></li></ul><p>功能：</p><ul><li><p>分离关注点：访问者模式将数据结构和操作分离开来，使得数据结构可以专注于自身的组织和管理，而操作可以专注于具体的功能实现。</p></li><li><p>新增操作：通过添加新的具体访问者类，可以在不修改现有元素类的情况下，为元素添加新的操作。</p></li><li><p>易于扩展：在需要对元素进行新操作时，只需添加一个新的具体访问者类，不需要修改元素类或其他现有代码</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择排序</title>
    <link href="/2024/03/07/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/03/07/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>每一次从待排序的数据元素中选出最小（或最大）的一个元素，将元素存放在序列的起始位置（即与待排序列的第一个元素的位置进行交换）。然后再从剩余的未排序元素中寻找最小（或最大）的元素，然后存放在已排序序列的末尾。以此类推，直到将待排序的元素全部排完。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以数组[2,9,5,3,7,4]为例</p><p>第一次排序</p><p>在所有元素中找出最小的与第一个元素进行交换</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">结果：2<span class="hljs-number"> 9 </span>5<span class="hljs-number"> 3 </span>7 4<br></code></pre></td></tr></table></figure><p>第二次排序</p><p>在待排序序列中找的最小的与待排序序列第一个元素进行交换</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">结果：<span class="hljs-number"> 2 </span>3<span class="hljs-number"> 5 </span>9<span class="hljs-number"> 7 </span>4<br></code></pre></td></tr></table></figure><p>重复上述操作即可得到有序数列</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li>循环实现<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//循环实现</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span>;<br><span class="hljs-comment">//选择排序,每循环一遍，找出最小的数与第一个数进行交换，需要执行n-1轮</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span> ; i++)<br>&#123;<br><span class="hljs-type">int</span> min = nums[i];<br><span class="hljs-type">int</span> a = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; n ; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (nums[j] &lt; min)<br>&#123;<br>min = nums[j];<br>a = j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (a != i)<br><span class="hljs-built_in">swap</span>(nums[i], nums[a]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>递归实现<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DSelectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> n)</span><span class="hljs-comment">//递归实现</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span>;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录最小值的位置</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (nums[i] &lt; nums[a])<br>&#123;<br>a = i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (a != <span class="hljs-number">0</span>)<br><span class="hljs-built_in">swap</span>(nums[a], nums[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">DSelectSort</span>(nums + <span class="hljs-number">1</span>, --n);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="选择排序的优化"><a href="#选择排序的优化" class="headerlink" title="选择排序的优化"></a>选择排序的优化</h2><p>选择排序的优化，每一次排序，将最小值和最大值都找出来，最小的放在最左边，最大的放在最右边。优化后循环的次数减半。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs excel">void ImproveSelectSort(<span class="hljs-built_in">int</span>* nums, <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>)<br>&#123;<br><span class="hljs-built_in">if</span> (<span class="hljs-built_in">n</span> &lt; <span class="hljs-number">2</span>)<br>return;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span> = <span class="hljs-number">0</span>, <span class="hljs-built_in">right</span> = <span class="hljs-built_in">n</span> - <span class="hljs-number">1</span>;//利用双指针解决<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">max</span>=<span class="hljs-number">0</span> ,<span class="hljs-built_in">min</span>= <span class="hljs-number">0</span>;//记录最大值和最小值的位置<br>while (<span class="hljs-built_in">left</span> &lt; <span class="hljs-built_in">right</span>)<br>&#123;<br><span class="hljs-built_in">min</span> = <span class="hljs-built_in">max</span> = <span class="hljs-built_in">left</span>;<br>for (<span class="hljs-built_in">int</span> i = <span class="hljs-built_in">left</span>; i &lt; <span class="hljs-built_in">right</span>; i++)<br>&#123;<br><span class="hljs-built_in">if</span> (nums[i] &lt; nums[<span class="hljs-built_in">min</span>])<br>&#123;<br><span class="hljs-built_in">min</span> = i;<br>&#125;<br><span class="hljs-built_in">if</span> (nums[i] &gt; nums[<span class="hljs-built_in">max</span>])<br>&#123;<br><span class="hljs-built_in">max</span> = i;<br>&#125;<br>&#125;<br><span class="hljs-built_in">if</span> (<span class="hljs-built_in">min</span> != <span class="hljs-built_in">left</span>)<br>swap(nums[<span class="hljs-built_in">min</span>], nums[<span class="hljs-built_in">left</span>]);<br>//如果最大的值是最左边的值，在上面交换时，将nums[<span class="hljs-built_in">left</span>]的值与nums[<span class="hljs-built_in">min</span>]交换<br>//此时应将<span class="hljs-built_in">max</span>=<span class="hljs-built_in">min</span><br><span class="hljs-built_in">if</span> (<span class="hljs-built_in">max</span> == <span class="hljs-built_in">left</span>)<br><span class="hljs-built_in">max</span> = <span class="hljs-built_in">min</span>;<br><span class="hljs-built_in">if</span> (<span class="hljs-built_in">max</span> != <span class="hljs-built_in">right</span>)<br>swap(nums[<span class="hljs-built_in">max</span>], nums[<span class="hljs-built_in">right</span>]);<br><span class="hljs-built_in">left</span>++;<br><span class="hljs-built_in">right</span>--;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>最优时间复杂度、最坏时间复杂度、平均时间复杂度都是O(n^2),因为无论你是否完全有序，还是完全逆序，都需要找出后边的最小值进行替换。</p>]]></content>
    
    
    <categories>
      
      <category>排序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序</title>
    <link href="/2024/03/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/03/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序原理"><a href="#冒泡排序原理" class="headerlink" title="冒泡排序原理"></a>冒泡排序原理</h2><ol><li><p>比较相邻的两个元素，如果后一个元素大于前一个元素则交换他们。</p></li><li><p>对数据中的每一对相邻元素做同样的工作，在第一次遍历完成后，数据尾部应为最大值</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>对n个数据在进行n-1趟遍历后（最坏情况），可得到有序数列。</p></li></ol><p><img src="/image-8.png" alt="alt text"></p><h2 id="冒泡排序优化"><a href="#冒泡排序优化" class="headerlink" title="冒泡排序优化"></a>冒泡排序优化</h2><p>在实际的使用中，很多情况下冒泡排序并不需要执行n-1趟，此时在程序中就会出现时间损耗，所以我们可以在程序中定义一个值，用于记录每一趟循环中数据交换的次数，如果值为0，则序列已经有序，结束循环，从而降低时间损耗。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">BubblingSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//循环</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//nums为传入的数组，n为数据长度，循环执行n-1轮，每轮相邻的两个数据相互比较，较大的数据向后交换</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i &gt;<span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录循环种交换位置的次数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i ; j++)<span class="hljs-comment">//对0到i之间的数据进行比较，i之后的元素为已经排序好的</span><br>&#123;<br><span class="hljs-keyword">if</span> (nums[j] &gt; nums[j+<span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-keyword">auto</span> tmp = nums[j+<span class="hljs-number">1</span>];<br>nums[j+<span class="hljs-number">1</span>] = nums[j];<br>nums[j] = tmp;<br>a++;<br>&#125;<br>&#125;<br>x++;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>)<span class="hljs-comment">//当a等于零时,即当前数组已经有序时，跳出循环，降低时间损耗</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;循环了&quot;</span> &lt;&lt; x &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> nums;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DBubblingSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)<span class="hljs-comment">//边界条件</span><br><span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (nums[i] &gt; nums[i+<span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-keyword">auto</span> tmp = nums[i];<br>nums[i] = nums[i+<span class="hljs-number">1</span>];<br>nums[i+<span class="hljs-number">1</span>] = nums[i];<br>&#125;<br>&#125;<br><span class="hljs-built_in">DBubblingSort</span>(nums, --n);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>排序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树</title>
    <link href="/2024/02/28/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2024/02/28/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="1-树的定义"><a href="#1-树的定义" class="headerlink" title="1.树的定义"></a>1.树的定义</h2><p>一棵树是由n（n&gt;0）个元素组成的有限集合，其中：</p><p>（1）每个元素称为结点（node）</p><p>（2）有一个特定的结点，称为根结点或树根（root）</p><p>（3）除根节点外，其余节点能分成m（m&gt;&#x3D;0）个互不相交的有限集合 T(0)-T(m-1)。其中的每一个子集都是一个树，这些集合被称为这棵树的子树。</p><p><img src="/image-3.png" alt="Alt text"></p><h2 id="2-树的基本概念"><a href="#2-树的基本概念" class="headerlink" title="2.树的基本概念"></a>2.树的基本概念</h2><p>(1) 树是由递归定义的</p><p>(2) 一棵树中至少有1个结点。这个节点就是根节点，他没有前驱，其余每个节点都有且只有一个前驱节点。每个节点可以有任意个后继结点。因此，树是非线性结构，但也是有序结构。</p><p>(3) 一个节点的子树个数称为这个结点的度，例如上图根节点的度为2。度为0的结点被称为叶结点；度不为0的结点被称为分支结点，根以外的分支节点称为内部结点，树中各节点的度的最大值称为这棵树的度。</p><p>(4) 在用图形表示的树形结构中，对两个用线段（我们称为树枝）连接的相关联的结点，称上端结点为下端节点的父节点，反之为子节点。</p><p>(5) 定义一棵树的根的层次为1，其他结点的层次等于他的父节点的层次加一。一棵树中所有节点的层次的最大值称为这棵树的深度。</p><p>(6) 对于树中任意两个不同的结点，从一个结点出发一定能到达另一个结点。</p><p>(7) m（m&gt;&#x3D;0）棵树的结合称为森林。</p><h2 id="3-树的遍历"><a href="#3-树的遍历" class="headerlink" title="3.树的遍历"></a>3.树的遍历</h2><h3 id="1-先序遍历"><a href="#1-先序遍历" class="headerlink" title="(1) 先序遍历"></a>(1) 先序遍历</h3><p>先访问根节点，然后根据左右先后顺序遍历各子树</p><p><img src="/image-4.png" alt="Alt text"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xl">void MyTree&lt;T&gt;::PreOrder(TreeNode&lt;T&gt; *<span class="hljs-keyword">tree</span>)<br>&#123;<br><span class="hljs-comment">//先序遍历 先访问根节点，然后按照左右先后顺序遍历各子树（根左右）</span><br>    <span class="hljs-comment">//使用递归实现</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">tree</span> != NULL)<br>&#123;<br>display(<span class="hljs-keyword">tree</span>);<br>P<span class="hljs-function"><span class="hljs-title">reOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_left);<br>P<span class="hljs-function"><span class="hljs-title">reOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="(2) 中序遍历"></a>(2) 中序遍历</h3><p>先访问左子树，然后访问根，最后访问右子树（左根右）</p><p><img src="/image-5.png"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">void MyTree&lt;T&gt;::InOrder(TreeNode&lt;T&gt;* <span class="hljs-keyword">tree</span>)<br>&#123;<br><span class="hljs-comment">//中序遍历 先访问左子树，然后访问根，最后访问右子树（左根右）</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">tree</span> != NULL)<br>&#123;<br>I<span class="hljs-function"><span class="hljs-title">nOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_left);<br>display(<span class="hljs-keyword">tree</span>);<br>I<span class="hljs-function"><span class="hljs-title">nOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-后序遍历"><a href="#3-后序遍历" class="headerlink" title="(3) 后序遍历"></a>(3) 后序遍历</h3><p>先访问左子树，然后访问右子树，最后访问根</p><p><img src="/image-6.png" alt="Alt text"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">void MyTree&lt;T&gt;::BackOrder(TreeNode&lt;T&gt; *<span class="hljs-keyword">tree</span>)<br>&#123;<br><span class="hljs-comment">//后序遍历 先访问左子树，再访问右子树，最后访问根</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">tree</span> != NULL)<br>&#123;<br>B<span class="hljs-function"><span class="hljs-title">ackOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_left);<br>B<span class="hljs-function"><span class="hljs-title">ackOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_right);<br>display(<span class="hljs-keyword">tree</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于二叉树的遍历可以去看<a href="http://t.csdnimg.cn/O3uhb%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E8%AE%B2%E7%9A%84%E5%BE%88%E8%AF%A6%E7%BB%86%E3%80%82">http://t.csdnimg.cn/O3uhb这篇文章，讲的很详细。</a></p><h2 id="4-二叉树的插入"><a href="#4-二叉树的插入" class="headerlink" title="4.二叉树的插入"></a>4.二叉树的插入</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br>TreeNode&lt;T&gt;* z = new TreeNode&lt;T&gt;(key, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr);<br><span class="hljs-keyword">if</span> (z == <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>insert(_tree, z);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;*&amp; <span class="hljs-symbol">tree, <span class="hljs-symbol">TreeNode</span></span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">z</span>)<br>&#123;<br>TreeNode&lt;T&gt;* y = NULL;<br>TreeNode&lt;T&gt;* x =tree;<br><span class="hljs-keyword">while</span> (x != <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-comment">//当x为空时停止循环，此时x无子节点，为叶子结点</span><br>y = x;<br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; x-&gt;_key)<br>&#123;<br>x = x-&gt;_left;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>x = x-&gt;_right;<br>&#125;<br>&#125;<br>z-&gt;_parent = y;<span class="hljs-comment">//将z结点的父节点设置为y,及就是x结点</span><br><span class="hljs-keyword">if</span> (y == NULL)<br>&#123;<br>tree = z;<br>&#125;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; y-&gt;_key)<br>&#123;<br>y-&gt;_left = z;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>y-&gt;_right = z;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-二叉树结点的删除"><a href="#5-二叉树结点的删除" class="headerlink" title="5.二叉树结点的删除"></a>5.二叉树结点的删除</h2><p>在删除二叉树节点时，可能会出现三种情况：</p><p>(1) 所删除的结点无子节点<br>当删除的结点无子结点时，我们只需将他的父节点指向它的指针置空即可。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">//pa为cur的父节点</span><br><span class="hljs-function"><span class="hljs-title">if</span> (cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span> == NULL &amp;&amp; cur-&gt;</span>_right == NULL)<span class="hljs-comment">//无子结点</span><br>&#123;<br>        <span class="hljs-comment">//判断cur是父节点的左右哪一个子节点</span><br><span class="hljs-function"><span class="hljs-title">if</span> (pa-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> &gt; cur-&gt;</span>_key)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_left = NULL;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_right = NULL;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> (2) 所删除的结点只有一个子节点<br>当删除的结点有一个子节点时，我们只需将G节点的父节点设置为C,将C结点的左子节点设置为G</p><p><img src="/image-7.png" alt="Alt text"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span> != NULL &amp;&amp; cur-&gt;</span>_right == NULL)<span class="hljs-comment">//只有一个子节点</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">le</span> = cur-&gt;</span>_left;<br><span class="hljs-function"><span class="hljs-title">le</span>-&gt;</span>_parent = pa;<br><span class="hljs-function"><span class="hljs-title">if</span> (pa-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> &gt; cur-&gt;</span>_key)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_right = le;<br>&#125;<br>&#125;<br>   <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span>==NULL&amp;&amp;cur-&gt;</span>_right!=NULL)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">le</span> = cur-&gt;</span>_right;<br><span class="hljs-function"><span class="hljs-title">le</span>-&gt;</span>_parent = pa;<br><span class="hljs-function"><span class="hljs-title">if</span> (pa-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> &gt; cur-&gt;</span>_key)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_right = le;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> (3) 所删除的结点有两个子节点<br> 当删除的结点有两个子节点时，我们可以使用其左子树的最大结点或者右子树的最小结点进行替换。</p> <figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span> != NULL &amp;&amp; cur-&gt;</span>_right != NULL)<span class="hljs-comment">//两个子节点都存在</span><br>&#123;<br><span class="hljs-comment">//有两种方法:去左子树的最大元素代替，或者去右子树的最小元素代替,这里使用第二种</span><br><span class="hljs-function"><span class="hljs-title">le</span> = Min(cur-&gt;</span>_right);<br><span class="hljs-function"><span class="hljs-title">cur</span>-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> = le-&gt;</span>_key;<br><span class="hljs-function"><span class="hljs-title">cur</span>-&gt;</span>_<span class="hljs-function"><span class="hljs-title">right</span> = remove(le,le-&gt;</span>_key);<span class="hljs-comment">//递归删除右子树，直到无子结点，或者只有一个子结点</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-完整代码"><a href="#6-完整代码" class="headerlink" title="6.完整代码"></a>6.完整代码</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">#pragma once<br>#include&lt;iostream&gt;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">TreeNode</span> &#123;<br><span class="hljs-keyword">public</span>:<br>T _key;<br>TreeNode* _left;<span class="hljs-comment">//左子节点</span><br>TreeNode* _right;<span class="hljs-comment">//右子节点</span><br>TreeNode* _parent;<span class="hljs-comment">//父节点</span><br>TreeNode(T k = <span class="hljs-number">0</span>, TreeNode* l = <span class="hljs-literal">null</span>ptr, TreeNode* r = <span class="hljs-literal">null</span>ptr, TreeNode* p = <span class="hljs-literal">null</span>ptr) :_key(k), _left(l), _right(r), _parent(p)<br>&#123;<br>;<br>&#125;<br>&#125;;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">MyTree</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>MyTree();<br>~MyTree();<br><br><span class="hljs-built_in">void</span> insert(T key);<span class="hljs-comment">//将key插入二叉树中</span><br><span class="hljs-built_in">void</span> PreOrder();<span class="hljs-comment">//前序遍历</span><br><span class="hljs-built_in">void</span> InOrder();<span class="hljs-comment">//中序遍历</span><br><span class="hljs-built_in">void</span> BackOrder();<span class="hljs-comment">//后序遍历</span><br><span class="hljs-built_in">bool</span> IsEmpty();<span class="hljs-comment">//判断二叉树是否为空</span><br>TreeNode&lt;T&gt;* Find(T key);<span class="hljs-comment">//查找指定结点</span><br><span class="hljs-built_in">void</span> remove(T key);<span class="hljs-comment">//删除结点,通过该函数生成一个结点</span><br><span class="hljs-built_in">void</span> destory();<span class="hljs-comment">//销毁二叉树</span><br><span class="hljs-keyword">private</span>:<br><br>TreeNode&lt;T&gt;* _tree;<span class="hljs-comment">//根节点</span><br><br><span class="hljs-built_in">void</span> insert(TreeNode&lt;T&gt;*&amp; tree, TreeNode&lt;T&gt;* z);<span class="hljs-comment">//将key插入二叉树中</span><br><span class="hljs-built_in">void</span> PreOrder(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//前序遍历</span><br><span class="hljs-built_in">void</span> InOrder(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//中序遍历</span><br><span class="hljs-built_in">void</span> BackOrder(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//后序遍历</span><br><span class="hljs-built_in">bool</span> IsEmpty(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//判断二叉树是否为空</span><br>TreeNode&lt;T&gt;* Min(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//查找以tree为根节点的二叉树的最小结点</span><br>TreeNode&lt;T&gt;* Max(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//查找以tree为根节点的二叉树的最大结点</span><br>TreeNode&lt;T&gt;* Find(TreeNode&lt;T&gt;* tree, T key);<span class="hljs-comment">//查找指定结点</span><br>TreeNode&lt;T&gt;* remove(TreeNode&lt;T&gt;* tree, T z);<span class="hljs-comment">//删除结点</span><br><span class="hljs-built_in">void</span> destory(TreeNode&lt;T&gt;*&amp; tree);<span class="hljs-comment">//销毁二叉树</span><br><span class="hljs-built_in">void</span> display(TreeNode&lt;T&gt; *z);<br>&#125;;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">MyTree</span>() :<span class="hljs-symbol">_tree</span>(<span class="hljs-symbol">nullptr</span>) &#123;&#125;;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::~<span class="hljs-symbol">MyTree</span>()<br>&#123;<br><span class="hljs-comment">//destory();</span><br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">bool</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">IsEmpty</span>()<br>&#123;<br><span class="hljs-keyword">return</span> _tree == <span class="hljs-literal">null</span>ptr;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br>TreeNode&lt;T&gt;* z = new TreeNode&lt;T&gt;(key, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr);<br><span class="hljs-keyword">if</span> (z == <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>insert(_tree, z);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;*&amp; <span class="hljs-symbol">tree, <span class="hljs-symbol">TreeNode</span></span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">z</span>)<br>&#123;<br>TreeNode&lt;T&gt;* y = NULL;<br>TreeNode&lt;T&gt;* x =tree;<br><span class="hljs-keyword">while</span> (x != <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-comment">//当x为空时停止循环，此时x无子节点，为叶子结点</span><br>y = x;<br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; x-&gt;_key)<br>&#123;<br>x = x-&gt;_left;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>x = x-&gt;_right;<br>&#125;<br>&#125;<br>z-&gt;_parent = y;<span class="hljs-comment">//将z结点的父节点设置为y,及就是x结点</span><br><span class="hljs-keyword">if</span> (y == NULL)<br>&#123;<br>tree = z;<br>&#125;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; y-&gt;_key)<br>&#123;<br>y-&gt;_left = z;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>y-&gt;_right = z;<br>&#125;<br><br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">PreOrder</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;先序遍历：&quot;</span>;<br>PreOrder(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">PreOrder</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt; *<span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//先序遍历 先访问根节点，然后按照左右先后顺序遍历各子树（根左右）</span><br><span class="hljs-keyword">if</span> (tree != NULL)<br>&#123;<br>display(tree);<br>PreOrder(tree-&gt;_left);<br>PreOrder(tree-&gt;_right);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">InOrder</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (_tree == NULL)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;tree is empty&quot;</span> &lt;&lt; std::endl;<br>exit(<span class="hljs-number">1</span>);<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;中序遍历：&quot;</span>;<br>InOrder(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">InOrder</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//中序遍历 先访问左子树，然后访问根，最后访问右子树（左根右）</span><br><span class="hljs-keyword">if</span> (tree != NULL)<br>&#123;<br>InOrder(tree-&gt;_left);<br>display(tree);<br>InOrder(tree-&gt;_right);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">BackOrder</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;后序遍历：&quot;</span>;<br>BackOrder(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">BackOrder</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt; *<span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//后序遍历 先访问左子树，再访问右子树，最后访问根</span><br><span class="hljs-keyword">if</span> (tree != NULL)<br>&#123;<br>BackOrder(tree-&gt;_left);<br>BackOrder(tree-&gt;_right);<br>display(tree);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">display</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">z</span>)<br>&#123;<br>std::cout &lt;&lt; z-&gt;_key &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Max</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-keyword">while</span> (tree-&gt;_right != NULL)<br>&#123;<br>tree = tree-&gt;_right;<br>&#125;<br><span class="hljs-keyword">return</span> tree;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Min</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-keyword">while</span> (tree-&gt;_left != NULL)<br>&#123;<br>tree = tree-&gt;_left;<br>&#125;<br><span class="hljs-keyword">return</span> tree;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Find</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br><span class="hljs-keyword">return</span> Find(_tree, key);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Find</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree, <span class="hljs-symbol">T</span></span> <span class="hljs-symbol">key</span>)//查找指定结点<br>&#123;<br><span class="hljs-keyword">if</span> (tree == NULL || tree-&gt;_key == key)<br>&#123;<br><span class="hljs-keyword">return</span> tree;<br>&#125;<br><span class="hljs-keyword">if</span> (tree-&gt;_key &gt; key)<br>&#123;<br><span class="hljs-keyword">return</span> Find(tree-&gt;_left, key);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> Find(tree-&gt;_right, key);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">remove</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br>remove(_tree, key);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt; ::<span class="hljs-symbol">remove</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree, <span class="hljs-symbol">T</span></span> <span class="hljs-symbol">z</span>)//删除结点<br>&#123;<br>TreeNode&lt;T&gt;* cur = Find(tree, z);<br><span class="hljs-keyword">if</span> (cur == _tree)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Tree can&#x27;t be delete&quot;</span> &lt;&lt; std::endl;<br>exit(<span class="hljs-number">1</span>);<br>&#125;<br><br>TreeNode&lt;T&gt;* pa = cur-&gt;_parent;<span class="hljs-comment">//找到父节点</span><br>TreeNode&lt;T&gt;* le = NULL;<br><br><span class="hljs-keyword">if</span> (cur-&gt;_left == NULL &amp;&amp; cur-&gt;_right == NULL)<span class="hljs-comment">//无子结点</span><br>&#123;<br><span class="hljs-keyword">if</span> (pa-&gt;_key &gt; cur-&gt;_key)<br>&#123;<br>pa-&gt;_left = NULL;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pa-&gt;_right = NULL;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;_left != NULL &amp;&amp; cur-&gt;_right == NULL)<span class="hljs-comment">//只有一个子节点</span><br>&#123;<br>le = cur-&gt;_left;<br>le-&gt;_parent = pa;<br><span class="hljs-keyword">if</span> (pa-&gt;_key &gt; cur-&gt;_key)<br>&#123;<br>pa-&gt;_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pa-&gt;_right = le;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur-&gt;_left==NULL&amp;&amp;cur-&gt;_right!=NULL)<br>&#123;<br>le = cur-&gt;_right;<br>le-&gt;_parent = pa;<br><span class="hljs-keyword">if</span> (pa-&gt;_key &gt; cur-&gt;_key)<br>&#123;<br>pa-&gt;_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pa-&gt;_right = le;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;_left != NULL &amp;&amp; cur-&gt;_right != NULL)<span class="hljs-comment">//两个子节点都存在</span><br>&#123;<br><span class="hljs-comment">//有两种方法:去左子树的最大元素代替，或者去右子树的最小元素代替,这里使用第二种</span><br>le = Min(cur-&gt;_right);<br>cur-&gt;_key = le-&gt;_key;<br>cur-&gt;_right = remove(le,le-&gt;_key);<span class="hljs-comment">//递归删除右子树，直到无子结点，或者只有一个子结点</span><br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">destory</span>()<br>&#123;<br>destory(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">destory</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;*&amp; <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//使用递归调用对左子树和右子树都进行销毁</span><br><span class="hljs-keyword">if</span> (tree == NULL)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//在递归调用中不应使用return</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  if (tree-&gt;_left != NULL)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        return destroy(tree-&gt;_left);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    if (tree-&gt;_right != NULL)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        return destroy(tree-&gt;_right);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>destory(tree-&gt;_left);<br>destory(tree-&gt;_right);<br>delete tree;<br>tree = NULL;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/01/21/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/01/21/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>是一种物理存储结构上非连续，非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针连接顺序实现的。</p><ul><li>优点<ul><li>按需申请空间，不用了就释放空间</li><li>头部中间插入数据不需要挪动数据</li><li>不存在空间浪费</li></ul></li><li>缺点： <ul><li>每一个数据，都要存一个指针去链接后面节点，不支持随机访问。</li></ul></li></ul><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。<br><img src="/image-1.png" alt="Alt text"><br>输入：head &#x3D; [1,2,3,4,5]<br>输出：[5,4,3,2,1]</p><ul><li>解题思路：<br>定义三个ListNode*类型，cur为链表，pre为反转后的链表，next用于存储下一节点。<br><br>初始时原链表为：1-&gt;2-&gt;3-&gt;4-&gt;5,反转后的链表和next都为空<br>进入循环后，令next-&gt;2;此时cur-&gt;1结点，令cur-&gt;next&#x3D;nullptr，则原链表变为[1];<br>令pre &#x3D; cur则反转后的链表为[1],再将cur &#x3D; next则原链表为[2,3,4,5]<br>进行第二次循环时，next-&gt;3结点此时令cur-&gt;next&#x3D;pre,则原链表为2-&gt;1<br>pre &#x3D; cur  cur &#x3D; next在执行这俩条语句后，pre为2-&gt;1，实现了初步反转。<br>继续循换可实现整体反转，时间复杂度为O(N)，空间复杂度O(1)。<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    ListNode* reverseList(ListNode* head) &#123;<br>ListNode* pre = nullptr;<br>ListNode* cur = head;<br>ListNode* <span class="hljs-keyword">next</span> = nullptr;<br><span class="hljs-keyword">while</span> (cur)<br>&#123;<br><span class="hljs-keyword">next</span> = cur-&gt;<span class="hljs-keyword">next</span>;<br>cur-&gt;<span class="hljs-keyword">next</span> = pre;<br>pre = cur;<br>        cur = <span class="hljs-keyword">next</span>;<br>&#125;<br><span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a>876. 链表的中间结点</h2><p>给你单链表的头结点 head ，请你找出并返回链表的中间结点。<br>如果有两个中间结点，则返回第二个中间结点。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class Solution &#123;<br>public:<br>    ListNode* middleNode(ListNode* head) &#123;<br>        ListNode <span class="hljs-number">*c</span><span class="hljs-attribute">ur</span>=head;<br>        short <span class="hljs-attribute">hl</span>=0;//链表长度<br>        <span class="hljs-keyword">while</span>(cur)<br>        &#123;<br>            ++hl;<br>            <span class="hljs-attribute">cur</span>=cur-&gt;next;<br>        &#125;<br>        <span class="hljs-attribute">cur</span>=head;<br>        int <span class="hljs-attribute">num</span>=0;<br>        <span class="hljs-keyword">while</span>(num&lt;hl/2)<br>        &#123;<br>            ++num;<br>            <span class="hljs-attribute">cur</span>=cur-&gt;next;<br>        &#125;<br>        return cur;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>顺序表</title>
    <link href="/2024/01/18/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2024/01/18/%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p>顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。<br>缺陷： </p><ul><li>1.空间不够了需要扩容，扩容是有消耗</li><li>2.头部或中间位置的插入删除需要挪动，挪动数据也是有消耗的</li><li>3.为了避免频繁扩容，每次都是以倍数去扩容，存在空间浪费</li></ul><h1 id="顺序表的实现"><a href="#顺序表的实现" class="headerlink" title="顺序表的实现"></a>顺序表的实现</h1><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">SeqList</span> &#123;<br><span class="hljs-keyword">public</span>:<br>T *m_a;<br><span class="hljs-built_in">int</span> m_size;<span class="hljs-comment">//表示数组中数据的个数</span><br><span class="hljs-built_in">int</span> m_capacity;<span class="hljs-comment">//数组容量</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">SeqList</span>()<span class="hljs-comment">//默认构造函数</span><br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_a = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">this</span>-&gt;m_size = <span class="hljs-keyword">this</span>-&gt;m_capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">SeqList</span>(SeqList&amp; sl)<span class="hljs-comment">//拷贝构造函数，深拷贝</span><br>&#123;<br>m_size = sl.m_size;<br>m_capacity = sl.m_size;<br>* m_a = <span class="hljs-keyword">new</span> T[sl.m_size];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>m_a[i] = sl[i];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2.析构函数"></a>2.析构函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">~<span class="hljs-built_in">SeqList</span>() <span class="hljs-comment">//析构函数</span><br>&#123; <br><span class="hljs-keyword">if</span> (m_a)<br>&#123;<br><span class="hljs-keyword">delete</span>[] m_a;<br>&#125;<br>m_a = <span class="hljs-literal">nullptr</span>;<br>m_size = m_capacity = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-初始化和扩容函数"><a href="#3-初始化和扩容函数" class="headerlink" title="3.初始化和扩容函数"></a>3.初始化和扩容函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//初始化和扩容</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CheckCapacity</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_size == m_capacity || m_capacity == <span class="hljs-number">0</span>)<span class="hljs-comment">//如果满了或者没初始化</span><br>&#123;<br><span class="hljs-type">int</span> newcapacity = (<span class="hljs-number">0</span> == m_capacity) ? <span class="hljs-number">5</span> : <span class="hljs-number">2</span> * m_capacity;<br>T* tmp = <span class="hljs-keyword">new</span> T[newcapacity];<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>tmp[j++] = m_a[i];<br>&#125;<br>m_a = tmp;<br>tmp = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">delete</span>[]tmp;<span class="hljs-comment">//释放指针，避免野指针</span><br>m_capacity = newcapacity;<span class="hljs-comment">//更新容量</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-基本函数"><a href="#4-基本函数" class="headerlink" title="4.基本函数"></a>4.基本函数</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getSize</span>()</span> &#123; <span class="hljs-keyword">return</span> m_size; &#125;<span class="hljs-comment">//返回顺序表元素个数</span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getCapacity</span>()</span> &#123; <span class="hljs-keyword">return</span> m_capacity; &#125;<span class="hljs-comment">//返回顺序表最大容量</span><br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">Empty</span>()</span> &#123; <span class="hljs-keyword">if</span> (m_size == m_capacity) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<span class="hljs-comment">//判断顺序表是否为空</span><br></code></pre></td></tr></table></figure><h2 id="5-头插"><a href="#5-头插" class="headerlink" title="5.头插"></a>5.头插</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListPushFront</span><span class="hljs-params">(T n)</span><span class="hljs-comment">//头插</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">CheckCapacity</span>();<span class="hljs-comment">//检查容量</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =m_size<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br>m_a[i + <span class="hljs-number">1</span>] = m_a[i - <span class="hljs-number">1</span>];<br>&#125;<br>m_a[<span class="hljs-number">0</span>] = n;<br>m_size++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-头删"><a href="#6-头删" class="headerlink" title="6.头删"></a>6.头删</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SeqListPopFront</span>()<span class="hljs-comment">//头删</span></span><br>&#123;<br>assert (!Empty());<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>m_a[i] = m_a[i + <span class="hljs-number">1</span>];<br>&#125;<br>m_size--;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-尾插"><a href="#7-尾插" class="headerlink" title="7.尾插"></a>7.尾插</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListPushBack</span><span class="hljs-params">( T n)</span> <span class="hljs-comment">//尾插</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">CheckCapacity</span>();<span class="hljs-comment">//检查容量</span><br>m_a[m_size] = n;<br>m_size++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-尾删"><a href="#8-尾删" class="headerlink" title="8.尾删"></a>8.尾删</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">SeqListPopBack</span>() <span class="hljs-comment">//尾删</span><br>&#123;<br><span class="hljs-built_in">assert</span>(!Empty());<br>m_size--;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-打印函数"><a href="#9-打印函数" class="headerlink" title="9.打印函数"></a>9.打印函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintSeqList</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_size == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;该顺序表为空&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;m_a[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;]=&quot;</span> &lt;&lt; m_a[i] &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>&#125;<br>std::cout &lt;&lt; std::endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)<span class="hljs-comment">//双指针解法</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[i]!=val)<br>            &#123;<br>                nums[n]=nums[i];<br>                n++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//题目链接https://leetcode.cn/problems/remove-element/</span><br></code></pre></td></tr></table></figure><h2 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h2><p>给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。</p><p>考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：<br>更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。<br>返回 k 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,i=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;nums.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[left]!=nums[i])<br>            &#123;<br>                nums[left+<span class="hljs-number">1</span>]=nums[i];<br>                left++;<br>            &#125;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>顺序表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Socket网络编程</title>
    <link href="/2023/11/29/c-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/11/29/c-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Socket套接字函数"><a href="#Socket套接字函数" class="headerlink" title="Socket套接字函数"></a>Socket套接字函数</h1><p>在使用scoket进行网络编程时应首先包含#include&lt;winsock2.h&gt;（Windows环境下）头文件，linux环境可以通过man socket命令在终端查询所在的头文件。</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stan">uersname:~$ man socket<br><br>SOCKET(<span class="hljs-number">2</span>)                  Linux Programmer&#x27;s Manual                 SOCKET(<span class="hljs-number">2</span>)<br><br>NAME<br>       socket - create an endpoint <span class="hljs-keyword">for</span> communication<br><br>SYNOPSIS<br>       <span class="hljs-meta">#include &lt;<span class="hljs-string">sys</span>/<span class="hljs-string">types.h</span>&gt;          /* S<span class="hljs-string">ee</span> NOTES */</span><br>       <span class="hljs-meta">#include &lt;<span class="hljs-string">sys</span>/<span class="hljs-string">socket.h</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="1-socket函数"><a href="#1-socket函数" class="headerlink" title="1.socket函数"></a>1.socket函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//创建一个套接字</span><br><span class="hljs-type">int</span> socket(<span class="hljs-type">int</span> af,<span class="hljs-type">int</span> <span class="hljs-keyword">type</span>,<span class="hljs-type">int</span> protocol)<br></code></pre></td></tr></table></figure><p>socket函数有三个参数：</p><ul><li>af：使用的地址族协议<ul><li>AF_INET：使用ipv4形式的ip地址;</li><li>AF_INET6：使用ipv6形式的ip地址;</li></ul></li><li>type:<ul><li>SOCK_SOTREAM：使用流式的地址传输协议;</li><li>SOCK_DGRAM：用报式的地址传输协议;</li></ul></li><li>portocol: 一般写0，使用默认的协议即可<ul><li>SOCK_SOTREAM：tcp;</li><li>SOCK_DGRAM：udp;</li></ul></li></ul><p>关于socket函数的返回值：socket函数的返回值是一个int类型文件描述符，成功返回文件描述符，失败则返回-1。（这里说明一下，在网络编程中，几乎所有的函数失败的返回值都是-1）</p><h2 id="2-bind函数"><a href="#2-bind函数" class="headerlink" title="2.bind函数"></a>2.bind函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//用于将文件描述符与ip地址和端口进行绑定</span><br><span class="hljs-type">int</span> bind(socket s,<span class="hljs-keyword">const</span> sockaddr* addr,<span class="hljs-type">int</span> <span class="hljs-built_in">len</span>)<br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>addr：将绑定的端口和ip地址记录在这个结构体中;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//这里说明一下sockaddr数据结构</span><br><br><span class="hljs-comment">// 在写数据的时候不好用</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr</span> &#123;<br><span class="hljs-type">sa_family_t</span> sa_family;       <span class="hljs-comment">// 地址族协议, ipv4</span><br><span class="hljs-type">char</span>        sa_data[<span class="hljs-number">14</span>];     <span class="hljs-comment">// 端口(2字节) + IP地址(4字节) + 填充(8字节)</span><br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span><br>&#123;<br>    <span class="hljs-type">sa_family_t</span> sin_family;<span class="hljs-comment">/* 地址族协议: AF_INET */</span><br>    <span class="hljs-type">in_port_t</span> sin_port;         <span class="hljs-comment">/* 端口, 2字节-&gt; 大端  */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">in_addr</span> sin_addr;    <span class="hljs-comment">/* IP地址, 4字节 -&gt; 大端  */</span><br>&#125;;  <br></code></pre></td></tr></table></figure></li><li>len：addr结构体的大小，可以使用sizeof()函数获得;</li><li>返回值：成功返回0，失败则返回-1;</li></ul><h2 id="3-listen函数"><a href="#3-listen函数" class="headerlink" title="3.listen函数"></a>3.listen函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用于给监听的套接字设置监听</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(socket s,<span class="hljs-type">int</span> backlog)</span><br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>backlog：设置最大连接请求数量，最大128;</li><li>返回值：成功返回0，失败则返回-1;</li></ul><h2 id="4-accept函数"><a href="#4-accept函数" class="headerlink" title="4.accept函数"></a>4.accept函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//接受连接</span><br><span class="hljs-type">int</span> accept(socket s,sockaddr* addr,<span class="hljs-type">int</span> <span class="hljs-built_in">len</span>)<br><span class="hljs-comment">//当无连接请求时，处于阻塞状态</span><br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>addr：用于存储建立连接的客户端信息(ip地址和端口等);</li><li>len：addr的大小;</li><li>返回值：成功则返回用于通信的文件描述符，失败返回-1;</li></ul><h2 id="5-connection函数"><a href="#5-connection函数" class="headerlink" title="5.connection函数"></a>5.connection函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//客户端建立连接函数</span><br><span class="hljs-type">int</span> connection(socket s,<span class="hljs-keyword">const</span> sockaddr* addr,<span class="hljs-type">int</span> <span class="hljs-built_in">len</span>)<br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>addr: 用于存储建立连接的客户端信息(ip地址和端口等);</li><li>len: addr的大小;</li><li>返回值：成功则返回0，失败返回-1;</li></ul><h2 id="6-send-write函数"><a href="#6-send-write函数" class="headerlink" title="6.send&#x2F;write函数"></a>6.send&#x2F;write函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//发送数据</span><br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">send</span><span class="hljs-params">(socket s,<span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf,<span class="hljs-type">size_t</span> len,<span class="hljs-type">int</span> flags)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">write</span><span class="hljs-params">(socket s, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> len)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>s：用于通信的文件描述符，为accept()的返回值</li><li>buf：传入参数，用于存储发送的数据</li><li>len：buf的容量</li><li>flags: 特殊的属性, 一般不使用, 指定为 0</li><li>返回值： 发送成功返回实际的字节数与len相等，失败返回0</li></ul><h2 id="7-read-recv函数"><a href="#7-read-recv函数" class="headerlink" title="7.read&#x2F;recv函数"></a>7.read&#x2F;recv函数</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//接收数据</span><br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> size)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">recv</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> size, <span class="hljs-type">int</span> flags)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>s：用于通信的文件描述符，为accept()的返回值</li><li>buf：传出参数，用于存储接受的数据</li><li>len：buf的容量</li><li>flags: 特殊的属性, 一般不使用, 指定为 0</li><li>返回值： 大于零接受成功；等于0对方断开连接；-1失败</li></ul><p>如果连接没有断开，接收端接收不到数据，接收数据的函数会阻塞等待数据到达，数据到达后函数解除阻塞，开始接收数据，当发送端断开连接，接收端无法接收到任何数据，但是这时候就不会阻塞了，函数直接返回0。</p><h1 id="服务器段实现"><a href="#服务器段实现" class="headerlink" title="服务器段实现"></a>服务器段实现</h1><p>以下代码均在windows环境下实现</p><h2 id="1-初始化网络环境"><a href="#1-初始化网络环境" class="headerlink" title="1.初始化网络环境"></a>1.初始化网络环境</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//在windows环境下需要加载socket套接字环境</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-comment">//网络环境初始化</span><br>WSADATA data;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ref = <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;data);<span class="hljs-comment">// 返回值: 成功返回0，失败返回SOCKET_ERROR。</span><br><span class="hljs-comment">//一般都使用MAKEWORD(2, 2)</span><br></code></pre></td></tr></table></figure><h2 id="2-创建socket的套接字"><a href="#2-创建socket的套接字" class="headerlink" title="2.创建socket的套接字"></a>2.创建socket的套接字</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//创建socket套接字，返回一个int的文件描述符</span><br>    <span class="hljs-type">int</span> sock_fd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-comment">//ipv4和流式协议</span><br><span class="hljs-keyword">if</span> (sock_fd==SOCKET_ERROR)<span class="hljs-comment">//判断是否成功</span><br>&#123;<br>std::cerr &lt;&lt; socket &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-对文件描述符绑定ip和端口"><a href="#3-对文件描述符绑定ip和端口" class="headerlink" title="3.对文件描述符绑定ip和端口"></a>3.对文件描述符绑定ip和端口</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">   <span class="hljs-comment">//在vs环境下使用inet_addr()必须添加</span><br>   <span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS 这个宏</span><br>   sockaddr_in addr;<span class="hljs-comment">//创建一个sockaddr_in类型的对象，用于存储ip和端口</span><br>addr.sin_family = AF_INET;<span class="hljs-comment">//设置地址协议为ipv4</span><br>addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">8080</span>);<span class="hljs-comment">//设置端口</span><br>addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;10.0.0.1&quot;</span>);<span class="hljs-comment">//绑定本机的ip，可以在命令窗口查看</span><br>   <span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(addr);<br><span class="hljs-type">int</span> bef = <span class="hljs-built_in">bind</span>(sock_fd, (sockaddr*)&amp;addr, len);<br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;绑定失败&quot;</span>;<br>std::cerr &lt;&lt; bind &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-设置监听"><a href="#4-设置监听" class="headerlink" title="4.设置监听"></a>4.设置监听</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">   <span class="hljs-comment">//用于监听有无客户端发起连接请求</span><br>   <span class="hljs-type">int</span> bef = <span class="hljs-built_in">listen</span>(sock_fd, <span class="hljs-number">128</span>);<span class="hljs-comment">//最大可连接数为128</span><br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;设置监听失败&quot;</span>;<br>std::cerr &lt;&lt;listen &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-接受连接"><a href="#5-接受连接" class="headerlink" title="5.接受连接"></a>5.接受连接</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">   <span class="hljs-comment">//当有客户端建立连接，则通过accept()建立连接，返回一个用于通信的文件描述符</span><br>   sockaddr_in cliaddr;<span class="hljs-comment">//用于存储客户机的信息</span><br><span class="hljs-type">int</span> caddlen = <span class="hljs-built_in">sizeof</span>(cliaddr);<br><span class="hljs-type">int</span> afd = <span class="hljs-built_in">accept</span>(sock_fd, (sockaddr*)&amp;cliaddr, &amp;caddlen);<br><span class="hljs-keyword">if</span> (afd == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;连接失败&quot;</span>;<br>std::cerr &lt;&lt; accept &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-通信"><a href="#6-通信" class="headerlink" title="6.通信"></a>6.通信</h2><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)<br>&#123;<br><span class="hljs-keyword">char</span> buff[<span class="hljs-number">1024</span>];<span class="hljs-comment">//创建一个数组，用于存储客户端发来的信息</span><br>memset(buff, <span class="hljs-number">0</span>, sizeof(buff));<br><span class="hljs-keyword">int</span> rlen=recv(afd, buff, sizeof(buff), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (rlen &gt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client is :&quot;</span> &lt;&lt; buff &lt;&lt; std::endl;<br>send(afd, buff, rlen,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rlen == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;客户端断开连接&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cerr &lt;&lt; recv &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-关闭文件描述符"><a href="#7-关闭文件描述符" class="headerlink" title="7.关闭文件描述符"></a>7.关闭文件描述符</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">   <span class="hljs-built_in">closesocket</span>(sock_fd);<br><span class="hljs-built_in">closesocket</span>(afd);<br><span class="hljs-comment">// 注销Winsock相关库</span><br><span class="hljs-built_in">WSACleanup</span>();<br></code></pre></td></tr></table></figure><h2 id="8-完整代码"><a href="#8-完整代码" class="headerlink" title="8.完整代码"></a>8.完整代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS <span class="hljs-comment">//vs环境下必须定义，否则无法使用inet_addr函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1.网络环境初始化</span><br>WSADATA data;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ref = <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;data);<span class="hljs-comment">// 返回值: 成功返回0，失败返回SOCKET_ERROR。</span><br><span class="hljs-keyword">if</span> (ref == SOCKET_ERROR)<br>&#123;<br>std::cerr &lt;&lt; <span class="hljs-string">&quot;初始化网络失败&quot;</span> &lt;&lt; WSAStartup &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> std::cout &lt;&lt; <span class="hljs-string">&quot;初始化网络环境&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-comment">//2.创建监听字节符</span><br><span class="hljs-comment">//const int sock_fd = socket(AF_INET, SOCK_STREAM, 0);//ipv4</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> sock_fd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-comment">//ipv4</span><br><span class="hljs-keyword">if</span> (sock_fd==SOCKET_ERROR)<br>&#123;<br>std::cerr &lt;&lt; socket &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//3.绑定端口合ip</span><br>sockaddr_in addr;<br>addr.sin_family = AF_INET;<span class="hljs-comment">//设置地址协议为ipv4</span><br>addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">5678</span>);<span class="hljs-comment">//设置端口</span><br>addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;192.168.179.1&quot;</span>);<span class="hljs-comment">//绑定本机的ip</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;server is ip:&quot;</span> &lt;&lt;<span class="hljs-string">&quot;192.168.179.1&quot;</span>  &lt;&lt; <span class="hljs-string">&quot;     server is port : &quot;</span> &lt;&lt; <span class="hljs-built_in">ntohs</span>(addr.sin_port) &lt;&lt; std::endl;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(addr);<br><span class="hljs-type">int</span> bef = ::<span class="hljs-built_in">bind</span>(sock_fd, (sockaddr*)&amp;addr, len);<br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;绑定失败&quot;</span>;<br>std::cerr &lt;&lt; bind &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//4.设置监听</span><br>bef = <span class="hljs-built_in">listen</span>(sock_fd, <span class="hljs-number">128</span>);<br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;设置监听失败&quot;</span>;<br>std::cerr &lt;&lt;listen &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//5.接受连接</span><br>sockaddr_in cliaddr;<span class="hljs-comment">//用于存储客户机的信息</span><br><span class="hljs-type">int</span> caddlen = <span class="hljs-built_in">sizeof</span>(cliaddr);<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> afd = ::<span class="hljs-built_in">accept</span>(sock_fd, (sockaddr*)&amp;cliaddr, &amp;caddlen);<br><span class="hljs-keyword">if</span> (afd == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;连接失败&quot;</span>;<br>std::cerr &lt;&lt; accept &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client is ip&quot;</span> &lt;&lt;cliaddr.sin_addr.S_un.S_addr&lt;&lt;<span class="hljs-string">&quot;client is port &quot;</span>&lt;&lt;cliaddr.sin_port &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-comment">//6.接收发送数据</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-type">char</span> buff[<span class="hljs-number">1024</span>];<br><span class="hljs-built_in">memset</span>(buff, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buff));<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> rlen=<span class="hljs-built_in">recv</span>(afd, buff, <span class="hljs-built_in">sizeof</span>(buff), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (rlen &gt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client is :&quot;</span> &lt;&lt; buff &lt;&lt; std::endl;<br><span class="hljs-built_in">send</span>(afd, buff, rlen,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rlen == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;客户端断开连接&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cerr &lt;&lt; recv &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">closesocket</span>(sock_fd);<br><span class="hljs-built_in">closesocket</span>(afd);<br><span class="hljs-comment">// 注销Winsock相关库</span><br><span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h1><p>在网络编程中，客户端的实现比服务端简单，只有3个步骤</p><ul><li>创建socket套接字：与服务端一致</li><li>建立连接<pre><code class="hljs">  sockaddr_in addr;  addr.sin_family = AF_INET;  addr.sin_port= htons(8080);//与服务器端口一直  addr.sin_addr.S_un.S_addr= inet_addr(&quot;10.0.0.1&quot;);//绑定本机的ip  int conct_fd = connect(sock_fd, (sockaddr*)&amp;addr, sizeof(addr));  if (conct_fd == SOCKET_ERROR)  &#123;      std::cout &lt;&lt; &quot;连接失败&quot;;      return -1;  &#125;  else std::cout &lt;&lt; &quot;连接成功&quot; &lt;&lt; std::endl;</code></pre></li><li>通信：与服务端一致</li></ul><p>注意：在客户端也需要初始化网络环境，以及结束时关闭文件描述符和注销socket相关库</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/28/hello-world/"/>
    <url>/2023/11/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
