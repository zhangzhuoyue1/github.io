<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2024/03/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/03/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><p>总体来说设计模式分为三大类：</p><p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>设计模式是基于面向对象的语言使用。</p><h2 id="UML图（unified-modeling-language）"><a href="#UML图（unified-modeling-language）" class="headerlink" title="UML图（unified modeling language）"></a>UML图（unified modeling language）</h2><p>面向对象设计主要使用的就是UML类图，类图用于描述系统中所包含的类，以及他们之间的相互关系，帮助人们简化对系统的理解，他是系统分析和设计阶段的产物，也是系统编码和测试的重要模型依据。</p><p><img src="/image-9.png" alt="alt text"></p><p>UML图分为上中下三部分：上层是类名，中间层是属性（类的成员变量），下层是方法（类的成员函数）</p><ul><li>可见性：+ 表述 public 、 # 表述 protected 、- 表示 private 、__下划线表述static</li><li>属性的表示方法：【可见性】 【属性名称】：【类型】 &#x3D; （缺省值）</li><li>方法的表示方法：【可见性】 【方法名称】（【参数名：参数类型….】）：（返回值类型）</li></ul><p>如果我们定义一个类是抽象类（勒种有纯虚函数），在画UML图的时候，类名需要使用泄题显示。虚函数的表示方法跟随类名也是使用斜体表示，纯虚函数则需在最后加上&#x3D;0.</p><p>类与类之间的关系：</p><ul><li>继承关系：带空心三角形的实线，有空心三角的一端指向父类。</li><li>关联关系：通常将一个类的对象，作为另一个类的成员变量。有三种关联关系单向关联、双向关联、自关联（链表）（用带箭头的或不带箭头的实线）。</li><li>聚合关系：表示整体与部分的关系。在聚合关系中，成员对象是整体的一部分，但是成员对象可以脱离整体对象存在。聚合关系用空心带菱形的实线表示。</li><li>组合关系：表示整体与部分的关系，整体对象与成员对象具有相同的生命周期。用带实心的菱形实线表示。</li><li>依赖关系：<ol><li>将一个类的对象作为另一个类中方法的参数</li><li>在一个类的方法中将另一个类的对象作为其的局部变量</li><li>在一个类的方法中调用另一个类的静态方法</li></ol></li></ul><p>关联关系、聚合关系、组合关系之间的区别：</p><ul><li>关联和聚合的区别主要在语义上：关联的两个对象一般是平等的，而聚合一般是不平等的。</li><li>聚合和组合的区别则在语义和现实都有差别：<ol><li>组合的两个对象之间的生命周期有很大关联，聚合则不是。</li><li>一般来说组合对象不能脱离组合对象独立存在,而且也只能属于一个组合。被聚合的对象可以属于多个聚合对象。</li></ol></li></ul><h2 id="设计模式的三原则"><a href="#设计模式的三原则" class="headerlink" title="设计模式的三原则"></a>设计模式的三原则</h2><ol><li>单一职责原则：在设计一个类时尽量使其功能单一，及让他担任的职责单一。</li><li>开放封闭原则：对于扩展是开放的，对于修改时封闭的。及就是对于已经存在的类尽量不修改。</li><li>依赖倒转原则：高层模块不应该依赖底层模块，两个都应依赖抽象。抽象不应该依赖细节，细节应该依赖抽象。</li></ol><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h3><p>在一个项目中，全局范围内，某个类的实例对象有且只有一个，通过这个唯一实例向其他模块提供数据的全局访问，这种模式叫做单例模式，典型应用为任务队列。</p><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">//定义一个单例模式的任务队列</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskQueue</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//禁用它的拷贝构造函数</span><br><span class="hljs-comment">//TaskQueue() = delete;</span><br><span class="hljs-built_in">TaskQueue</span>(<span class="hljs-type">const</span> TaskQueue&amp; t) = <span class="hljs-keyword">delete</span>;<br>TaskQueue&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> TaskQueue&amp; t) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-type">static</span> TaskQueue* <span class="hljs-title">getTaskQ</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_taskQ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;111&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//两种都可</span><br><span class="hljs-built_in">TaskQueue</span>() = <span class="hljs-keyword">default</span>;<br><span class="hljs-comment">//TaskQueue(const TaskQueue&amp; t) = default;</span><br><span class="hljs-comment">//TaskQueue&amp; operator=(const TaskQueue&amp; t) = default;</span><br><span class="hljs-comment">//当前无法通过构造函数去实例化对象，只能是通过类名访问静态属性或方法</span><br><span class="hljs-type">static</span> TaskQueue* m_taskQ;<br>&#125;;<br><br>TaskQueue* TaskQueue::m_taskQ = <span class="hljs-keyword">new</span> TaskQueue;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>TaskQueue* TaskQ = TaskQueue::<span class="hljs-built_in">getTaskQ</span>();<br>TaskQ-&gt;<span class="hljs-built_in">print</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么可以的访问静态成员变量和函数呢？</p><p> static成员变量属于类（被存放在数据段中），不属于某个具体的对象（具体对象的内存是分配在堆中的），即使创建多个对象，也只为该变量分配一次内存，所有对象使用的都是这份内存中的数据。</p><ol><li>通过作用域运算符::直接访问静态成员 类名::静态成员 </li><li>通过对象.静态成员</li><li>通过指针-&gt;静态成员</li></ol><h4 id="懒汉模式和饿汉模式"><a href="#懒汉模式和饿汉模式" class="headerlink" title="懒汉模式和饿汉模式"></a>懒汉模式和饿汉模式</h4><ol><li>饿汉模式：定义类的时候创建单例对象。及上述TaskQueue类</li><li>懒汉模式：什么时候使用，在实例化对象<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//懒汉模式相较于饿汉模式更节省空间，但有线程安全问题，需在实例化时加锁</span><br><span class="hljs-function"><span class="hljs-type">static</span> TaskQueue* <span class="hljs-title">getTaskQ</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <br>        <span class="hljs-comment">//加锁</span><br>        m_mutex.<span class="hljs-built_in">lock</span>();<br>        <span class="hljs-keyword">if</span>(m_taskQ!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            m_taskQ=<span class="hljs-keyword">new</span> TaskQueue;<br>        &#125;<br>        m_mutex.<span class="hljs-built_in">unlock</span>();<br><span class="hljs-keyword">return</span> m_taskQ;<br>&#125;<br><br>    TaskQueue* TaskQueue::m_taskQ = <span class="hljs-literal">nullptr</span>;<br></code></pre></td></tr></table></figure>上述加锁操作可以实现线程安全问题，但同时也会导致访问效率低，在加锁后，依次只能有一个进程占用锁，其他的进程需要等待，因此可以使用双重检查锁定。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">static</span> <span class="hljs-title class_">TaskQueue</span>* <span class="hljs-title function_">getTaskQ</span>(<span class="hljs-params"></span>)<br>&#123;<br><span class="hljs-keyword">if</span> (!m_taskQ)<span class="hljs-comment">//增加一次检查，当m_taskQ创建后不进入</span><br>&#123;<br>m_mutex.<span class="hljs-title function_">lock</span>();<br><span class="hljs-keyword">if</span> (!m_taskQ)<br>m_taskQ = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskQueue</span>;<br>m_mutex.<span class="hljs-title function_">unlock</span>();<br>&#125;<br><span class="hljs-keyword">return</span> m_taskQ;<br>&#125;  <br><br></code></pre></td></tr></table></figure><p>使用原子变量解决线程安全问题</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">static</span> std::atomic&lt;TaskQueue*&gt; m_taskQ;<span class="hljs-comment">//创建</span><br>std::mutex TaskQueue::m_mutex;<span class="hljs-comment">//类外实例</span><br>&#123;<br>        TaskQueue* <span class="hljs-keyword">task</span> = m_taskQ.load();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">task</span>)<br>&#123;<br>m_mutex.lock();<br><span class="hljs-keyword">task</span> = m_taskQ.load();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">task</span>)<br>&#123;<br><span class="hljs-keyword">task</span> = <span class="hljs-keyword">new</span> TaskQueue;<br>m_taskQ.store(<span class="hljs-keyword">task</span>);<br>&#125;<br>m_mutex.unlock();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">task</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用静态的局部对象解决线程安全问题</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">static</span> TaskQueue* getTaskQ()<br>&#123;<br>     <span class="hljs-keyword">static</span> TaskQueue <span class="hljs-keyword">task</span>;<span class="hljs-comment">//在程序结束后释放内存</span><br>     <span class="hljs-keyword">return</span> &amp;<span class="hljs-keyword">task</span>;<br>&#125;<br><span class="hljs-comment">//私有成员变量不需要</span><br><span class="hljs-comment">//static std::mutex m_mutex;</span><br><span class="hljs-comment">//static std::atomic&lt;TaskQueue*&gt; m_taskQ;</span><br></code></pre></td></tr></table></figure><h3 id="2-简单工厂模式"><a href="#2-简单工厂模式" class="headerlink" title="2.简单工厂模式"></a>2.简单工厂模式</h3><p>工厂模式是一种创建型设计模式，用于创建对象而不暴露对象创建的逻辑。它通过提供一个公共的接口来创建对象，而不是通过直接调用构造函数来实例化对象。这样做的好处包括：</p><p>封装对象创建逻辑：工厂模式将对象的创建过程封装在一个单独的类或函数中，使客户端代码无需关心对象的具体创建细节。</p><p>灵活性：通过工厂方法或抽象工厂接口，可以轻松地切换和替换具体的对象创建实现，而不需要修改客户端代码。</p><p>解耦：客户端代码与具体的对象类之间的耦合度降低，因为客户端只依赖于抽象的工厂接口而不是具体的对象实现。</p><p>代码复用：通过工厂模式，可以在不同的地方重用相同的对象创建逻辑，从而避免重复的代码。</p><ul><li><p>简单工厂模式：由一个工厂类根据传入的参数决定创建哪种类型的对象。客户端代码只需知道所需对象的类型，而不需要了解创建细节。</p></li><li><p>工厂模式：将对象的创建延迟到子类中。定义一个创建对象的接口，但由子类来决定实际要实例化的类。每个子类都可以根据需要创建并返回不同类型的对象。</p></li><li><p>抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要指定它们具体的类。这种模式通常涉及一个工厂接口和多个具体工厂类，每个具体工厂类负责创建一组相关的对象。</p></li></ul><p>简单工厂模式相关类的创建和使用步骤：</p><ol><li><p>创建一个新的类，可以将这个类称之为工厂类。对于简单工厂模式来说，只需要一个工厂类。</p></li><li><p>在这个工厂类中添加一个公共的成员函数，通过这个函数来创建我们需要的对象，这个函数一般被称为工厂函数。</p></li><li><p>在使用使&#x3D;时，首先创建一个工厂类对象，通过这个对象调用工厂函数，这样就可以生产出一个指定类型的实例对象。</p></li></ol><p>简单工厂模式代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><br><span class="hljs-comment">//产品的父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractSmile</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">transform</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">ability</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">AbstractSmile</span>() &#123; &#125;;<span class="hljs-comment">//虚析构函数，在实现多态时使用</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepSmile</span> :<span class="hljs-keyword">public</span> AbstractSmile <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transform</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span><span class="hljs-comment">//检查子类中重写函数是否拼写正确</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Sheep&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ability</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;1111&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LionSmile</span> :<span class="hljs-keyword">public</span> AbstractSmile<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transform</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span><span class="hljs-comment">//检查子类中重写函数是否拼写正确</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Lion&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ability</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;2222&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BatSmile</span> :<span class="hljs-keyword">public</span> AbstractSmile<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transform</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span><span class="hljs-comment">//检查子类中重写函数是否拼写正确</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Bat&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ability</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;3333&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">Type</span>:<span class="hljs-type">char</span>&#123; Sheep,Lion,Bat &#125;;<span class="hljs-comment">//强类型枚举</span><br><span class="hljs-comment">//工厂类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">simpleFactory</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">AbstractSmile* <span class="hljs-title">creatSmile</span><span class="hljs-params">(Type type)</span></span><br><span class="hljs-function"></span>&#123;<br>AbstractSmile* ptr = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">switch</span> (type)<br>&#123;<br><span class="hljs-keyword">case</span> Type::Sheep:<br>ptr = <span class="hljs-keyword">new</span> SheepSmile;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Type::Bat:<br>ptr = <span class="hljs-keyword">new</span> BatSmile;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Type::Lion:<br>ptr = <span class="hljs-keyword">new</span> LionSmile;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ptr;<br>&#125;<br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>simpleFactory* fctory = <span class="hljs-keyword">new</span> simpleFactory;<br>AbstractSmile* obj = fctory-&gt;<span class="hljs-built_in">creatSmile</span>(Type::Lion);<br>obj-&gt;<span class="hljs-built_in">ability</span>();<br>obj-&gt;<span class="hljs-built_in">transform</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-工厂模式"><a href="#3-工厂模式" class="headerlink" title="3.工厂模式"></a>3.工厂模式</h3><p>工厂类与子类为一对一。</p><p><img src="/image-10.png" alt="alt text"></p><p>工厂模式代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs #include<iostream>"><br><br>//产品的父类<br>class AbstractSmile<br>&#123;<br>public:<br>virtual void transform() = 0;<br>virtual void ability() = 0;<br>virtual ~AbstractSmile() &#123; &#125;;//虚析构函数，在实现多态时使用<br>&#125;;<br><br>class SheepSmile :public AbstractSmile<br>&#123;<br>public:<br>void transform()override//检查子类中重写函数是否拼写正确<br>&#123;<br>std::cout &lt;&lt; &quot;Sheep&quot; &lt;&lt; std::endl;<br>&#125;<br>void ability()override<br>&#123;<br>std::cout &lt;&lt; &quot;1111&quot; &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br>class LionSmile :public AbstractSmile<br>&#123;<br>public:<br>void transform()override//检查子类中重写函数是否拼写正确<br>&#123;<br>std::cout &lt;&lt; &quot;Lion&quot; &lt;&lt; std::endl;<br>&#125;<br>void ability()override<br>&#123;<br>std::cout &lt;&lt; &quot;2222&quot; &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br>class BatSmile :public AbstractSmile<br>&#123;<br>public:<br>void transform()override//检查子类中重写函数是否拼写正确<br>&#123;<br>std::cout &lt;&lt; &quot;Bat&quot; &lt;&lt; std::endl;<br>&#125;<br>void ability()override<br>&#123;<br>std::cout &lt;&lt; &quot;3333&quot; &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><br>//工厂类基类<br>class AbstractFactory<br>&#123;<br>public:<br>virtual AbstractSmile* creatSmile() = 0;<br>~AbstractFactory() &#123; &#125;;<br>&#125;;<br><br>class SheepFactory:public AbstractFactory<br>&#123;<br>public:<br>AbstractSmile* creatSmile()override<br>&#123;<br>return  new SheepSmile;<br>&#125;<br>~SheepFactory() &#123;&#125;;<br>&#125;;<br><br>class LionFactory :public AbstractFactory<br>&#123;<br>public:<br>AbstractSmile* creatSmile()override<br>&#123;<br><br>return  new LionSmile;<br>&#125;<br>~LionFactory() &#123;&#125;;<br>&#125;;<br><br>class BatFactory :public AbstractFactory<br>&#123;<br>public:<br>AbstractSmile* creatSmile()override<br>&#123;<br>return new BatSmile;<br>&#125;<br>~BatFactory() &#123;&#125;;<br>&#125;;<br><br>int main()<br>&#123;<br>AbstractFactory* factory = new BatFactory;<br>AbstractSmile* obj=factory-&gt;creatSmile();<br>obj-&gt;transform();<br>obj-&gt;ability();<br>delete factory;<br>delete obj;<br>factory = nullptr;<br>obj = nullptr;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-抽象工厂模式"><a href="#4-抽象工厂模式" class="headerlink" title="4.抽象工厂模式"></a>4.抽象工厂模式</h3><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要指定它们具体的类。这种模式通常涉及一个工厂接口和多个具体工厂类，每个具体工厂类负责创建一组相关的对象。</p><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">//船体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShipBody</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> std::string <span class="hljs-title">getBody</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">ShipBody</span>() &#123; &#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WoodBody</span>:<span class="hljs-keyword">public</span> ShipBody<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">std::string <span class="hljs-title">getBody</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;WOOD&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IronBody</span> :<span class="hljs-keyword">public</span> ShipBody<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">std::string <span class="hljs-title">getBody</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;Iron&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MetalBody</span> :<span class="hljs-keyword">public</span> ShipBody<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">std::string <span class="hljs-title">getBody</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;Metal&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//武器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> std::string <span class="hljs-title">getWeapon</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Weapon</span>() &#123; &#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Gun</span>:<span class="hljs-keyword">public</span> Weapon<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getWeapon</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Gun&quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Laser</span> :<span class="hljs-keyword">public</span> Weapon<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getWeapon</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Gun&quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cannon</span> :<span class="hljs-keyword">public</span> Weapon<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getWeapon</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Gun&quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//动力</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> std::string <span class="hljs-title">getEngine</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Engine</span>() &#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span> :<span class="hljs-keyword">public</span> Engine<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getEngine</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;human&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Diesel</span> :<span class="hljs-keyword">public</span> Engine<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getEngine</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;Diesel&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Nuclear</span> :<span class="hljs-keyword">public</span> Engine<br>&#123;<br><span class="hljs-function">std::string <span class="hljs-title">getEngine</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = <span class="hljs-string">&quot;Nuclear&quot;</span>;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//船</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Ship</span>(ShipBody* body, Engine* Engine, Weapon* weapon) :<span class="hljs-built_in">m_engine</span>(Engine), <span class="hljs-built_in">m_body</span>(body), <span class="hljs-built_in">m_weapon</span>(weapon) &#123;&#125;;<br>~<span class="hljs-built_in">Ship</span>()<br>&#123;<br><span class="hljs-keyword">delete</span> m_body;<br><span class="hljs-keyword">delete</span> m_engine;<br><span class="hljs-keyword">delete</span> m_weapon;<br>&#125;<br><span class="hljs-function">std::string <span class="hljs-title">getProperty</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::string str = m_body-&gt;<span class="hljs-built_in">getBody</span>() + m_engine-&gt;<span class="hljs-built_in">getEngine</span>() + m_weapon-&gt;<span class="hljs-built_in">getWeapon</span>();<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>ShipBody* m_body;<br>Engine* m_engine;<br>Weapon* m_weapon;<br>&#125;;<br><br><span class="hljs-comment">//工厂类抽象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFactory</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> Ship* <span class="hljs-title">creatShip</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">AbstractFactory</span>() &#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicFactory</span>:<span class="hljs-keyword">public</span> AbstractFactory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Ship* <span class="hljs-title">creatShip</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>Ship* ship = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Ship</span>(<span class="hljs-keyword">new</span> WoodBody,<span class="hljs-keyword">new</span> Human, <span class="hljs-keyword">new</span> Gun);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;basicship&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> ship;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StrandFactory</span> :<span class="hljs-keyword">public</span> AbstractFactory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Ship* <span class="hljs-title">creatShip</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>Ship* ship = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Ship</span>(<span class="hljs-keyword">new</span> IronBody, <span class="hljs-keyword">new</span> Diesel, <span class="hljs-keyword">new</span> Cannon);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Strandship&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> ship;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UltimataFactory</span> :<span class="hljs-keyword">public</span> AbstractFactory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Ship* <span class="hljs-title">creatShip</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>Ship* ship = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Ship</span>(<span class="hljs-keyword">new</span> MetalBody, <span class="hljs-keyword">new</span> Nuclear, <span class="hljs-keyword">new</span> Laser);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Ultimataship&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> ship;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>AbstractFactory* factory = <span class="hljs-keyword">new</span> UltimataFactory;<br>Ship* ship = factory-&gt;<span class="hljs-built_in">creatShip</span>();<br>std::cout&lt;&lt;ship-&gt;<span class="hljs-built_in">getProperty</span>();<br><span class="hljs-keyword">delete</span> factory;<br><span class="hljs-keyword">delete</span> ship;<br>factory = <span class="hljs-literal">NULL</span>;<br>ship = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>定义：装饰模式又叫包装模式，通过一种对客户端透明的方式来扩展对象功能，是继承关系的一种替代。</p><p>装饰模式包含以下角色：</p><ul><li><p>Component（组件）：定义了一个对象接口，可以动态地添加功能。这通常是一个接口或抽象类，它定义了基本对象和装饰器共同实现的方法。</p></li><li><p>ConcreteComponent（具体组件）：实现了组件接口，是需要动态添加功能的原始对象。</p></li><li><p>Decorator（装饰器）：继承自组件接口，并持有一个指向具体组件的引用。装饰器类具有与组件接口相同的方法，以便可以透明地包装具体组件。通常，装饰器类中会包含一个或多个组件的实例，并通过这些实例添加额外的功能。</p></li><li><p>ConcreteDecorator（具体装饰器）：扩展自装饰器类，实现了具体的功能扩展。每个具体装饰器类都可以添加一种或多种功能，从而实现不同的组合。</p></li></ul><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//一般情况下用继承实现类的功能扩展</span><br><span class="hljs-comment">//装饰模式，可以动态给一个类增加功能</span><br><br><span class="hljs-comment">//抽象英雄类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractHero</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">showStatus</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">AbstractHero</span>()&#123;&#125;<br><br><span class="hljs-type">int</span> m_HP;<br><span class="hljs-type">int</span> m_DF;<br><span class="hljs-type">int</span> m_AT;<br><span class="hljs-type">int</span> m_MP;<br>&#125;;<br><br><span class="hljs-comment">//具体英雄</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span>:<span class="hljs-keyword">public</span> AbstractHero<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Hero</span>()<br>&#123;<br> m_HP=<span class="hljs-number">0</span>;<br> m_DF=<span class="hljs-number">0</span>;<br> m_AT=<span class="hljs-number">0</span>;<br> m_MP=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showStatus</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;血量：&quot;</span> &lt;&lt; m_HP &lt;&lt; <span class="hljs-string">&quot;法力：&quot;</span> &lt;&lt; m_MP &lt;&lt; <span class="hljs-string">&quot;攻击力:&quot;</span> &lt;&lt; m_AT &lt;&lt; <span class="hljs-string">&quot;防御：&quot;</span> &lt;&lt; m_DF &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//抽象装饰类,英雄穿上装饰物</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractEquipment</span> :<span class="hljs-keyword">public</span> AbstractHero<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">AbstractEquipment</span>(AbstractHero* hero) :<span class="hljs-built_in">m_hero</span>(hero) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">showStatus</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br><br>AbstractHero* m_hero;<br>&#125;;<br><br><span class="hljs-comment">//具体装饰类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KuangTu</span> :<span class="hljs-keyword">public</span> AbstractEquipment<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">KuangTu</span>(AbstractHero* hero) :<span class="hljs-built_in">AbstractEquipment</span>(hero) &#123;&#125;<br><span class="hljs-comment">//增加额外功能</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddDF</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_AT = <span class="hljs-keyword">this</span>-&gt;m_hero-&gt;m_AT;<br><span class="hljs-keyword">this</span>-&gt;m_HP = <span class="hljs-keyword">this</span>-&gt;m_hero-&gt;m_HP;<br><span class="hljs-keyword">this</span>-&gt;m_DF = <span class="hljs-keyword">this</span>-&gt;m_hero-&gt;m_DF+<span class="hljs-number">30</span>;<br><span class="hljs-keyword">this</span>-&gt;m_MP = <span class="hljs-keyword">this</span>-&gt;m_hero-&gt;m_MP;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">this</span>-&gt;m_hero;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showStatus</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">AddDF</span>();<br>std::cout &lt;&lt; <span class="hljs-string">&quot;血量：&quot;</span> &lt;&lt; m_HP &lt;&lt; <span class="hljs-string">&quot;法力：&quot;</span> &lt;&lt; m_MP &lt;&lt; <span class="hljs-string">&quot;攻击力:&quot;</span> &lt;&lt; m_AT &lt;&lt; <span class="hljs-string">&quot;防御：&quot;</span> &lt;&lt; m_DF &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>AbstractHero* hero = <span class="hljs-keyword">new</span> Hero;<br>hero = <span class="hljs-keyword">new</span> <span class="hljs-built_in">KuangTu</span>(hero);<br>hero-&gt;<span class="hljs-built_in">showStatus</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式是一种行为型设计模式，用于定义对象间的一对多依赖关系，使得当一个对象的状态发生变化时，所有依赖于它的对象都会得到通知并自动更新。在观察者模式中，存在两种角色：观察者和被观察者。</p><ul><li><p>观察者（Observer）：观察者是依赖于被观察者状态的对象。它定义了一个更新接口，当被观察者的状态发生变化时，观察者会收到通知并执行相应的更新操作。</p></li><li><p>被观察者（Subject）：被观察者维护一系列观察者，并提供注册、删除和通知观察者的方法。当被观察者的状态发生变化时，它会遍历所有注册的观察者，并调用它们的更新方法。</p></li></ul><p>观察者模式的功能包括：</p><ul><li><p>松耦合：观察者模式通过定义了一种松耦合的关系，使得被观察者和观察者之间的依赖关系变得更加灵活。被观察者不需要知道观察者的具体实现，而只需要维护一个观察者列表即可。</p></li><li><p>动态注册与删除：观察者模式允许动态地向被观察者注册和删除观察者，从而使得系统更具有灵活性和可扩展性。</p></li><li><p>通知机制：当被观察者的状态发生变化时，它会自动通知所有注册的观察者，使得观察者能够及时地获取到最新的状态信息并进行相应的更新操作。</p></li></ul><p>观察者模式适用于需要实现对象之间的一对多依赖关系，并且希望在对象状态发生变化时能够自动通知其他对象进行相应处理的场景。</p><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-comment">//抽象英雄</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractHero</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">updata</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">AbstractHero</span>()&#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroA</span>:<span class="hljs-keyword">public</span> AbstractHero<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">HeroA</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;heroA&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updata</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;heroA stop&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroB</span> :<span class="hljs-keyword">public</span> AbstractHero<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">HeroB</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;HeroB&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updata</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;HeroB stop&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroC</span> :<span class="hljs-keyword">public</span> AbstractHero<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">HeroC</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;HeroC&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updata</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;HeroC stop&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125;;<br><br><br><span class="hljs-comment">//抽象观察对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractBoss</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">addHreo</span><span class="hljs-params">(AbstractHero* hero)</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">deleteHero</span><span class="hljs-params">(AbstractHero* hero)</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BoosA</span>:<span class="hljs-keyword">public</span> AbstractBoss<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addHreo</span><span class="hljs-params">(AbstractHero* hero)</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>heroList.<span class="hljs-built_in">push_back</span>(hero);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteHero</span><span class="hljs-params">(AbstractHero* hero)</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>heroList.<span class="hljs-built_in">remove</span>(hero);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (std::list&lt;AbstractHero*&gt;::iterator it=heroList.<span class="hljs-built_in">begin</span>(); it != heroList.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>(*it)-&gt;<span class="hljs-built_in">updata</span>();<br>&#125;<br> &#125;<br><br><br><span class="hljs-keyword">private</span>:<br>std::list&lt;AbstractHero*&gt; heroList;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">text</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>AbstractHero* heroA = <span class="hljs-keyword">new</span> HeroA;<br>AbstractHero* heroB = <span class="hljs-keyword">new</span> HeroB;<br>AbstractHero* heroC = <span class="hljs-keyword">new</span> HeroC;<br><br>AbstractBoss* boss = <span class="hljs-keyword">new</span> BoosA;<br>boss-&gt;<span class="hljs-built_in">addHreo</span>(heroA);<br>boss-&gt;<span class="hljs-built_in">addHreo</span>(heroB);<br>boss-&gt;<span class="hljs-built_in">addHreo</span>(heroC);<br><br>boss-&gt;<span class="hljs-built_in">notify</span>();<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">text</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式是一种行为型设计模式，它允许在运行时根据情况选择算法的行为。它将一组算法封装成独立的对象，并使它们可相互替换。这种模式使得算法可独立于使用它的客户而变化，从而使得系统更加灵活。</p><p>在策略模式中，存在三种核心角色：</p><ul><li><p>上下文（Context）：上下文是使用策略的对象，它维持一个对策略对象的引用，并在需要时将任务委托给策略对象来执行。上下文通常会提供一个接口或方法，允许客户端设置或更改当前使用的策略。</p></li><li><p>策略（Strategy）：策略是定义算法族的抽象，它通常是一个接口或抽象类，其中声明了一个执行算法的方法。具体的策略类实现了这个接口，每个具体策略类实现了一个特定的算法。</p></li><li><p>具体策略（Concrete Strategy）：具体策略是策略的具体实现，它实现了策略接口定义的算法。当上下文需要执行某个算法时，它会将任务委托给具体的策略对象</p></li></ul><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>状态模式是一种行为型设计模式，它允许对象在内部状态改变时改变它的行为。这种模式将对象的状态封装成独立的类，并将对状态的处理委托给表示该状态的对象。这样做的结果是，当对象的状态发生改变时，对象的行为也会随之改变，而不需要在对象内部包含大量的条件语句来判断不同的状态。</p><p>在状态模式中，存在以下几个核心角色：</p><ul><li><p>环境（Context）：环境是包含状态的对象，它维持一个对当前状态对象的引用，并将请求委托给当前状态对象处理。环境可以通过设置当前状态对象来改变它的状态。</p></li><li><p>状态（State）：状态是表示对象的状态的接口或抽象类，它定义了对象在特定状态下的行为。具体的状态类实现了这个接口，每个具体状态类对应一个特定的状态，并实现了该状态下的行为。</p></li><li><p>具体状态（Concrete State）：具体状态是状态的具体实现，它实现了状态接口定义的行为。当环境处于特定状态时，它会将请求委托给当前具体状态对象处理。</p></li></ul><p>状态模式的功能包括：</p><ul><li><p>封装变化：状态模式将对象的状态封装成独立的类，使得状态的变化对客户端透明，从而降低了对象之间的耦合度。</p></li><li><p>简化条件语句：状态模式通过将对象的行为委托给表示状态的对象来处理，避免了使用大量的条件语句来判断对象的状态，使得代码更加简洁和易于理解。</p></li><li><p>提高可维护性：由于状态的变化被封装在独立的状态类中，因此可以轻松地添加新的状态或修改现有的状态，而不会影响到其他部分的代码，从而提高了系统的可维护性。</p></li><li><p>促进扩展性：状态模式使得状态的变化和行为的变化可以独立地扩展，从而使得系统更加灵活和可扩展。</p></li></ul><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//状态模式</span><br><span class="hljs-comment">//假设有一个电梯控制系统，电梯可以处于三种状态：</span><br><span class="hljs-comment">//停止状态、运行状态和故障状态。我们可以使用状态模式来管理这些状态。</span><br><br><span class="hljs-comment">//状态基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">State</span>()&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//停止状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StopState</span>:<span class="hljs-keyword">public</span> State<br>&#123;<br><span class="hljs-keyword">public</span>:<br>     <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br> std::cout &lt;&lt; <span class="hljs-string">&quot;Elevator is stopped&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//运行</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RunState</span> :<span class="hljs-keyword">public</span> State<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Elevator is running&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//故障</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakdownState</span> :<span class="hljs-keyword">public</span> State<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span><span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Elevator is breakdown&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//电梯类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Elevator</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Elevator</span>(State* state):<span class="hljs-built_in">m_state</span>(state)&#123;&#125;<br><span class="hljs-function">State* <span class="hljs-title">setState</span><span class="hljs-params">(State* state)</span> </span>&#123; <span class="hljs-keyword">return</span> m_state = state; &#125;<br><span class="hljs-function">State* <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_state; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">requst</span><span class="hljs-params">()</span> </span>&#123; m_state-&gt;<span class="hljs-built_in">handle</span>(); &#125;<br><br><br><span class="hljs-keyword">private</span>:<br>State* m_state;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;  <br>State* state = <span class="hljs-keyword">new</span> StopState;<br>Elevator* etr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Elevator</span>(state);<br>etr-&gt;<span class="hljs-built_in">requst</span>();<br><br>etr-&gt;<span class="hljs-built_in">setState</span>(<span class="hljs-keyword">new</span> RunState);<br>etr-&gt;<span class="hljs-built_in">requst</span>();<br><br>etr-&gt;<span class="hljs-built_in">setState</span>(<span class="hljs-keyword">new</span> BreakdownState);<br>etr-&gt;<span class="hljs-built_in">requst</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>访问者模式是一种行为设计模式，其主要目的是在不改变被访问元素的类的前提下，定义作用于这些元素的新操作。它将操作和数据结构分离，使得添加新操作变得简单，同时也支持对已有操作的修改。这种模式通过在元素类中引入一个接受访问者的方法，从而使得元素可以接受不同类型的访问者对象访问。</p><p>主要组成部分：</p><ul><li><p>访问者（Visitor）：定义了对元素对象的新操作，可以通过多态性来实现不同的具体访问者。</p></li><li><p>元素（Element）：定义了一个接受访问者对象的接口，通常是一个接受访问者对象作为参数的方法。</p></li><li><p>具体访问者（Concrete Visitor）：实现了访问者定义的操作，针对不同类型的元素可以有不同的具体访问者。</p></li><li><p>具体元素（Concrete Element）：实现了元素接口，通常是元素类的子类，负责实现接受访问者的方法。</p></li></ul><p>功能：</p><ul><li><p>分离关注点：访问者模式将数据结构和操作分离开来，使得数据结构可以专注于自身的组织和管理，而操作可以专注于具体的功能实现。</p></li><li><p>新增操作：通过添加新的具体访问者类，可以在不修改现有元素类的情况下，为元素添加新的操作。</p></li><li><p>易于扩展：在需要对元素进行新操作时，只需添加一个新的具体访问者类，不需要修改元素类或其他现有代码</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择排序</title>
    <link href="/2024/03/07/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/03/07/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>每一次从待排序的数据元素中选出最小（或最大）的一个元素，将元素存放在序列的起始位置（即与待排序列的第一个元素的位置进行交换）。然后再从剩余的未排序元素中寻找最小（或最大）的元素，然后存放在已排序序列的末尾。以此类推，直到将待排序的元素全部排完。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以数组[2,9,5,3,7,4]为例</p><p>第一次排序</p><p>在所有元素中找出最小的与第一个元素进行交换</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">结果：2<span class="hljs-number"> 9 </span>5<span class="hljs-number"> 3 </span>7 4<br></code></pre></td></tr></table></figure><p>第二次排序</p><p>在待排序序列中找的最小的与待排序序列第一个元素进行交换</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">结果：<span class="hljs-number"> 2 </span>3<span class="hljs-number"> 5 </span>9<span class="hljs-number"> 7 </span>4<br></code></pre></td></tr></table></figure><p>重复上述操作即可得到有序数列</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li>循环实现<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//循环实现</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span>;<br><span class="hljs-comment">//选择排序,每循环一遍，找出最小的数与第一个数进行交换，需要执行n-1轮</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span> ; i++)<br>&#123;<br><span class="hljs-type">int</span> min = nums[i];<br><span class="hljs-type">int</span> a = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; n ; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (nums[j] &lt; min)<br>&#123;<br>min = nums[j];<br>a = j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (a != i)<br><span class="hljs-built_in">swap</span>(nums[i], nums[a]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>递归实现<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DSelectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> n)</span><span class="hljs-comment">//递归实现</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span>;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录最小值的位置</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (nums[i] &lt; nums[a])<br>&#123;<br>a = i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (a != <span class="hljs-number">0</span>)<br><span class="hljs-built_in">swap</span>(nums[a], nums[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">DSelectSort</span>(nums + <span class="hljs-number">1</span>, --n);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="选择排序的优化"><a href="#选择排序的优化" class="headerlink" title="选择排序的优化"></a>选择排序的优化</h2><p>选择排序的优化，每一次排序，将最小值和最大值都找出来，最小的放在最左边，最大的放在最右边。优化后循环的次数减半。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs excel">void ImproveSelectSort(<span class="hljs-built_in">int</span>* nums, <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>)<br>&#123;<br><span class="hljs-built_in">if</span> (<span class="hljs-built_in">n</span> &lt; <span class="hljs-number">2</span>)<br>return;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span> = <span class="hljs-number">0</span>, <span class="hljs-built_in">right</span> = <span class="hljs-built_in">n</span> - <span class="hljs-number">1</span>;//利用双指针解决<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">max</span>=<span class="hljs-number">0</span> ,<span class="hljs-built_in">min</span>= <span class="hljs-number">0</span>;//记录最大值和最小值的位置<br>while (<span class="hljs-built_in">left</span> &lt; <span class="hljs-built_in">right</span>)<br>&#123;<br><span class="hljs-built_in">min</span> = <span class="hljs-built_in">max</span> = <span class="hljs-built_in">left</span>;<br>for (<span class="hljs-built_in">int</span> i = <span class="hljs-built_in">left</span>; i &lt; <span class="hljs-built_in">right</span>; i++)<br>&#123;<br><span class="hljs-built_in">if</span> (nums[i] &lt; nums[<span class="hljs-built_in">min</span>])<br>&#123;<br><span class="hljs-built_in">min</span> = i;<br>&#125;<br><span class="hljs-built_in">if</span> (nums[i] &gt; nums[<span class="hljs-built_in">max</span>])<br>&#123;<br><span class="hljs-built_in">max</span> = i;<br>&#125;<br>&#125;<br><span class="hljs-built_in">if</span> (<span class="hljs-built_in">min</span> != <span class="hljs-built_in">left</span>)<br>swap(nums[<span class="hljs-built_in">min</span>], nums[<span class="hljs-built_in">left</span>]);<br>//如果最大的值是最左边的值，在上面交换时，将nums[<span class="hljs-built_in">left</span>]的值与nums[<span class="hljs-built_in">min</span>]交换<br>//此时应将<span class="hljs-built_in">max</span>=<span class="hljs-built_in">min</span><br><span class="hljs-built_in">if</span> (<span class="hljs-built_in">max</span> == <span class="hljs-built_in">left</span>)<br><span class="hljs-built_in">max</span> = <span class="hljs-built_in">min</span>;<br><span class="hljs-built_in">if</span> (<span class="hljs-built_in">max</span> != <span class="hljs-built_in">right</span>)<br>swap(nums[<span class="hljs-built_in">max</span>], nums[<span class="hljs-built_in">right</span>]);<br><span class="hljs-built_in">left</span>++;<br><span class="hljs-built_in">right</span>--;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>最优时间复杂度、最坏时间复杂度、平均时间复杂度都是O(n^2),因为无论你是否完全有序，还是完全逆序，都需要找出后边的最小值进行替换。</p>]]></content>
    
    
    <categories>
      
      <category>排序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序</title>
    <link href="/2024/03/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/03/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序原理"><a href="#冒泡排序原理" class="headerlink" title="冒泡排序原理"></a>冒泡排序原理</h2><ol><li><p>比较相邻的两个元素，如果后一个元素大于前一个元素则交换他们。</p></li><li><p>对数据中的每一对相邻元素做同样的工作，在第一次遍历完成后，数据尾部应为最大值</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>对n个数据在进行n-1趟遍历后（最坏情况），可得到有序数列。</p></li></ol><p><img src="/image-8.png" alt="alt text"></p><h2 id="冒泡排序优化"><a href="#冒泡排序优化" class="headerlink" title="冒泡排序优化"></a>冒泡排序优化</h2><p>在实际的使用中，很多情况下冒泡排序并不需要执行n-1趟，此时在程序中就会出现时间损耗，所以我们可以在程序中定义一个值，用于记录每一趟循环中数据交换的次数，如果值为0，则序列已经有序，结束循环，从而降低时间损耗。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">BubblingSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//循环</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//nums为传入的数组，n为数据长度，循环执行n-1轮，每轮相邻的两个数据相互比较，较大的数据向后交换</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i &gt;<span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录循环种交换位置的次数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i ; j++)<span class="hljs-comment">//对0到i之间的数据进行比较，i之后的元素为已经排序好的</span><br>&#123;<br><span class="hljs-keyword">if</span> (nums[j] &gt; nums[j+<span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-keyword">auto</span> tmp = nums[j+<span class="hljs-number">1</span>];<br>nums[j+<span class="hljs-number">1</span>] = nums[j];<br>nums[j] = tmp;<br>a++;<br>&#125;<br>&#125;<br>x++;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>)<span class="hljs-comment">//当a等于零时,即当前数组已经有序时，跳出循环，降低时间损耗</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;循环了&quot;</span> &lt;&lt; x &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> nums;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DBubblingSort</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)<span class="hljs-comment">//边界条件</span><br><span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (nums[i] &gt; nums[i+<span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-keyword">auto</span> tmp = nums[i];<br>nums[i] = nums[i+<span class="hljs-number">1</span>];<br>nums[i+<span class="hljs-number">1</span>] = nums[i];<br>&#125;<br>&#125;<br><span class="hljs-built_in">DBubblingSort</span>(nums, --n);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>排序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树</title>
    <link href="/2024/02/28/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2024/02/28/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="1-树的定义"><a href="#1-树的定义" class="headerlink" title="1.树的定义"></a>1.树的定义</h2><p>一棵树是由n（n&gt;0）个元素组成的有限集合，其中：</p><p>（1）每个元素称为结点（node）</p><p>（2）有一个特定的结点，称为根结点或树根（root）</p><p>（3）除根节点外，其余节点能分成m（m&gt;&#x3D;0）个互不相交的有限集合 T(0)-T(m-1)。其中的每一个子集都是一个树，这些集合被称为这棵树的子树。</p><p><img src="/image-3.png" alt="Alt text"></p><h2 id="2-树的基本概念"><a href="#2-树的基本概念" class="headerlink" title="2.树的基本概念"></a>2.树的基本概念</h2><p>(1) 树是由递归定义的</p><p>(2) 一棵树中至少有1个结点。这个节点就是根节点，他没有前驱，其余每个节点都有且只有一个前驱节点。每个节点可以有任意个后继结点。因此，树是非线性结构，但也是有序结构。</p><p>(3) 一个节点的子树个数称为这个结点的度，例如上图根节点的度为2。度为0的结点被称为叶结点；度不为0的结点被称为分支结点，根以外的分支节点称为内部结点，树中各节点的度的最大值称为这棵树的度。</p><p>(4) 在用图形表示的树形结构中，对两个用线段（我们称为树枝）连接的相关联的结点，称上端结点为下端节点的父节点，反之为子节点。</p><p>(5) 定义一棵树的根的层次为1，其他结点的层次等于他的父节点的层次加一。一棵树中所有节点的层次的最大值称为这棵树的深度。</p><p>(6) 对于树中任意两个不同的结点，从一个结点出发一定能到达另一个结点。</p><p>(7) m（m&gt;&#x3D;0）棵树的结合称为森林。</p><h2 id="3-树的遍历"><a href="#3-树的遍历" class="headerlink" title="3.树的遍历"></a>3.树的遍历</h2><h3 id="1-先序遍历"><a href="#1-先序遍历" class="headerlink" title="(1) 先序遍历"></a>(1) 先序遍历</h3><p>先访问根节点，然后根据左右先后顺序遍历各子树</p><p><img src="/image-4.png" alt="Alt text"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xl">void MyTree&lt;T&gt;::PreOrder(TreeNode&lt;T&gt; *<span class="hljs-keyword">tree</span>)<br>&#123;<br><span class="hljs-comment">//先序遍历 先访问根节点，然后按照左右先后顺序遍历各子树（根左右）</span><br>    <span class="hljs-comment">//使用递归实现</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">tree</span> != NULL)<br>&#123;<br>display(<span class="hljs-keyword">tree</span>);<br>P<span class="hljs-function"><span class="hljs-title">reOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_left);<br>P<span class="hljs-function"><span class="hljs-title">reOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="(2) 中序遍历"></a>(2) 中序遍历</h3><p>先访问左子树，然后访问根，最后访问右子树（左根右）</p><p><img src="/image-5.png"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">void MyTree&lt;T&gt;::InOrder(TreeNode&lt;T&gt;* <span class="hljs-keyword">tree</span>)<br>&#123;<br><span class="hljs-comment">//中序遍历 先访问左子树，然后访问根，最后访问右子树（左根右）</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">tree</span> != NULL)<br>&#123;<br>I<span class="hljs-function"><span class="hljs-title">nOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_left);<br>display(<span class="hljs-keyword">tree</span>);<br>I<span class="hljs-function"><span class="hljs-title">nOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_right);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-后序遍历"><a href="#3-后序遍历" class="headerlink" title="(3) 后序遍历"></a>(3) 后序遍历</h3><p>先访问左子树，然后访问右子树，最后访问根</p><p><img src="/image-6.png" alt="Alt text"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">void MyTree&lt;T&gt;::BackOrder(TreeNode&lt;T&gt; *<span class="hljs-keyword">tree</span>)<br>&#123;<br><span class="hljs-comment">//后序遍历 先访问左子树，再访问右子树，最后访问根</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">tree</span> != NULL)<br>&#123;<br>B<span class="hljs-function"><span class="hljs-title">ackOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_left);<br>B<span class="hljs-function"><span class="hljs-title">ackOrder</span>(<span class="hljs-keyword">tree</span>-&gt;</span>_right);<br>display(<span class="hljs-keyword">tree</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于二叉树的遍历可以去看<a href="http://t.csdnimg.cn/O3uhb%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E8%AE%B2%E7%9A%84%E5%BE%88%E8%AF%A6%E7%BB%86%E3%80%82">http://t.csdnimg.cn/O3uhb这篇文章，讲的很详细。</a></p><h2 id="4-二叉树的插入"><a href="#4-二叉树的插入" class="headerlink" title="4.二叉树的插入"></a>4.二叉树的插入</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br>TreeNode&lt;T&gt;* z = new TreeNode&lt;T&gt;(key, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr);<br><span class="hljs-keyword">if</span> (z == <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>insert(_tree, z);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;*&amp; <span class="hljs-symbol">tree, <span class="hljs-symbol">TreeNode</span></span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">z</span>)<br>&#123;<br>TreeNode&lt;T&gt;* y = NULL;<br>TreeNode&lt;T&gt;* x =tree;<br><span class="hljs-keyword">while</span> (x != <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-comment">//当x为空时停止循环，此时x无子节点，为叶子结点</span><br>y = x;<br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; x-&gt;_key)<br>&#123;<br>x = x-&gt;_left;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>x = x-&gt;_right;<br>&#125;<br>&#125;<br>z-&gt;_parent = y;<span class="hljs-comment">//将z结点的父节点设置为y,及就是x结点</span><br><span class="hljs-keyword">if</span> (y == NULL)<br>&#123;<br>tree = z;<br>&#125;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; y-&gt;_key)<br>&#123;<br>y-&gt;_left = z;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>y-&gt;_right = z;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-二叉树结点的删除"><a href="#5-二叉树结点的删除" class="headerlink" title="5.二叉树结点的删除"></a>5.二叉树结点的删除</h2><p>在删除二叉树节点时，可能会出现三种情况：</p><p>(1) 所删除的结点无子节点<br>当删除的结点无子结点时，我们只需将他的父节点指向它的指针置空即可。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">//pa为cur的父节点</span><br><span class="hljs-function"><span class="hljs-title">if</span> (cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span> == NULL &amp;&amp; cur-&gt;</span>_right == NULL)<span class="hljs-comment">//无子结点</span><br>&#123;<br>        <span class="hljs-comment">//判断cur是父节点的左右哪一个子节点</span><br><span class="hljs-function"><span class="hljs-title">if</span> (pa-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> &gt; cur-&gt;</span>_key)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_left = NULL;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_right = NULL;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> (2) 所删除的结点只有一个子节点<br>当删除的结点有一个子节点时，我们只需将G节点的父节点设置为C,将C结点的左子节点设置为G</p><p><img src="/image-7.png" alt="Alt text"></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span> != NULL &amp;&amp; cur-&gt;</span>_right == NULL)<span class="hljs-comment">//只有一个子节点</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">le</span> = cur-&gt;</span>_left;<br><span class="hljs-function"><span class="hljs-title">le</span>-&gt;</span>_parent = pa;<br><span class="hljs-function"><span class="hljs-title">if</span> (pa-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> &gt; cur-&gt;</span>_key)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_right = le;<br>&#125;<br>&#125;<br>   <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span>==NULL&amp;&amp;cur-&gt;</span>_right!=NULL)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">le</span> = cur-&gt;</span>_right;<br><span class="hljs-function"><span class="hljs-title">le</span>-&gt;</span>_parent = pa;<br><span class="hljs-function"><span class="hljs-title">if</span> (pa-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> &gt; cur-&gt;</span>_key)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">pa</span>-&gt;</span>_right = le;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> (3) 所删除的结点有两个子节点<br> 当删除的结点有两个子节点时，我们可以使用其左子树的最大结点或者右子树的最小结点进行替换。</p> <figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (cur-&gt;</span>_<span class="hljs-function"><span class="hljs-title">left</span> != NULL &amp;&amp; cur-&gt;</span>_right != NULL)<span class="hljs-comment">//两个子节点都存在</span><br>&#123;<br><span class="hljs-comment">//有两种方法:去左子树的最大元素代替，或者去右子树的最小元素代替,这里使用第二种</span><br><span class="hljs-function"><span class="hljs-title">le</span> = Min(cur-&gt;</span>_right);<br><span class="hljs-function"><span class="hljs-title">cur</span>-&gt;</span>_<span class="hljs-function"><span class="hljs-title">key</span> = le-&gt;</span>_key;<br><span class="hljs-function"><span class="hljs-title">cur</span>-&gt;</span>_<span class="hljs-function"><span class="hljs-title">right</span> = remove(le,le-&gt;</span>_key);<span class="hljs-comment">//递归删除右子树，直到无子结点，或者只有一个子结点</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-完整代码"><a href="#6-完整代码" class="headerlink" title="6.完整代码"></a>6.完整代码</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">#pragma once<br>#include&lt;iostream&gt;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">TreeNode</span> &#123;<br><span class="hljs-keyword">public</span>:<br>T _key;<br>TreeNode* _left;<span class="hljs-comment">//左子节点</span><br>TreeNode* _right;<span class="hljs-comment">//右子节点</span><br>TreeNode* _parent;<span class="hljs-comment">//父节点</span><br>TreeNode(T k = <span class="hljs-number">0</span>, TreeNode* l = <span class="hljs-literal">null</span>ptr, TreeNode* r = <span class="hljs-literal">null</span>ptr, TreeNode* p = <span class="hljs-literal">null</span>ptr) :_key(k), _left(l), _right(r), _parent(p)<br>&#123;<br>;<br>&#125;<br>&#125;;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">MyTree</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>MyTree();<br>~MyTree();<br><br><span class="hljs-built_in">void</span> insert(T key);<span class="hljs-comment">//将key插入二叉树中</span><br><span class="hljs-built_in">void</span> PreOrder();<span class="hljs-comment">//前序遍历</span><br><span class="hljs-built_in">void</span> InOrder();<span class="hljs-comment">//中序遍历</span><br><span class="hljs-built_in">void</span> BackOrder();<span class="hljs-comment">//后序遍历</span><br><span class="hljs-built_in">bool</span> IsEmpty();<span class="hljs-comment">//判断二叉树是否为空</span><br>TreeNode&lt;T&gt;* Find(T key);<span class="hljs-comment">//查找指定结点</span><br><span class="hljs-built_in">void</span> remove(T key);<span class="hljs-comment">//删除结点,通过该函数生成一个结点</span><br><span class="hljs-built_in">void</span> destory();<span class="hljs-comment">//销毁二叉树</span><br><span class="hljs-keyword">private</span>:<br><br>TreeNode&lt;T&gt;* _tree;<span class="hljs-comment">//根节点</span><br><br><span class="hljs-built_in">void</span> insert(TreeNode&lt;T&gt;*&amp; tree, TreeNode&lt;T&gt;* z);<span class="hljs-comment">//将key插入二叉树中</span><br><span class="hljs-built_in">void</span> PreOrder(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//前序遍历</span><br><span class="hljs-built_in">void</span> InOrder(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//中序遍历</span><br><span class="hljs-built_in">void</span> BackOrder(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//后序遍历</span><br><span class="hljs-built_in">bool</span> IsEmpty(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//判断二叉树是否为空</span><br>TreeNode&lt;T&gt;* Min(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//查找以tree为根节点的二叉树的最小结点</span><br>TreeNode&lt;T&gt;* Max(TreeNode&lt;T&gt;* tree);<span class="hljs-comment">//查找以tree为根节点的二叉树的最大结点</span><br>TreeNode&lt;T&gt;* Find(TreeNode&lt;T&gt;* tree, T key);<span class="hljs-comment">//查找指定结点</span><br>TreeNode&lt;T&gt;* remove(TreeNode&lt;T&gt;* tree, T z);<span class="hljs-comment">//删除结点</span><br><span class="hljs-built_in">void</span> destory(TreeNode&lt;T&gt;*&amp; tree);<span class="hljs-comment">//销毁二叉树</span><br><span class="hljs-built_in">void</span> display(TreeNode&lt;T&gt; *z);<br>&#125;;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">MyTree</span>() :<span class="hljs-symbol">_tree</span>(<span class="hljs-symbol">nullptr</span>) &#123;&#125;;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::~<span class="hljs-symbol">MyTree</span>()<br>&#123;<br><span class="hljs-comment">//destory();</span><br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">bool</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">IsEmpty</span>()<br>&#123;<br><span class="hljs-keyword">return</span> _tree == <span class="hljs-literal">null</span>ptr;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br>TreeNode&lt;T&gt;* z = new TreeNode&lt;T&gt;(key, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr, <span class="hljs-literal">null</span>ptr);<br><span class="hljs-keyword">if</span> (z == <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>insert(_tree, z);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;*&amp; <span class="hljs-symbol">tree, <span class="hljs-symbol">TreeNode</span></span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">z</span>)<br>&#123;<br>TreeNode&lt;T&gt;* y = NULL;<br>TreeNode&lt;T&gt;* x =tree;<br><span class="hljs-keyword">while</span> (x != <span class="hljs-literal">null</span>ptr)<br>&#123;<br><span class="hljs-comment">//当x为空时停止循环，此时x无子节点，为叶子结点</span><br>y = x;<br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; x-&gt;_key)<br>&#123;<br>x = x-&gt;_left;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>x = x-&gt;_right;<br>&#125;<br>&#125;<br>z-&gt;_parent = y;<span class="hljs-comment">//将z结点的父节点设置为y,及就是x结点</span><br><span class="hljs-keyword">if</span> (y == NULL)<br>&#123;<br>tree = z;<br>&#125;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">if</span> (z-&gt;_key &lt; y-&gt;_key)<br>&#123;<br>y-&gt;_left = z;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>y-&gt;_right = z;<br>&#125;<br><br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">PreOrder</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;先序遍历：&quot;</span>;<br>PreOrder(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">PreOrder</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt; *<span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//先序遍历 先访问根节点，然后按照左右先后顺序遍历各子树（根左右）</span><br><span class="hljs-keyword">if</span> (tree != NULL)<br>&#123;<br>display(tree);<br>PreOrder(tree-&gt;_left);<br>PreOrder(tree-&gt;_right);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">InOrder</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (_tree == NULL)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;tree is empty&quot;</span> &lt;&lt; std::endl;<br>exit(<span class="hljs-number">1</span>);<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;中序遍历：&quot;</span>;<br>InOrder(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">InOrder</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//中序遍历 先访问左子树，然后访问根，最后访问右子树（左根右）</span><br><span class="hljs-keyword">if</span> (tree != NULL)<br>&#123;<br>InOrder(tree-&gt;_left);<br>display(tree);<br>InOrder(tree-&gt;_right);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">BackOrder</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;后序遍历：&quot;</span>;<br>BackOrder(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">BackOrder</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt; *<span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//后序遍历 先访问左子树，再访问右子树，最后访问根</span><br><span class="hljs-keyword">if</span> (tree != NULL)<br>&#123;<br>BackOrder(tree-&gt;_left);<br>BackOrder(tree-&gt;_right);<br>display(tree);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">display</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">z</span>)<br>&#123;<br>std::cout &lt;&lt; z-&gt;_key &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Max</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-keyword">while</span> (tree-&gt;_right != NULL)<br>&#123;<br>tree = tree-&gt;_right;<br>&#125;<br><span class="hljs-keyword">return</span> tree;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Min</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-keyword">while</span> (tree-&gt;_left != NULL)<br>&#123;<br>tree = tree-&gt;_left;<br>&#125;<br><span class="hljs-keyword">return</span> tree;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Find</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br><span class="hljs-keyword">return</span> Find(_tree, key);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Find</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree, <span class="hljs-symbol">T</span></span> <span class="hljs-symbol">key</span>)//查找指定结点<br>&#123;<br><span class="hljs-keyword">if</span> (tree == NULL || tree-&gt;_key == key)<br>&#123;<br><span class="hljs-keyword">return</span> tree;<br>&#125;<br><span class="hljs-keyword">if</span> (tree-&gt;_key &gt; key)<br>&#123;<br><span class="hljs-keyword">return</span> Find(tree-&gt;_left, key);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> Find(tree-&gt;_right, key);<br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">remove</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">key</span>)<br>&#123;<br>remove(_tree, key);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt; ::<span class="hljs-symbol">remove</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;* <span class="hljs-symbol">tree, <span class="hljs-symbol">T</span></span> <span class="hljs-symbol">z</span>)//删除结点<br>&#123;<br>TreeNode&lt;T&gt;* cur = Find(tree, z);<br><span class="hljs-keyword">if</span> (cur == _tree)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Tree can&#x27;t be delete&quot;</span> &lt;&lt; std::endl;<br>exit(<span class="hljs-number">1</span>);<br>&#125;<br><br>TreeNode&lt;T&gt;* pa = cur-&gt;_parent;<span class="hljs-comment">//找到父节点</span><br>TreeNode&lt;T&gt;* le = NULL;<br><br><span class="hljs-keyword">if</span> (cur-&gt;_left == NULL &amp;&amp; cur-&gt;_right == NULL)<span class="hljs-comment">//无子结点</span><br>&#123;<br><span class="hljs-keyword">if</span> (pa-&gt;_key &gt; cur-&gt;_key)<br>&#123;<br>pa-&gt;_left = NULL;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pa-&gt;_right = NULL;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;_left != NULL &amp;&amp; cur-&gt;_right == NULL)<span class="hljs-comment">//只有一个子节点</span><br>&#123;<br>le = cur-&gt;_left;<br>le-&gt;_parent = pa;<br><span class="hljs-keyword">if</span> (pa-&gt;_key &gt; cur-&gt;_key)<br>&#123;<br>pa-&gt;_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pa-&gt;_right = le;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur-&gt;_left==NULL&amp;&amp;cur-&gt;_right!=NULL)<br>&#123;<br>le = cur-&gt;_right;<br>le-&gt;_parent = pa;<br><span class="hljs-keyword">if</span> (pa-&gt;_key &gt; cur-&gt;_key)<br>&#123;<br>pa-&gt;_left = le;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pa-&gt;_right = le;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;_left != NULL &amp;&amp; cur-&gt;_right != NULL)<span class="hljs-comment">//两个子节点都存在</span><br>&#123;<br><span class="hljs-comment">//有两种方法:去左子树的最大元素代替，或者去右子树的最小元素代替,这里使用第二种</span><br>le = Min(cur-&gt;_right);<br>cur-&gt;_key = le-&gt;_key;<br>cur-&gt;_right = remove(le,le-&gt;_key);<span class="hljs-comment">//递归删除右子树，直到无子结点，或者只有一个子结点</span><br>&#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">destory</span>()<br>&#123;<br>destory(_tree);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">MyTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">destory</span>(<span class="hljs-symbol">TreeNode</span>&lt;<span class="hljs-symbol">T</span>&gt;*&amp; <span class="hljs-symbol">tree</span>)<br>&#123;<br><span class="hljs-comment">//使用递归调用对左子树和右子树都进行销毁</span><br><span class="hljs-keyword">if</span> (tree == NULL)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//在递归调用中不应使用return</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  if (tree-&gt;_left != NULL)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        return destroy(tree-&gt;_left);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    if (tree-&gt;_right != NULL)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        return destroy(tree-&gt;_right);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>destory(tree-&gt;_left);<br>destory(tree-&gt;_right);<br>delete tree;<br>tree = NULL;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2024/01/28/%E6%A0%88/"/>
    <url>/2024/01/28/%E6%A0%88/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/01/21/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/01/21/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>是一种物理存储结构上非连续，非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针连接顺序实现的。</p><ul><li>优点<ul><li>按需申请空间，不用了就释放空间</li><li>头部中间插入数据不需要挪动数据</li><li>不存在空间浪费</li></ul></li><li>缺点： <ul><li>每一个数据，都要存一个指针去链接后面节点，不支持随机访问。</li></ul></li></ul><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。<br><img src="/image-1.png" alt="Alt text"><br>输入：head &#x3D; [1,2,3,4,5]<br>输出：[5,4,3,2,1]</p><ul><li>解题思路：<br>定义三个ListNode*类型，cur为链表，pre为反转后的链表，next用于存储下一节点。<br><br>初始时原链表为：1-&gt;2-&gt;3-&gt;4-&gt;5,反转后的链表和next都为空<br>进入循环后，令next-&gt;2;此时cur-&gt;1结点，令cur-&gt;next&#x3D;nullptr，则原链表变为[1];<br>令pre &#x3D; cur则反转后的链表为[1],再将cur &#x3D; next则原链表为[2,3,4,5]<br>进行第二次循环时，next-&gt;3结点此时令cur-&gt;next&#x3D;pre,则原链表为2-&gt;1<br>pre &#x3D; cur  cur &#x3D; next在执行这俩条语句后，pre为2-&gt;1，实现了初步反转。<br>继续循换可实现整体反转，时间复杂度为O(N)，空间复杂度O(1)。<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    ListNode* reverseList(ListNode* head) &#123;<br>ListNode* pre = nullptr;<br>ListNode* cur = head;<br>ListNode* <span class="hljs-keyword">next</span> = nullptr;<br><span class="hljs-keyword">while</span> (cur)<br>&#123;<br><span class="hljs-keyword">next</span> = cur-&gt;<span class="hljs-keyword">next</span>;<br>cur-&gt;<span class="hljs-keyword">next</span> = pre;<br>pre = cur;<br>        cur = <span class="hljs-keyword">next</span>;<br>&#125;<br><span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a>876. 链表的中间结点</h2><p>给你单链表的头结点 head ，请你找出并返回链表的中间结点。<br>如果有两个中间结点，则返回第二个中间结点。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class Solution &#123;<br>public:<br>    ListNode* middleNode(ListNode* head) &#123;<br>        ListNode <span class="hljs-number">*c</span><span class="hljs-attribute">ur</span>=head;<br>        short <span class="hljs-attribute">hl</span>=0;//链表长度<br>        <span class="hljs-keyword">while</span>(cur)<br>        &#123;<br>            ++hl;<br>            <span class="hljs-attribute">cur</span>=cur-&gt;next;<br>        &#125;<br>        <span class="hljs-attribute">cur</span>=head;<br>        int <span class="hljs-attribute">num</span>=0;<br>        <span class="hljs-keyword">while</span>(num&lt;hl/2)<br>        &#123;<br>            ++num;<br>            <span class="hljs-attribute">cur</span>=cur-&gt;next;<br>        &#125;<br>        return cur;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>顺序表</title>
    <link href="/2024/01/18/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2024/01/18/%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p>顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。<br>缺陷： </p><ul><li>1.空间不够了需要扩容，扩容是有消耗</li><li>2.头部或中间位置的插入删除需要挪动，挪动数据也是有消耗的</li><li>3.为了避免频繁扩容，每次都是以倍数去扩容，存在空间浪费</li></ul><h1 id="顺序表的实现"><a href="#顺序表的实现" class="headerlink" title="顺序表的实现"></a>顺序表的实现</h1><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">SeqList</span> &#123;<br><span class="hljs-keyword">public</span>:<br>T *m_a;<br><span class="hljs-built_in">int</span> m_size;<span class="hljs-comment">//表示数组中数据的个数</span><br><span class="hljs-built_in">int</span> m_capacity;<span class="hljs-comment">//数组容量</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">SeqList</span>()<span class="hljs-comment">//默认构造函数</span><br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_a = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">this</span>-&gt;m_size = <span class="hljs-keyword">this</span>-&gt;m_capacity = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">SeqList</span>(SeqList&amp; sl)<span class="hljs-comment">//拷贝构造函数，深拷贝</span><br>&#123;<br>m_size = sl.m_size;<br>m_capacity = sl.m_size;<br>* m_a = <span class="hljs-keyword">new</span> T[sl.m_size];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>m_a[i] = sl[i];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-析构函数"><a href="#2-析构函数" class="headerlink" title="2.析构函数"></a>2.析构函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">~<span class="hljs-built_in">SeqList</span>() <span class="hljs-comment">//析构函数</span><br>&#123; <br><span class="hljs-keyword">if</span> (m_a)<br>&#123;<br><span class="hljs-keyword">delete</span>[] m_a;<br>&#125;<br>m_a = <span class="hljs-literal">nullptr</span>;<br>m_size = m_capacity = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-初始化和扩容函数"><a href="#3-初始化和扩容函数" class="headerlink" title="3.初始化和扩容函数"></a>3.初始化和扩容函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//初始化和扩容</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CheckCapacity</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_size == m_capacity || m_capacity == <span class="hljs-number">0</span>)<span class="hljs-comment">//如果满了或者没初始化</span><br>&#123;<br><span class="hljs-type">int</span> newcapacity = (<span class="hljs-number">0</span> == m_capacity) ? <span class="hljs-number">5</span> : <span class="hljs-number">2</span> * m_capacity;<br>T* tmp = <span class="hljs-keyword">new</span> T[newcapacity];<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>tmp[j++] = m_a[i];<br>&#125;<br>m_a = tmp;<br>tmp = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">delete</span>[]tmp;<span class="hljs-comment">//释放指针，避免野指针</span><br>m_capacity = newcapacity;<span class="hljs-comment">//更新容量</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-基本函数"><a href="#4-基本函数" class="headerlink" title="4.基本函数"></a>4.基本函数</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getSize</span>()</span> &#123; <span class="hljs-keyword">return</span> m_size; &#125;<span class="hljs-comment">//返回顺序表元素个数</span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">getCapacity</span>()</span> &#123; <span class="hljs-keyword">return</span> m_capacity; &#125;<span class="hljs-comment">//返回顺序表最大容量</span><br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">Empty</span>()</span> &#123; <span class="hljs-keyword">if</span> (m_size == m_capacity) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<span class="hljs-comment">//判断顺序表是否为空</span><br></code></pre></td></tr></table></figure><h2 id="5-头插"><a href="#5-头插" class="headerlink" title="5.头插"></a>5.头插</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListPushFront</span><span class="hljs-params">(T n)</span><span class="hljs-comment">//头插</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">CheckCapacity</span>();<span class="hljs-comment">//检查容量</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =m_size<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br>m_a[i + <span class="hljs-number">1</span>] = m_a[i - <span class="hljs-number">1</span>];<br>&#125;<br>m_a[<span class="hljs-number">0</span>] = n;<br>m_size++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-头删"><a href="#6-头删" class="headerlink" title="6.头删"></a>6.头删</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SeqListPopFront</span>()<span class="hljs-comment">//头删</span></span><br>&#123;<br>assert (!Empty());<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>m_a[i] = m_a[i + <span class="hljs-number">1</span>];<br>&#125;<br>m_size--;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-尾插"><a href="#7-尾插" class="headerlink" title="7.尾插"></a>7.尾插</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListPushBack</span><span class="hljs-params">( T n)</span> <span class="hljs-comment">//尾插</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">CheckCapacity</span>();<span class="hljs-comment">//检查容量</span><br>m_a[m_size] = n;<br>m_size++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-尾删"><a href="#8-尾删" class="headerlink" title="8.尾删"></a>8.尾删</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">SeqListPopBack</span>() <span class="hljs-comment">//尾删</span><br>&#123;<br><span class="hljs-built_in">assert</span>(!Empty());<br>m_size--;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-打印函数"><a href="#9-打印函数" class="headerlink" title="9.打印函数"></a>9.打印函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintSeqList</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (m_size == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;该顺序表为空&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m_size; i++)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;m_a[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;]=&quot;</span> &lt;&lt; m_a[i] &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>&#125;<br>std::cout &lt;&lt; std::endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)<span class="hljs-comment">//双指针解法</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[i]!=val)<br>            &#123;<br>                nums[n]=nums[i];<br>                n++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//题目链接https://leetcode.cn/problems/remove-element/</span><br></code></pre></td></tr></table></figure><h2 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h2><p>给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。</p><p>考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：<br>更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。<br>返回 k 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,i=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;nums.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[left]!=nums[i])<br>            &#123;<br>                nums[left+<span class="hljs-number">1</span>]=nums[i];<br>                left++;<br>            &#125;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>顺序表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Socket网络编程</title>
    <link href="/2023/11/29/c-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/11/29/c-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Socket套接字函数"><a href="#Socket套接字函数" class="headerlink" title="Socket套接字函数"></a>Socket套接字函数</h1><p>在使用scoket进行网络编程时应首先包含#include&lt;winsock2.h&gt;（Windows环境下）头文件，linux环境可以通过man socket命令在终端查询所在的头文件。</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stan">uersname:~$ man socket<br><br>SOCKET(<span class="hljs-number">2</span>)                  Linux Programmer&#x27;s Manual                 SOCKET(<span class="hljs-number">2</span>)<br><br>NAME<br>       socket - create an endpoint <span class="hljs-keyword">for</span> communication<br><br>SYNOPSIS<br>       <span class="hljs-meta">#include &lt;<span class="hljs-string">sys</span>/<span class="hljs-string">types.h</span>&gt;          /* S<span class="hljs-string">ee</span> NOTES */</span><br>       <span class="hljs-meta">#include &lt;<span class="hljs-string">sys</span>/<span class="hljs-string">socket.h</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="1-socket函数"><a href="#1-socket函数" class="headerlink" title="1.socket函数"></a>1.socket函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//创建一个套接字</span><br><span class="hljs-type">int</span> socket(<span class="hljs-type">int</span> af,<span class="hljs-type">int</span> <span class="hljs-keyword">type</span>,<span class="hljs-type">int</span> protocol)<br></code></pre></td></tr></table></figure><p>socket函数有三个参数：</p><ul><li>af：使用的地址族协议<ul><li>AF_INET：使用ipv4形式的ip地址;</li><li>AF_INET6：使用ipv6形式的ip地址;</li></ul></li><li>type:<ul><li>SOCK_SOTREAM：使用流式的地址传输协议;</li><li>SOCK_DGRAM：用报式的地址传输协议;</li></ul></li><li>portocol: 一般写0，使用默认的协议即可<ul><li>SOCK_SOTREAM：tcp;</li><li>SOCK_DGRAM：udp;</li></ul></li></ul><p>关于socket函数的返回值：socket函数的返回值是一个int类型文件描述符，成功返回文件描述符，失败则返回-1。（这里说明一下，在网络编程中，几乎所有的函数失败的返回值都是-1）</p><h2 id="2-bind函数"><a href="#2-bind函数" class="headerlink" title="2.bind函数"></a>2.bind函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//用于将文件描述符与ip地址和端口进行绑定</span><br><span class="hljs-type">int</span> bind(socket s,<span class="hljs-keyword">const</span> sockaddr* addr,<span class="hljs-type">int</span> <span class="hljs-built_in">len</span>)<br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>addr：将绑定的端口和ip地址记录在这个结构体中;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//这里说明一下sockaddr数据结构</span><br><br><span class="hljs-comment">// 在写数据的时候不好用</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr</span> &#123;<br><span class="hljs-type">sa_family_t</span> sa_family;       <span class="hljs-comment">// 地址族协议, ipv4</span><br><span class="hljs-type">char</span>        sa_data[<span class="hljs-number">14</span>];     <span class="hljs-comment">// 端口(2字节) + IP地址(4字节) + 填充(8字节)</span><br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span><br>&#123;<br>    <span class="hljs-type">sa_family_t</span> sin_family;<span class="hljs-comment">/* 地址族协议: AF_INET */</span><br>    <span class="hljs-type">in_port_t</span> sin_port;         <span class="hljs-comment">/* 端口, 2字节-&gt; 大端  */</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">in_addr</span> sin_addr;    <span class="hljs-comment">/* IP地址, 4字节 -&gt; 大端  */</span><br>&#125;;  <br></code></pre></td></tr></table></figure></li><li>len：addr结构体的大小，可以使用sizeof()函数获得;</li><li>返回值：成功返回0，失败则返回-1;</li></ul><h2 id="3-listen函数"><a href="#3-listen函数" class="headerlink" title="3.listen函数"></a>3.listen函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用于给监听的套接字设置监听</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(socket s,<span class="hljs-type">int</span> backlog)</span><br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>backlog：设置最大连接请求数量，最大128;</li><li>返回值：成功返回0，失败则返回-1;</li></ul><h2 id="4-accept函数"><a href="#4-accept函数" class="headerlink" title="4.accept函数"></a>4.accept函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//接受连接</span><br><span class="hljs-type">int</span> accept(socket s,sockaddr* addr,<span class="hljs-type">int</span> <span class="hljs-built_in">len</span>)<br><span class="hljs-comment">//当无连接请求时，处于阻塞状态</span><br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>addr：用于存储建立连接的客户端信息(ip地址和端口等);</li><li>len：addr的大小;</li><li>返回值：成功则返回用于通信的文件描述符，失败返回-1;</li></ul><h2 id="5-connection函数"><a href="#5-connection函数" class="headerlink" title="5.connection函数"></a>5.connection函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//客户端建立连接函数</span><br><span class="hljs-type">int</span> connection(socket s,<span class="hljs-keyword">const</span> sockaddr* addr,<span class="hljs-type">int</span> <span class="hljs-built_in">len</span>)<br></code></pre></td></tr></table></figure><ul><li>s：文件描述符，通过socket()函数的返回值获取;</li><li>addr: 用于存储建立连接的客户端信息(ip地址和端口等);</li><li>len: addr的大小;</li><li>返回值：成功则返回0，失败返回-1;</li></ul><h2 id="6-send-write函数"><a href="#6-send-write函数" class="headerlink" title="6.send&#x2F;write函数"></a>6.send&#x2F;write函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//发送数据</span><br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">send</span><span class="hljs-params">(socket s,<span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf,<span class="hljs-type">size_t</span> len,<span class="hljs-type">int</span> flags)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">write</span><span class="hljs-params">(socket s, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> len)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>s：用于通信的文件描述符，为accept()的返回值</li><li>buf：传入参数，用于存储发送的数据</li><li>len：buf的容量</li><li>flags: 特殊的属性, 一般不使用, 指定为 0</li><li>返回值： 发送成功返回实际的字节数与len相等，失败返回0</li></ul><h2 id="7-read-recv函数"><a href="#7-read-recv函数" class="headerlink" title="7.read&#x2F;recv函数"></a>7.read&#x2F;recv函数</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//接收数据</span><br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> size)</span></span>;<br><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">recv</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> size, <span class="hljs-type">int</span> flags)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>s：用于通信的文件描述符，为accept()的返回值</li><li>buf：传出参数，用于存储接受的数据</li><li>len：buf的容量</li><li>flags: 特殊的属性, 一般不使用, 指定为 0</li><li>返回值： 大于零接受成功；等于0对方断开连接；-1失败</li></ul><p>如果连接没有断开，接收端接收不到数据，接收数据的函数会阻塞等待数据到达，数据到达后函数解除阻塞，开始接收数据，当发送端断开连接，接收端无法接收到任何数据，但是这时候就不会阻塞了，函数直接返回0。</p><h1 id="服务器段实现"><a href="#服务器段实现" class="headerlink" title="服务器段实现"></a>服务器段实现</h1><p>以下代码均在windows环境下实现</p><h2 id="1-初始化网络环境"><a href="#1-初始化网络环境" class="headerlink" title="1.初始化网络环境"></a>1.初始化网络环境</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//在windows环境下需要加载socket套接字环境</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-comment">//网络环境初始化</span><br>WSADATA data;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ref = <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;data);<span class="hljs-comment">// 返回值: 成功返回0，失败返回SOCKET_ERROR。</span><br><span class="hljs-comment">//一般都使用MAKEWORD(2, 2)</span><br></code></pre></td></tr></table></figure><h2 id="2-创建socket的套接字"><a href="#2-创建socket的套接字" class="headerlink" title="2.创建socket的套接字"></a>2.创建socket的套接字</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//创建socket套接字，返回一个int的文件描述符</span><br>    <span class="hljs-type">int</span> sock_fd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-comment">//ipv4和流式协议</span><br><span class="hljs-keyword">if</span> (sock_fd==SOCKET_ERROR)<span class="hljs-comment">//判断是否成功</span><br>&#123;<br>std::cerr &lt;&lt; socket &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-对文件描述符绑定ip和端口"><a href="#3-对文件描述符绑定ip和端口" class="headerlink" title="3.对文件描述符绑定ip和端口"></a>3.对文件描述符绑定ip和端口</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">   <span class="hljs-comment">//在vs环境下使用inet_addr()必须添加</span><br>   <span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS 这个宏</span><br>   sockaddr_in addr;<span class="hljs-comment">//创建一个sockaddr_in类型的对象，用于存储ip和端口</span><br>addr.sin_family = AF_INET;<span class="hljs-comment">//设置地址协议为ipv4</span><br>addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">8080</span>);<span class="hljs-comment">//设置端口</span><br>addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;10.0.0.1&quot;</span>);<span class="hljs-comment">//绑定本机的ip，可以在命令窗口查看</span><br>   <span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(addr);<br><span class="hljs-type">int</span> bef = <span class="hljs-built_in">bind</span>(sock_fd, (sockaddr*)&amp;addr, len);<br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;绑定失败&quot;</span>;<br>std::cerr &lt;&lt; bind &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-设置监听"><a href="#4-设置监听" class="headerlink" title="4.设置监听"></a>4.设置监听</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">   <span class="hljs-comment">//用于监听有无客户端发起连接请求</span><br>   <span class="hljs-type">int</span> bef = <span class="hljs-built_in">listen</span>(sock_fd, <span class="hljs-number">128</span>);<span class="hljs-comment">//最大可连接数为128</span><br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;设置监听失败&quot;</span>;<br>std::cerr &lt;&lt;listen &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-接受连接"><a href="#5-接受连接" class="headerlink" title="5.接受连接"></a>5.接受连接</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">   <span class="hljs-comment">//当有客户端建立连接，则通过accept()建立连接，返回一个用于通信的文件描述符</span><br>   sockaddr_in cliaddr;<span class="hljs-comment">//用于存储客户机的信息</span><br><span class="hljs-type">int</span> caddlen = <span class="hljs-built_in">sizeof</span>(cliaddr);<br><span class="hljs-type">int</span> afd = <span class="hljs-built_in">accept</span>(sock_fd, (sockaddr*)&amp;cliaddr, &amp;caddlen);<br><span class="hljs-keyword">if</span> (afd == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;连接失败&quot;</span>;<br>std::cerr &lt;&lt; accept &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-通信"><a href="#6-通信" class="headerlink" title="6.通信"></a>6.通信</h2><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)<br>&#123;<br><span class="hljs-keyword">char</span> buff[<span class="hljs-number">1024</span>];<span class="hljs-comment">//创建一个数组，用于存储客户端发来的信息</span><br>memset(buff, <span class="hljs-number">0</span>, sizeof(buff));<br><span class="hljs-keyword">int</span> rlen=recv(afd, buff, sizeof(buff), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (rlen &gt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client is :&quot;</span> &lt;&lt; buff &lt;&lt; std::endl;<br>send(afd, buff, rlen,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rlen == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;客户端断开连接&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cerr &lt;&lt; recv &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-关闭文件描述符"><a href="#7-关闭文件描述符" class="headerlink" title="7.关闭文件描述符"></a>7.关闭文件描述符</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">   <span class="hljs-built_in">closesocket</span>(sock_fd);<br><span class="hljs-built_in">closesocket</span>(afd);<br><span class="hljs-comment">// 注销Winsock相关库</span><br><span class="hljs-built_in">WSACleanup</span>();<br></code></pre></td></tr></table></figure><h2 id="8-完整代码"><a href="#8-完整代码" class="headerlink" title="8.完整代码"></a>8.完整代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS <span class="hljs-comment">//vs环境下必须定义，否则无法使用inet_addr函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1.网络环境初始化</span><br>WSADATA data;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ref = <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;data);<span class="hljs-comment">// 返回值: 成功返回0，失败返回SOCKET_ERROR。</span><br><span class="hljs-keyword">if</span> (ref == SOCKET_ERROR)<br>&#123;<br>std::cerr &lt;&lt; <span class="hljs-string">&quot;初始化网络失败&quot;</span> &lt;&lt; WSAStartup &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> std::cout &lt;&lt; <span class="hljs-string">&quot;初始化网络环境&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-comment">//2.创建监听字节符</span><br><span class="hljs-comment">//const int sock_fd = socket(AF_INET, SOCK_STREAM, 0);//ipv4</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> sock_fd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-comment">//ipv4</span><br><span class="hljs-keyword">if</span> (sock_fd==SOCKET_ERROR)<br>&#123;<br>std::cerr &lt;&lt; socket &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//3.绑定端口合ip</span><br>sockaddr_in addr;<br>addr.sin_family = AF_INET;<span class="hljs-comment">//设置地址协议为ipv4</span><br>addr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">5678</span>);<span class="hljs-comment">//设置端口</span><br>addr.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;192.168.179.1&quot;</span>);<span class="hljs-comment">//绑定本机的ip</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;server is ip:&quot;</span> &lt;&lt;<span class="hljs-string">&quot;192.168.179.1&quot;</span>  &lt;&lt; <span class="hljs-string">&quot;     server is port : &quot;</span> &lt;&lt; <span class="hljs-built_in">ntohs</span>(addr.sin_port) &lt;&lt; std::endl;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(addr);<br><span class="hljs-type">int</span> bef = ::<span class="hljs-built_in">bind</span>(sock_fd, (sockaddr*)&amp;addr, len);<br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;绑定失败&quot;</span>;<br>std::cerr &lt;&lt; bind &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//4.设置监听</span><br>bef = <span class="hljs-built_in">listen</span>(sock_fd, <span class="hljs-number">128</span>);<br><span class="hljs-keyword">if</span> (bef == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;设置监听失败&quot;</span>;<br>std::cerr &lt;&lt;listen &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//5.接受连接</span><br>sockaddr_in cliaddr;<span class="hljs-comment">//用于存储客户机的信息</span><br><span class="hljs-type">int</span> caddlen = <span class="hljs-built_in">sizeof</span>(cliaddr);<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> afd = ::<span class="hljs-built_in">accept</span>(sock_fd, (sockaddr*)&amp;cliaddr, &amp;caddlen);<br><span class="hljs-keyword">if</span> (afd == SOCKET_ERROR)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;连接失败&quot;</span>;<br>std::cerr &lt;&lt; accept &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client is ip&quot;</span> &lt;&lt;cliaddr.sin_addr.S_un.S_addr&lt;&lt;<span class="hljs-string">&quot;client is port &quot;</span>&lt;&lt;cliaddr.sin_port &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-comment">//6.接收发送数据</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-type">char</span> buff[<span class="hljs-number">1024</span>];<br><span class="hljs-built_in">memset</span>(buff, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buff));<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> rlen=<span class="hljs-built_in">recv</span>(afd, buff, <span class="hljs-built_in">sizeof</span>(buff), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (rlen &gt; <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;client is :&quot;</span> &lt;&lt; buff &lt;&lt; std::endl;<br><span class="hljs-built_in">send</span>(afd, buff, rlen,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rlen == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;客户端断开连接&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cerr &lt;&lt; recv &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">closesocket</span>(sock_fd);<br><span class="hljs-built_in">closesocket</span>(afd);<br><span class="hljs-comment">// 注销Winsock相关库</span><br><span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h1><p>在网络编程中，客户端的实现比服务端简单，只有3个步骤</p><ul><li>创建socket套接字：与服务端一致</li><li>建立连接<pre><code class="hljs">  sockaddr_in addr;  addr.sin_family = AF_INET;  addr.sin_port= htons(8080);//与服务器端口一直  addr.sin_addr.S_un.S_addr= inet_addr(&quot;10.0.0.1&quot;);//绑定本机的ip  int conct_fd = connect(sock_fd, (sockaddr*)&amp;addr, sizeof(addr));  if (conct_fd == SOCKET_ERROR)  &#123;      std::cout &lt;&lt; &quot;连接失败&quot;;      return -1;  &#125;  else std::cout &lt;&lt; &quot;连接成功&quot; &lt;&lt; std::endl;</code></pre></li><li>通信：与服务端一致</li></ul><p>注意：在客户端也需要初始化网络环境，以及结束时关闭文件描述符和注销socket相关库</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/28/hello-world/"/>
    <url>/2023/11/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
